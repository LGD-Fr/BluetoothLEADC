

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jun 02 15:59:40 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F1508 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0113                     	;# 
   127  0114                     	;# 
   128  0115                     	;# 
   129  0116                     	;# 
   130  0117                     	;# 
   131  0118                     	;# 
   132  0119                     	;# 
   133  011D                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  018E                     	;# 
   137  0191                     	;# 
   138  0191                     	;# 
   139  0192                     	;# 
   140  0193                     	;# 
   141  0193                     	;# 
   142  0194                     	;# 
   143  0195                     	;# 
   144  0196                     	;# 
   145  0197                     	;# 
   146  0199                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019C                     	;# 
   151  019D                     	;# 
   152  019E                     	;# 
   153  019F                     	;# 
   154  020C                     	;# 
   155  020D                     	;# 
   156  0211                     	;# 
   157  0211                     	;# 
   158  0212                     	;# 
   159  0212                     	;# 
   160  0213                     	;# 
   161  0213                     	;# 
   162  0214                     	;# 
   163  0214                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0215                     	;# 
   167  0216                     	;# 
   168  0216                     	;# 
   169  0217                     	;# 
   170  0217                     	;# 
   171  0391                     	;# 
   172  0392                     	;# 
   173  0393                     	;# 
   174  0394                     	;# 
   175  0395                     	;# 
   176  0396                     	;# 
   177  0498                     	;# 
   178  0498                     	;# 
   179  0499                     	;# 
   180  049A                     	;# 
   181  049B                     	;# 
   182  049B                     	;# 
   183  049C                     	;# 
   184  049D                     	;# 
   185  049E                     	;# 
   186  049F                     	;# 
   187  0611                     	;# 
   188  0612                     	;# 
   189  0613                     	;# 
   190  0613                     	;# 
   191  0614                     	;# 
   192  0615                     	;# 
   193  0616                     	;# 
   194  0616                     	;# 
   195  0617                     	;# 
   196  0618                     	;# 
   197  0619                     	;# 
   198  0619                     	;# 
   199  061A                     	;# 
   200  061B                     	;# 
   201  061C                     	;# 
   202  061C                     	;# 
   203  0691                     	;# 
   204  0692                     	;# 
   205  0693                     	;# 
   206  0694                     	;# 
   207  0695                     	;# 
   208  0F0F                     	;# 
   209  0F10                     	;# 
   210  0F11                     	;# 
   211  0F12                     	;# 
   212  0F13                     	;# 
   213  0F14                     	;# 
   214  0F15                     	;# 
   215  0F16                     	;# 
   216  0F17                     	;# 
   217  0F18                     	;# 
   218  0F19                     	;# 
   219  0F1A                     	;# 
   220  0F1B                     	;# 
   221  0F1C                     	;# 
   222  0F1D                     	;# 
   223  0F1E                     	;# 
   224  0F1F                     	;# 
   225  0F20                     	;# 
   226  0F21                     	;# 
   227  0F22                     	;# 
   228  0F23                     	;# 
   229  0F24                     	;# 
   230  0F25                     	;# 
   231  0F26                     	;# 
   232  0F27                     	;# 
   233  0F28                     	;# 
   234  0F29                     	;# 
   235  0F2A                     	;# 
   236  0F2B                     	;# 
   237  0F2C                     	;# 
   238  0F2D                     	;# 
   239  0F2E                     	;# 
   240  0F2F                     	;# 
   241  0F8C                     	;# 
   242  0F8D                     	;# 
   243  0F91                     	;# 
   244  0F95                     	;# 
   245  0F96                     	;# 
   246  0F97                     	;# 
   247  0F9C                     	;# 
   248  0F9D                     	;# 
   249  0F9E                     	;# 
   250  0FE3                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  008C                     	;# 
   290  008D                     	;# 
   291  008E                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0093                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  010C                     	;# 
   307  010D                     	;# 
   308  010E                     	;# 
   309  0111                     	;# 
   310  0112                     	;# 
   311  0113                     	;# 
   312  0114                     	;# 
   313  0115                     	;# 
   314  0116                     	;# 
   315  0117                     	;# 
   316  0118                     	;# 
   317  0119                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020C                     	;# 
   340  020D                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0391                     	;# 
   357  0392                     	;# 
   358  0393                     	;# 
   359  0394                     	;# 
   360  0395                     	;# 
   361  0396                     	;# 
   362  0498                     	;# 
   363  0498                     	;# 
   364  0499                     	;# 
   365  049A                     	;# 
   366  049B                     	;# 
   367  049B                     	;# 
   368  049C                     	;# 
   369  049D                     	;# 
   370  049E                     	;# 
   371  049F                     	;# 
   372  0611                     	;# 
   373  0612                     	;# 
   374  0613                     	;# 
   375  0613                     	;# 
   376  0614                     	;# 
   377  0615                     	;# 
   378  0616                     	;# 
   379  0616                     	;# 
   380  0617                     	;# 
   381  0618                     	;# 
   382  0619                     	;# 
   383  0619                     	;# 
   384  061A                     	;# 
   385  061B                     	;# 
   386  061C                     	;# 
   387  061C                     	;# 
   388  0691                     	;# 
   389  0692                     	;# 
   390  0693                     	;# 
   391  0694                     	;# 
   392  0695                     	;# 
   393  0F0F                     	;# 
   394  0F10                     	;# 
   395  0F11                     	;# 
   396  0F12                     	;# 
   397  0F13                     	;# 
   398  0F14                     	;# 
   399  0F15                     	;# 
   400  0F16                     	;# 
   401  0F17                     	;# 
   402  0F18                     	;# 
   403  0F19                     	;# 
   404  0F1A                     	;# 
   405  0F1B                     	;# 
   406  0F1C                     	;# 
   407  0F1D                     	;# 
   408  0F1E                     	;# 
   409  0F1F                     	;# 
   410  0F20                     	;# 
   411  0F21                     	;# 
   412  0F22                     	;# 
   413  0F23                     	;# 
   414  0F24                     	;# 
   415  0F25                     	;# 
   416  0F26                     	;# 
   417  0F27                     	;# 
   418  0F28                     	;# 
   419  0F29                     	;# 
   420  0F2A                     	;# 
   421  0F2B                     	;# 
   422  0F2C                     	;# 
   423  0F2D                     	;# 
   424  0F2E                     	;# 
   425  0F2F                     	;# 
   426  0F8C                     	;# 
   427  0F8D                     	;# 
   428  0F91                     	;# 
   429  0F95                     	;# 
   430  0F96                     	;# 
   431  0F97                     	;# 
   432  0F9C                     	;# 
   433  0F9D                     	;# 
   434  0F9E                     	;# 
   435  0FE3                     	;# 
   436  0FE4                     	;# 
   437  0FE5                     	;# 
   438  0FE6                     	;# 
   439  0FE7                     	;# 
   440  0FE8                     	;# 
   441  0FE9                     	;# 
   442  0FEA                     	;# 
   443  0FEB                     	;# 
   444  0FED                     	;# 
   445  0FEE                     	;# 
   446  0FEF                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000D                     	;# 
   461  000E                     	;# 
   462  0011                     	;# 
   463  0012                     	;# 
   464  0013                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  008C                     	;# 
   475  008D                     	;# 
   476  008E                     	;# 
   477  0091                     	;# 
   478  0092                     	;# 
   479  0093                     	;# 
   480  0095                     	;# 
   481  0096                     	;# 
   482  0097                     	;# 
   483  0099                     	;# 
   484  009A                     	;# 
   485  009B                     	;# 
   486  009B                     	;# 
   487  009C                     	;# 
   488  009D                     	;# 
   489  009E                     	;# 
   490  009F                     	;# 
   491  010C                     	;# 
   492  010D                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  011D                     	;# 
   504  018C                     	;# 
   505  018D                     	;# 
   506  018E                     	;# 
   507  0191                     	;# 
   508  0191                     	;# 
   509  0192                     	;# 
   510  0193                     	;# 
   511  0193                     	;# 
   512  0194                     	;# 
   513  0195                     	;# 
   514  0196                     	;# 
   515  0197                     	;# 
   516  0199                     	;# 
   517  019A                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019D                     	;# 
   522  019E                     	;# 
   523  019F                     	;# 
   524  020C                     	;# 
   525  020D                     	;# 
   526  0211                     	;# 
   527  0211                     	;# 
   528  0212                     	;# 
   529  0212                     	;# 
   530  0213                     	;# 
   531  0213                     	;# 
   532  0214                     	;# 
   533  0214                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0215                     	;# 
   537  0216                     	;# 
   538  0216                     	;# 
   539  0217                     	;# 
   540  0217                     	;# 
   541  0391                     	;# 
   542  0392                     	;# 
   543  0393                     	;# 
   544  0394                     	;# 
   545  0395                     	;# 
   546  0396                     	;# 
   547  0498                     	;# 
   548  0498                     	;# 
   549  0499                     	;# 
   550  049A                     	;# 
   551  049B                     	;# 
   552  049B                     	;# 
   553  049C                     	;# 
   554  049D                     	;# 
   555  049E                     	;# 
   556  049F                     	;# 
   557  0611                     	;# 
   558  0612                     	;# 
   559  0613                     	;# 
   560  0613                     	;# 
   561  0614                     	;# 
   562  0615                     	;# 
   563  0616                     	;# 
   564  0616                     	;# 
   565  0617                     	;# 
   566  0618                     	;# 
   567  0619                     	;# 
   568  0619                     	;# 
   569  061A                     	;# 
   570  061B                     	;# 
   571  061C                     	;# 
   572  061C                     	;# 
   573  0691                     	;# 
   574  0692                     	;# 
   575  0693                     	;# 
   576  0694                     	;# 
   577  0695                     	;# 
   578  0F0F                     	;# 
   579  0F10                     	;# 
   580  0F11                     	;# 
   581  0F12                     	;# 
   582  0F13                     	;# 
   583  0F14                     	;# 
   584  0F15                     	;# 
   585  0F16                     	;# 
   586  0F17                     	;# 
   587  0F18                     	;# 
   588  0F19                     	;# 
   589  0F1A                     	;# 
   590  0F1B                     	;# 
   591  0F1C                     	;# 
   592  0F1D                     	;# 
   593  0F1E                     	;# 
   594  0F1F                     	;# 
   595  0F20                     	;# 
   596  0F21                     	;# 
   597  0F22                     	;# 
   598  0F23                     	;# 
   599  0F24                     	;# 
   600  0F25                     	;# 
   601  0F26                     	;# 
   602  0F27                     	;# 
   603  0F28                     	;# 
   604  0F29                     	;# 
   605  0F2A                     	;# 
   606  0F2B                     	;# 
   607  0F2C                     	;# 
   608  0F2D                     	;# 
   609  0F2E                     	;# 
   610  0F2F                     	;# 
   611  0F8C                     	;# 
   612  0F8D                     	;# 
   613  0F91                     	;# 
   614  0F95                     	;# 
   615  0F96                     	;# 
   616  0F97                     	;# 
   617  0F9C                     	;# 
   618  0F9D                     	;# 
   619  0F9E                     	;# 
   620  0FE3                     	;# 
   621  0FE4                     	;# 
   622  0FE5                     	;# 
   623  0FE6                     	;# 
   624  0FE7                     	;# 
   625  0FE8                     	;# 
   626  0FE9                     	;# 
   627  0FEA                     	;# 
   628  0FEB                     	;# 
   629  0FED                     	;# 
   630  0FEE                     	;# 
   631  0FEF                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0008                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0016                     	;# 
   653  0017                     	;# 
   654  0018                     	;# 
   655  0019                     	;# 
   656  001A                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  008C                     	;# 
   660  008D                     	;# 
   661  008E                     	;# 
   662  0091                     	;# 
   663  0092                     	;# 
   664  0093                     	;# 
   665  0095                     	;# 
   666  0096                     	;# 
   667  0097                     	;# 
   668  0099                     	;# 
   669  009A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  009F                     	;# 
   676  010C                     	;# 
   677  010D                     	;# 
   678  010E                     	;# 
   679  0111                     	;# 
   680  0112                     	;# 
   681  0113                     	;# 
   682  0114                     	;# 
   683  0115                     	;# 
   684  0116                     	;# 
   685  0117                     	;# 
   686  0118                     	;# 
   687  0119                     	;# 
   688  011D                     	;# 
   689  018C                     	;# 
   690  018D                     	;# 
   691  018E                     	;# 
   692  0191                     	;# 
   693  0191                     	;# 
   694  0192                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0197                     	;# 
   701  0199                     	;# 
   702  019A                     	;# 
   703  019B                     	;# 
   704  019B                     	;# 
   705  019C                     	;# 
   706  019D                     	;# 
   707  019E                     	;# 
   708  019F                     	;# 
   709  020C                     	;# 
   710  020D                     	;# 
   711  0211                     	;# 
   712  0211                     	;# 
   713  0212                     	;# 
   714  0212                     	;# 
   715  0213                     	;# 
   716  0213                     	;# 
   717  0214                     	;# 
   718  0214                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0215                     	;# 
   722  0216                     	;# 
   723  0216                     	;# 
   724  0217                     	;# 
   725  0217                     	;# 
   726  0391                     	;# 
   727  0392                     	;# 
   728  0393                     	;# 
   729  0394                     	;# 
   730  0395                     	;# 
   731  0396                     	;# 
   732  0498                     	;# 
   733  0498                     	;# 
   734  0499                     	;# 
   735  049A                     	;# 
   736  049B                     	;# 
   737  049B                     	;# 
   738  049C                     	;# 
   739  049D                     	;# 
   740  049E                     	;# 
   741  049F                     	;# 
   742  0611                     	;# 
   743  0612                     	;# 
   744  0613                     	;# 
   745  0613                     	;# 
   746  0614                     	;# 
   747  0615                     	;# 
   748  0616                     	;# 
   749  0616                     	;# 
   750  0617                     	;# 
   751  0618                     	;# 
   752  0619                     	;# 
   753  0619                     	;# 
   754  061A                     	;# 
   755  061B                     	;# 
   756  061C                     	;# 
   757  061C                     	;# 
   758  0691                     	;# 
   759  0692                     	;# 
   760  0693                     	;# 
   761  0694                     	;# 
   762  0695                     	;# 
   763  0F0F                     	;# 
   764  0F10                     	;# 
   765  0F11                     	;# 
   766  0F12                     	;# 
   767  0F13                     	;# 
   768  0F14                     	;# 
   769  0F15                     	;# 
   770  0F16                     	;# 
   771  0F17                     	;# 
   772  0F18                     	;# 
   773  0F19                     	;# 
   774  0F1A                     	;# 
   775  0F1B                     	;# 
   776  0F1C                     	;# 
   777  0F1D                     	;# 
   778  0F1E                     	;# 
   779  0F1F                     	;# 
   780  0F20                     	;# 
   781  0F21                     	;# 
   782  0F22                     	;# 
   783  0F23                     	;# 
   784  0F24                     	;# 
   785  0F25                     	;# 
   786  0F26                     	;# 
   787  0F27                     	;# 
   788  0F28                     	;# 
   789  0F29                     	;# 
   790  0F2A                     	;# 
   791  0F2B                     	;# 
   792  0F2C                     	;# 
   793  0F2D                     	;# 
   794  0F2E                     	;# 
   795  0F2F                     	;# 
   796  0F8C                     	;# 
   797  0F8D                     	;# 
   798  0F91                     	;# 
   799  0F95                     	;# 
   800  0F96                     	;# 
   801  0F97                     	;# 
   802  0F9C                     	;# 
   803  0F9D                     	;# 
   804  0F9E                     	;# 
   805  0FE3                     	;# 
   806  0FE4                     	;# 
   807  0FE5                     	;# 
   808  0FE6                     	;# 
   809  0FE7                     	;# 
   810  0FE8                     	;# 
   811  0FE9                     	;# 
   812  0FEA                     	;# 
   813  0FEB                     	;# 
   814  0FED                     	;# 
   815  0FEE                     	;# 
   816  0FEF                     	;# 
   817  0000                     	;# 
   818  0001                     	;# 
   819  0002                     	;# 
   820  0003                     	;# 
   821  0004                     	;# 
   822  0005                     	;# 
   823  0006                     	;# 
   824  0007                     	;# 
   825  0008                     	;# 
   826  0009                     	;# 
   827  000A                     	;# 
   828  000B                     	;# 
   829  000C                     	;# 
   830  000D                     	;# 
   831  000E                     	;# 
   832  0011                     	;# 
   833  0012                     	;# 
   834  0013                     	;# 
   835  0015                     	;# 
   836  0016                     	;# 
   837  0016                     	;# 
   838  0017                     	;# 
   839  0018                     	;# 
   840  0019                     	;# 
   841  001A                     	;# 
   842  001B                     	;# 
   843  001C                     	;# 
   844  008C                     	;# 
   845  008D                     	;# 
   846  008E                     	;# 
   847  0091                     	;# 
   848  0092                     	;# 
   849  0093                     	;# 
   850  0095                     	;# 
   851  0096                     	;# 
   852  0097                     	;# 
   853  0099                     	;# 
   854  009A                     	;# 
   855  009B                     	;# 
   856  009B                     	;# 
   857  009C                     	;# 
   858  009D                     	;# 
   859  009E                     	;# 
   860  009F                     	;# 
   861  010C                     	;# 
   862  010D                     	;# 
   863  010E                     	;# 
   864  0111                     	;# 
   865  0112                     	;# 
   866  0113                     	;# 
   867  0114                     	;# 
   868  0115                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  0118                     	;# 
   872  0119                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020C                     	;# 
   895  020D                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0391                     	;# 
   912  0392                     	;# 
   913  0393                     	;# 
   914  0394                     	;# 
   915  0395                     	;# 
   916  0396                     	;# 
   917  0498                     	;# 
   918  0498                     	;# 
   919  0499                     	;# 
   920  049A                     	;# 
   921  049B                     	;# 
   922  049B                     	;# 
   923  049C                     	;# 
   924  049D                     	;# 
   925  049E                     	;# 
   926  049F                     	;# 
   927  0611                     	;# 
   928  0612                     	;# 
   929  0613                     	;# 
   930  0613                     	;# 
   931  0614                     	;# 
   932  0615                     	;# 
   933  0616                     	;# 
   934  0616                     	;# 
   935  0617                     	;# 
   936  0618                     	;# 
   937  0619                     	;# 
   938  0619                     	;# 
   939  061A                     	;# 
   940  061B                     	;# 
   941  061C                     	;# 
   942  061C                     	;# 
   943  0691                     	;# 
   944  0692                     	;# 
   945  0693                     	;# 
   946  0694                     	;# 
   947  0695                     	;# 
   948  0F0F                     	;# 
   949  0F10                     	;# 
   950  0F11                     	;# 
   951  0F12                     	;# 
   952  0F13                     	;# 
   953  0F14                     	;# 
   954  0F15                     	;# 
   955  0F16                     	;# 
   956  0F17                     	;# 
   957  0F18                     	;# 
   958  0F19                     	;# 
   959  0F1A                     	;# 
   960  0F1B                     	;# 
   961  0F1C                     	;# 
   962  0F1D                     	;# 
   963  0F1E                     	;# 
   964  0F1F                     	;# 
   965  0F20                     	;# 
   966  0F21                     	;# 
   967  0F22                     	;# 
   968  0F23                     	;# 
   969  0F24                     	;# 
   970  0F25                     	;# 
   971  0F26                     	;# 
   972  0F27                     	;# 
   973  0F28                     	;# 
   974  0F29                     	;# 
   975  0F2A                     	;# 
   976  0F2B                     	;# 
   977  0F2C                     	;# 
   978  0F2D                     	;# 
   979  0F2E                     	;# 
   980  0F2F                     	;# 
   981  0F8C                     	;# 
   982  0F8D                     	;# 
   983  0F91                     	;# 
   984  0F95                     	;# 
   985  0F96                     	;# 
   986  0F97                     	;# 
   987  0F9C                     	;# 
   988  0F9D                     	;# 
   989  0F9E                     	;# 
   990  0FE3                     	;# 
   991  0FE4                     	;# 
   992  0FE5                     	;# 
   993  0FE6                     	;# 
   994  0FE7                     	;# 
   995  0FE8                     	;# 
   996  0FE9                     	;# 
   997  0FEA                     	;# 
   998  0FEB                     	;# 
   999  0FED                     	;# 
  1000  0FEE                     	;# 
  1001  0FEF                     	;# 
  1002  0000                     	;# 
  1003  0001                     	;# 
  1004  0002                     	;# 
  1005  0003                     	;# 
  1006  0004                     	;# 
  1007  0005                     	;# 
  1008  0006                     	;# 
  1009  0007                     	;# 
  1010  0008                     	;# 
  1011  0009                     	;# 
  1012  000A                     	;# 
  1013  000B                     	;# 
  1014  000C                     	;# 
  1015  000D                     	;# 
  1016  000E                     	;# 
  1017  0011                     	;# 
  1018  0012                     	;# 
  1019  0013                     	;# 
  1020  0015                     	;# 
  1021  0016                     	;# 
  1022  0016                     	;# 
  1023  0017                     	;# 
  1024  0018                     	;# 
  1025  0019                     	;# 
  1026  001A                     	;# 
  1027  001B                     	;# 
  1028  001C                     	;# 
  1029  008C                     	;# 
  1030  008D                     	;# 
  1031  008E                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0095                     	;# 
  1036  0096                     	;# 
  1037  0097                     	;# 
  1038  0099                     	;# 
  1039  009A                     	;# 
  1040  009B                     	;# 
  1041  009B                     	;# 
  1042  009C                     	;# 
  1043  009D                     	;# 
  1044  009E                     	;# 
  1045  009F                     	;# 
  1046  010C                     	;# 
  1047  010D                     	;# 
  1048  010E                     	;# 
  1049  0111                     	;# 
  1050  0112                     	;# 
  1051  0113                     	;# 
  1052  0114                     	;# 
  1053  0115                     	;# 
  1054  0116                     	;# 
  1055  0117                     	;# 
  1056  0118                     	;# 
  1057  0119                     	;# 
  1058  011D                     	;# 
  1059  018C                     	;# 
  1060  018D                     	;# 
  1061  018E                     	;# 
  1062  0191                     	;# 
  1063  0191                     	;# 
  1064  0192                     	;# 
  1065  0193                     	;# 
  1066  0193                     	;# 
  1067  0194                     	;# 
  1068  0195                     	;# 
  1069  0196                     	;# 
  1070  0197                     	;# 
  1071  0199                     	;# 
  1072  019A                     	;# 
  1073  019B                     	;# 
  1074  019B                     	;# 
  1075  019C                     	;# 
  1076  019D                     	;# 
  1077  019E                     	;# 
  1078  019F                     	;# 
  1079  020C                     	;# 
  1080  020D                     	;# 
  1081  0211                     	;# 
  1082  0211                     	;# 
  1083  0212                     	;# 
  1084  0212                     	;# 
  1085  0213                     	;# 
  1086  0213                     	;# 
  1087  0214                     	;# 
  1088  0214                     	;# 
  1089  0215                     	;# 
  1090  0215                     	;# 
  1091  0215                     	;# 
  1092  0216                     	;# 
  1093  0216                     	;# 
  1094  0217                     	;# 
  1095  0217                     	;# 
  1096  0391                     	;# 
  1097  0392                     	;# 
  1098  0393                     	;# 
  1099  0394                     	;# 
  1100  0395                     	;# 
  1101  0396                     	;# 
  1102  0498                     	;# 
  1103  0498                     	;# 
  1104  0499                     	;# 
  1105  049A                     	;# 
  1106  049B                     	;# 
  1107  049B                     	;# 
  1108  049C                     	;# 
  1109  049D                     	;# 
  1110  049E                     	;# 
  1111  049F                     	;# 
  1112  0611                     	;# 
  1113  0612                     	;# 
  1114  0613                     	;# 
  1115  0613                     	;# 
  1116  0614                     	;# 
  1117  0615                     	;# 
  1118  0616                     	;# 
  1119  0616                     	;# 
  1120  0617                     	;# 
  1121  0618                     	;# 
  1122  0619                     	;# 
  1123  0619                     	;# 
  1124  061A                     	;# 
  1125  061B                     	;# 
  1126  061C                     	;# 
  1127  061C                     	;# 
  1128  0691                     	;# 
  1129  0692                     	;# 
  1130  0693                     	;# 
  1131  0694                     	;# 
  1132  0695                     	;# 
  1133  0F0F                     	;# 
  1134  0F10                     	;# 
  1135  0F11                     	;# 
  1136  0F12                     	;# 
  1137  0F13                     	;# 
  1138  0F14                     	;# 
  1139  0F15                     	;# 
  1140  0F16                     	;# 
  1141  0F17                     	;# 
  1142  0F18                     	;# 
  1143  0F19                     	;# 
  1144  0F1A                     	;# 
  1145  0F1B                     	;# 
  1146  0F1C                     	;# 
  1147  0F1D                     	;# 
  1148  0F1E                     	;# 
  1149  0F1F                     	;# 
  1150  0F20                     	;# 
  1151  0F21                     	;# 
  1152  0F22                     	;# 
  1153  0F23                     	;# 
  1154  0F24                     	;# 
  1155  0F25                     	;# 
  1156  0F26                     	;# 
  1157  0F27                     	;# 
  1158  0F28                     	;# 
  1159  0F29                     	;# 
  1160  0F2A                     	;# 
  1161  0F2B                     	;# 
  1162  0F2C                     	;# 
  1163  0F2D                     	;# 
  1164  0F2E                     	;# 
  1165  0F2F                     	;# 
  1166  0F8C                     	;# 
  1167  0F8D                     	;# 
  1168  0F91                     	;# 
  1169  0F95                     	;# 
  1170  0F96                     	;# 
  1171  0F97                     	;# 
  1172  0F9C                     	;# 
  1173  0F9D                     	;# 
  1174  0F9E                     	;# 
  1175  0FE3                     	;# 
  1176  0FE4                     	;# 
  1177  0FE5                     	;# 
  1178  0FE6                     	;# 
  1179  0FE7                     	;# 
  1180  0FE8                     	;# 
  1181  0FE9                     	;# 
  1182  0FEA                     	;# 
  1183  0FEB                     	;# 
  1184  0FED                     	;# 
  1185  0FEE                     	;# 
  1186  0FEF                     	;# 
  1187                           
  1188                           	psect	idataBANK2
  1189  0592                     __pidataBANK2:	
  1190                           
  1191                           ;initializer for main@F4456
  1192  0592  3453               	retlw	83
  1193  0593  3455               	retlw	85
  1194  0594  3457               	retlw	87
  1195  0595  342C               	retlw	44
  1196  0596  3430               	retlw	48
  1197  0597  3431               	retlw	49
  1198  0598  3430               	retlw	48
  1199  0599  3432               	retlw	50
  1200  059A  3430               	retlw	48
  1201  059B  3433               	retlw	51
  1202  059C  3430               	retlw	48
  1203  059D  3434               	retlw	52
  1204  059E  3430               	retlw	48
  1205  059F  3435               	retlw	53
  1206  05A0  3430               	retlw	48
  1207  05A1  3436               	retlw	54
  1208  05A2  3430               	retlw	48
  1209  05A3  3437               	retlw	55
  1210  05A4  3430               	retlw	48
  1211  05A5  3438               	retlw	56
  1212  05A6  3430               	retlw	48
  1213  05A7  3439               	retlw	57
  1214  05A8  3430               	retlw	48
  1215  05A9  3430               	retlw	48
  1216  05AA  3430               	retlw	48
  1217  05AB  3441               	retlw	65
  1218  05AC  3430               	retlw	48
  1219  05AD  3442               	retlw	66
  1220  05AE  3430               	retlw	48
  1221  05AF  3443               	retlw	67
  1222  05B0  3430               	retlw	48
  1223  05B1  3444               	retlw	68
  1224  05B2  3430               	retlw	48
  1225  05B3  3445               	retlw	69
  1226  05B4  3430               	retlw	48
  1227  05B5  3446               	retlw	70
  1228  05B6  342C               	retlw	44
  1229  05B7  3400               	retlw	0
  1230  05B8  3400               	retlw	0
  1231  05B9  3400               	retlw	0
  1232  05BA  3400               	retlw	0
  1233  05BB  3400               	retlw	0
  1234  05BC  3400               	retlw	0
  1235  05BD  3400               	retlw	0
  1236  05BE  3400               	retlw	0
  1237  05BF  3400               	retlw	0
  1238  05C0  3400               	retlw	0
  1239  05C1  3400               	retlw	0
  1240  05C2  3400               	retlw	0
  1241  05C3  3400               	retlw	0
  1242  05C4  3400               	retlw	0
  1243  05C5  3400               	retlw	0
  1244  05C6  3400               	retlw	0
  1245  05C7  3400               	retlw	0
  1246  05C8  3400               	retlw	0
  1247  05C9  3400               	retlw	0
  1248  05CA  3400               	retlw	0
  1249  05CB  3400               	retlw	0
  1250  05CC  3400               	retlw	0
  1251  05CD  3400               	retlw	0
  1252  05CE  3400               	retlw	0
  1253  05CF  3400               	retlw	0
  1254  05D0  3400               	retlw	0
  1255  05D1  3400               	retlw	0
  1256                           
  1257                           	psect	stringtext
  1258  02D0                     __pstringtext:	
  1259  02D0                     _hexpowers:	
  1260  02D0  3401               	retlw	1
  1261  02D1  3400               	retlw	0
  1262  02D2  3410               	retlw	16
  1263  02D3  3400               	retlw	0
  1264  02D4  3400               	retlw	0
  1265  02D5  3401               	retlw	1
  1266  02D6  3400               	retlw	0
  1267  02D7  3410               	retlw	16
  1268  02D8                     __end_of_hexpowers:	
  1269  02D8                     STR_23:	
  1270  02D8  3453               	retlw	83	;'S'
  1271  02D9  3455               	retlw	85	;'U'
  1272  02DA  3457               	retlw	87	;'W'
  1273  02DB  342C               	retlw	44	;','
  1274  02DC  3430               	retlw	48	;'0'
  1275  02DD  3431               	retlw	49	;'1'
  1276  02DE  3430               	retlw	48	;'0'
  1277  02DF  3432               	retlw	50	;'2'
  1278  02E0  3430               	retlw	48	;'0'
  1279  02E1  3433               	retlw	51	;'3'
  1280  02E2  3430               	retlw	48	;'0'
  1281  02E3  3434               	retlw	52	;'4'
  1282  02E4  3430               	retlw	48	;'0'
  1283  02E5  3435               	retlw	53	;'5'
  1284  02E6  3430               	retlw	48	;'0'
  1285  02E7  3436               	retlw	54	;'6'
  1286  02E8  3430               	retlw	48	;'0'
  1287  02E9  3437               	retlw	55	;'7'
  1288  02EA  3430               	retlw	48	;'0'
  1289  02EB  3438               	retlw	56	;'8'
  1290  02EC  3430               	retlw	48	;'0'
  1291  02ED  3439               	retlw	57	;'9'
  1292  02EE  3430               	retlw	48	;'0'
  1293  02EF  3430               	retlw	48	;'0'
  1294  02F0  3430               	retlw	48	;'0'
  1295  02F1  3441               	retlw	65	;'A'
  1296  02F2  3430               	retlw	48	;'0'
  1297  02F3  3442               	retlw	66	;'B'
  1298  02F4  3430               	retlw	48	;'0'
  1299  02F5  3443               	retlw	67	;'C'
  1300  02F6  3430               	retlw	48	;'0'
  1301  02F7  3444               	retlw	68	;'D'
  1302  02F8  3430               	retlw	48	;'0'
  1303  02F9  3445               	retlw	69	;'E'
  1304  02FA  3430               	retlw	48	;'0'
  1305  02FB  3446               	retlw	70	;'F'
  1306  02FC  342C               	retlw	44	;','
  1307  02FD  3441               	retlw	65	;'A'
  1308  02FE  3441               	retlw	65	;'A'
  1309  02FF  3442               	retlw	66	;'B'
  1310  0300  3442               	retlw	66	;'B'
  1311  0301  3443               	retlw	67	;'C'
  1312  0302  3443               	retlw	67	;'C'
  1313  0303  3444               	retlw	68	;'D'
  1314  0304  3444               	retlw	68	;'D'
  1315  0305  3445               	retlw	69	;'E'
  1316  0306  3445               	retlw	69	;'E'
  1317  0307  3400               	retlw	0
  1318  0308                     STR_14:	
  1319  0308  3450               	retlw	80	;'P'
  1320  0309  3443               	retlw	67	;'C'
  1321  030A  342C               	retlw	44	;','
  1322  030B  3430               	retlw	48	;'0'
  1323  030C  3431               	retlw	49	;'1'
  1324  030D  3430               	retlw	48	;'0'
  1325  030E  3432               	retlw	50	;'2'
  1326  030F  3430               	retlw	48	;'0'
  1327  0310  3433               	retlw	51	;'3'
  1328  0311  3430               	retlw	48	;'0'
  1329  0312  3434               	retlw	52	;'4'
  1330  0313  3430               	retlw	48	;'0'
  1331  0314  3435               	retlw	53	;'5'
  1332  0315  3430               	retlw	48	;'0'
  1333  0316  3436               	retlw	54	;'6'
  1334  0317  3430               	retlw	48	;'0'
  1335  0318  3437               	retlw	55	;'7'
  1336  0319  3430               	retlw	48	;'0'
  1337  031A  3438               	retlw	56	;'8'
  1338  031B  3430               	retlw	48	;'0'
  1339  031C  3439               	retlw	57	;'9'
  1340  031D  3430               	retlw	48	;'0'
  1341  031E  3430               	retlw	48	;'0'
  1342  031F  3430               	retlw	48	;'0'
  1343  0320  3441               	retlw	65	;'A'
  1344  0321  3430               	retlw	48	;'0'
  1345  0322  3442               	retlw	66	;'B'
  1346  0323  3430               	retlw	48	;'0'
  1347  0324  3443               	retlw	67	;'C'
  1348  0325  3430               	retlw	48	;'0'
  1349  0326  3444               	retlw	68	;'D'
  1350  0327  3430               	retlw	48	;'0'
  1351  0328  3445               	retlw	69	;'E'
  1352  0329  3430               	retlw	48	;'0'
  1353  032A  3446               	retlw	70	;'F'
  1354  032B  342C               	retlw	44	;','
  1355  032C  3431               	retlw	49	;'1'
  1356  032D  3432               	retlw	50	;'2'
  1357  032E  342C               	retlw	44	;','
  1358  032F  3430               	retlw	48	;'0'
  1359  0330  3432               	retlw	50	;'2'
  1360  0331  3400               	retlw	0
  1361  0332                     STR_16:	
  1362  0332  3450               	retlw	80	;'P'
  1363  0333  3443               	retlw	67	;'C'
  1364  0334  342C               	retlw	44	;','
  1365  0335  3446               	retlw	70	;'F'
  1366  0336  3446               	retlw	70	;'F'
  1367  0337  3430               	retlw	48	;'0'
  1368  0338  3432               	retlw	50	;'2'
  1369  0339  3430               	retlw	48	;'0'
  1370  033A  3433               	retlw	51	;'3'
  1371  033B  3430               	retlw	48	;'0'
  1372  033C  3434               	retlw	52	;'4'
  1373  033D  3430               	retlw	48	;'0'
  1374  033E  3435               	retlw	53	;'5'
  1375  033F  3430               	retlw	48	;'0'
  1376  0340  3436               	retlw	54	;'6'
  1377  0341  3430               	retlw	48	;'0'
  1378  0342  3437               	retlw	55	;'7'
  1379  0343  3430               	retlw	48	;'0'
  1380  0344  3438               	retlw	56	;'8'
  1381  0345  3430               	retlw	48	;'0'
  1382  0346  3439               	retlw	57	;'9'
  1383  0347  3430               	retlw	48	;'0'
  1384  0348  3430               	retlw	48	;'0'
  1385  0349  3430               	retlw	48	;'0'
  1386  034A  3441               	retlw	65	;'A'
  1387  034B  3430               	retlw	48	;'0'
  1388  034C  3442               	retlw	66	;'B'
  1389  034D  3430               	retlw	48	;'0'
  1390  034E  3443               	retlw	67	;'C'
  1391  034F  3430               	retlw	48	;'0'
  1392  0350  3444               	retlw	68	;'D'
  1393  0351  3430               	retlw	48	;'0'
  1394  0352  3445               	retlw	69	;'E'
  1395  0353  3430               	retlw	48	;'0'
  1396  0354  3446               	retlw	70	;'F'
  1397  0355  342C               	retlw	44	;','
  1398  0356  3431               	retlw	49	;'1'
  1399  0357  3441               	retlw	65	;'A'
  1400  0358  342C               	retlw	44	;','
  1401  0359  3430               	retlw	48	;'0'
  1402  035A  3433               	retlw	51	;'3'
  1403  035B  3400               	retlw	0
  1404  035C                     STR_12:	
  1405  035C  3450               	retlw	80	;'P'
  1406  035D  3453               	retlw	83	;'S'
  1407  035E  342C               	retlw	44	;','
  1408  035F  3431               	retlw	49	;'1'
  1409  0360  3431               	retlw	49	;'1'
  1410  0361  3432               	retlw	50	;'2'
  1411  0362  3432               	retlw	50	;'2'
  1412  0363  3433               	retlw	51	;'3'
  1413  0364  3433               	retlw	51	;'3'
  1414  0365  3434               	retlw	52	;'4'
  1415  0366  3434               	retlw	52	;'4'
  1416  0367  3435               	retlw	53	;'5'
  1417  0368  3435               	retlw	53	;'5'
  1418  0369  3436               	retlw	54	;'6'
  1419  036A  3436               	retlw	54	;'6'
  1420  036B  3437               	retlw	55	;'7'
  1421  036C  3437               	retlw	55	;'7'
  1422  036D  3438               	retlw	56	;'8'
  1423  036E  3438               	retlw	56	;'8'
  1424  036F  3439               	retlw	57	;'9'
  1425  0370  3439               	retlw	57	;'9'
  1426  0371  3430               	retlw	48	;'0'
  1427  0372  3430               	retlw	48	;'0'
  1428  0373  3441               	retlw	65	;'A'
  1429  0374  3441               	retlw	65	;'A'
  1430  0375  3442               	retlw	66	;'B'
  1431  0376  3442               	retlw	66	;'B'
  1432  0377  3443               	retlw	67	;'C'
  1433  0378  3443               	retlw	67	;'C'
  1434  0379  3444               	retlw	68	;'D'
  1435  037A  3444               	retlw	68	;'D'
  1436  037B  3445               	retlw	69	;'E'
  1437  037C  3445               	retlw	69	;'E'
  1438  037D  3446               	retlw	70	;'F'
  1439  037E  3446               	retlw	70	;'F'
  1440  037F  3400               	retlw	0
  1441  0380                     STR_8:	
  1442  0380  3453               	retlw	83	;'S'
  1443  0381  342D               	retlw	45	;'-'
  1444  0382  342C               	retlw	44	;','
  1445  0383  3450               	retlw	80	;'P'
  1446  0384  3449               	retlw	73	;'I'
  1447  0385  3443               	retlw	67	;'C'
  1448  0386  3431               	retlw	49	;'1'
  1449  0387  3436               	retlw	54	;'6'
  1450  0388  342D               	retlw	45	;'-'
  1451  0389  3442               	retlw	66	;'B'
  1452  038A  344C               	retlw	76	;'L'
  1453  038B  3445               	retlw	69	;'E'
  1454  038C  3432               	retlw	50	;'2'
  1455  038D  342D               	retlw	45	;'-'
  1456  038E  3430               	retlw	48	;'0'
  1457  038F  3430               	retlw	48	;'0'
  1458  0390  3431               	retlw	49	;'1'
  1459  0391  3400               	retlw	0
  1460  0392                     STR_30:	
  1461  0392  3430               	retlw	48	;'0'
  1462  0393  3431               	retlw	49	;'1'
  1463  0394  3432               	retlw	50	;'2'
  1464  0395  3433               	retlw	51	;'3'
  1465  0396  3434               	retlw	52	;'4'
  1466  0397  3435               	retlw	53	;'5'
  1467  0398  3436               	retlw	54	;'6'
  1468  0399  3437               	retlw	55	;'7'
  1469  039A  3438               	retlw	56	;'8'
  1470  039B  3439               	retlw	57	;'9'
  1471  039C  3441               	retlw	65	;'A'
  1472  039D  3442               	retlw	66	;'B'
  1473  039E  3443               	retlw	67	;'C'
  1474  039F  3444               	retlw	68	;'D'
  1475  03A0  3445               	retlw	69	;'E'
  1476  03A1  3446               	retlw	70	;'F'
  1477  03A2  3400               	retlw	0
  1478  03A3                     STR_6:	
  1479  03A3  3453               	retlw	83	;'S'
  1480  03A4  3452               	retlw	82	;'R'
  1481  03A5  342C               	retlw	44	;','
  1482  03A6  3430               	retlw	48	;'0'
  1483  03A7  3430               	retlw	48	;'0'
  1484  03A8  3430               	retlw	48	;'0'
  1485  03A9  3430               	retlw	48	;'0'
  1486  03AA  3430               	retlw	48	;'0'
  1487  03AB  3430               	retlw	48	;'0'
  1488  03AC  3430               	retlw	48	;'0'
  1489  03AD  3430               	retlw	48	;'0'
  1490  03AE  3400               	retlw	0
  1491  03AF                     STR_25:	
  1492  03AF  3441               	retlw	65	;'A'
  1493  03B0  342C               	retlw	44	;','
  1494  03B1  3430               	retlw	48	;'0'
  1495  03B2  3430               	retlw	48	;'0'
  1496  03B3  3435               	retlw	53	;'5'
  1497  03B4  3430               	retlw	48	;'0'
  1498  03B5  342C               	retlw	44	;','
  1499  03B6  3430               	retlw	48	;'0'
  1500  03B7  3437               	retlw	55	;'7'
  1501  03B8  3444               	retlw	68	;'D'
  1502  03B9  3430               	retlw	48	;'0'
  1503  03BA  3400               	retlw	0
  1504  03BB                     STR_4:	
  1505  03BB  3453               	retlw	83	;'S'
  1506  03BC  3453               	retlw	83	;'S'
  1507  03BD  342C               	retlw	44	;','
  1508  03BE  3443               	retlw	67	;'C'
  1509  03BF  3430               	retlw	48	;'0'
  1510  03C0  3430               	retlw	48	;'0'
  1511  03C1  3430               	retlw	48	;'0'
  1512  03C2  3430               	retlw	48	;'0'
  1513  03C3  3430               	retlw	48	;'0'
  1514  03C4  3430               	retlw	48	;'0'
  1515  03C5  3431               	retlw	49	;'1'
  1516  03C6  3400               	retlw	0
  1517  03C7                     STR_21:	
  1518  03C7  3453               	retlw	83	;'S'
  1519  03C8  3455               	retlw	85	;'U'
  1520  03C9  3457               	retlw	87	;'W'
  1521  03CA  342C               	retlw	44	;','
  1522  03CB  3432               	retlw	50	;'2'
  1523  03CC  3441               	retlw	65	;'A'
  1524  03CD  3431               	retlw	49	;'1'
  1525  03CE  3439               	retlw	57	;'9'
  1526  03CF  342C               	retlw	44	;','
  1527  03D0  3433               	retlw	51	;'3'
  1528  03D1  3432               	retlw	50	;'2'
  1529  03D2  3400               	retlw	0
  1530  03D3                     STR_19:	
  1531  03D3  3452               	retlw	82	;'R'
  1532  03D4  3465               	retlw	101	;'e'
  1533  03D5  3462               	retlw	98	;'b'
  1534  03D6  346F               	retlw	111	;'o'
  1535  03D7  346F               	retlw	111	;'o'
  1536  03D8  3474               	retlw	116	;'t'
  1537  03D9  3400               	retlw	0
  1538  03DA                     STR_2:	
  1539  03DA  3453               	retlw	83	;'S'
  1540  03DB  3446               	retlw	70	;'F'
  1541  03DC  342C               	retlw	44	;','
  1542  03DD  3431               	retlw	49	;'1'
  1543  03DE  3400               	retlw	0
  1544  03DF                     STR_18:	
  1545  03DF  3452               	retlw	82	;'R'
  1546  03E0  342C               	retlw	44	;','
  1547  03E1  3431               	retlw	49	;'1'
  1548  03E2  3400               	retlw	0
  1549  03E3                     STR_1:	
  1550  03E3  3443               	retlw	67	;'C'
  1551  03E4  344D               	retlw	77	;'M'
  1552  03E5  3444               	retlw	68	;'D'
  1553  03E6  3400               	retlw	0
  1554  03E7                     STR_29:	
  1555  03E7  3445               	retlw	69	;'E'
  1556  03E8  344E               	retlw	78	;'N'
  1557  03E9  3444               	retlw	68	;'D'
  1558  03EA  3400               	retlw	0
  1559  03EB                     STR_3:	
  1560  03EB  3441               	retlw	65	;'A'
  1561  03EC  344F               	retlw	79	;'O'
  1562  03ED  344B               	retlw	75	;'K'
  1563  03EE  3400               	retlw	0
  1564  03EF                     STR_28:	
  1565  03EF  3425               	retlw	37	;'%'
  1566  03F0  3458               	retlw	88	;'X'
  1567  03F1  3400               	retlw	0
  1568  03F2                     STR_10:	
  1569  03F2  3450               	retlw	80	;'P'
  1570  03F3  345A               	retlw	90	;'Z'
  1571  03F4  3400               	retlw	0
  1572  03AF                     
  1573                           ; #config settings
  1574  0000                     
  1575                           	psect	nvBANK0
  1576  006D                     __pnvBANK0:	
  1577  006D                     _eusartTxBufferRemaining:	
  1578  006D                     	ds	1
  1579  000E                     _PORTCbits	set	14
  1580  0011                     _PIR1bits	set	17
  1581  000B                     _INTCONbits	set	11
  1582  009D                     _ADCON0bits	set	157
  1583  009C                     _ADRESH	set	156
  1584  009B                     _ADRESL	set	155
  1585  009F                     _ADCON2	set	159
  1586  009E                     _ADCON1	set	158
  1587  009D                     _ADCON0	set	157
  1588  0091                     _PIE1bits	set	145
  1589  0097                     _WDTCON	set	151
  1590  0099                     _OSCCON	set	153
  1591  0095                     _OPTION_REGbits	set	149
  1592  008E                     _TRISC	set	142
  1593  008D                     _TRISB	set	141
  1594  008C                     _TRISA	set	140
  1595  010E                     _LATCbits	set	270
  1596  010C                     _LATAbits	set	268
  1597  011D                     _APFCON	set	285
  1598  010E                     _LATC	set	270
  1599  010D                     _LATB	set	269
  1600  010C                     _LATA	set	268
  1601  0199                     _RCREG	set	409
  1602  019D                     _RCSTAbits	set	413
  1603  019A                     _TXREG	set	410
  1604  019C                     _SPBRGH	set	412
  1605  019B                     _SPBRGL	set	411
  1606  019E                     _TXSTA	set	414
  1607  019D                     _RCSTA	set	413
  1608  019F                     _BAUDCON	set	415
  1609  018C                     _ANSELA	set	396
  1610  018D                     _ANSELB	set	397
  1611  018E                     _ANSELC	set	398
  1612  020C                     _WPUA	set	524
  1613  020D                     _WPUB	set	525
  1614                           
  1615                           	psect	cinit
  1616  0026                     start_initialization:	
  1617  0026                     __initialization:	
  1618                           
  1619                           ; Initialize objects allocated to BANK2
  1620  0026  3092               	movlw	low __pidataBANK2
  1621  0027  0084               	movwf	4
  1622  0028  3085               	movlw	(high __pidataBANK2)| (0+128)
  1623  0029  0085               	movwf	5
  1624  002A  3020               	movlw	low __pdataBANK2
  1625  002B  0086               	movwf	6
  1626  002C  3001               	movlw	high __pdataBANK2
  1627  002D  0087               	movwf	7
  1628  002E  3040               	movlw	64
  1629  002F  3187  2777  3180   	fcall	init_ram
  1630                           
  1631                           ; Clear objects allocated to COMMON
  1632  0032  01FA               	clrf	__pbssCOMMON& (0+127)
  1633  0033  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1634                           
  1635                           ; Clear objects allocated to BANK0
  1636  0034  01EA               	clrf	__pbssBANK0& (0+127)
  1637  0035  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  1638  0036  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  1639                           
  1640                           ; Clear objects allocated to BANK1
  1641  0037  0021               	movlb	1	; select bank1
  1642  0038  01E8               	clrf	__pbssBANK1& (0+127)
  1643  0039  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  1644                           
  1645                           ; Clear objects allocated to BANK2
  1646  003A  3060               	movlw	low __pbssBANK2
  1647  003B  0084               	movwf	4
  1648  003C  3001               	movlw	high __pbssBANK2
  1649  003D  0085               	movwf	5
  1650  003E  3010               	movlw	16
  1651  003F  3187  277D         	fcall	clear_ram0
  1652  0041                     end_of_initialization:	
  1653                           ;End of C runtime variable initialization code
  1654                           
  1655  0041                     __end_of__initialization:	
  1656  0041  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1657  0042  0020               	movlb	0
  1658  0043  3180  2845         	ljmp	_main	;jump to C main() function
  1659                           
  1660                           	psect	bssCOMMON
  1661  007A                     __pbssCOMMON:	
  1662  007A                     _eusartTxTail:	
  1663  007A                     	ds	1
  1664  007B                     _eusartTxHead:	
  1665  007B                     	ds	1
  1666                           
  1667                           	psect	bssBANK0
  1668  006A                     __pbssBANK0:	
  1669  006A                     _eusartRxCount:	
  1670  006A                     	ds	1
  1671  006B                     _eusartRxTail:	
  1672  006B                     	ds	1
  1673  006C                     _eusartRxHead:	
  1674  006C                     	ds	1
  1675                           
  1676                           	psect	bssBANK1
  1677  00E8                     __pbssBANK1:	
  1678  00E8                     _adcResult:	
  1679  00E8                     	ds	2
  1680                           
  1681                           	psect	bssBANK2
  1682  0160                     __pbssBANK2:	
  1683  0160                     _eusartRxBuffer:	
  1684  0160                     	ds	8
  1685  0168                     _eusartTxBuffer:	
  1686  0168                     	ds	8
  1687                           
  1688                           	psect	dataBANK2
  1689  0120                     __pdataBANK2:	
  1690  0120                     main@F4456:	
  1691  0120                     	ds	64
  1692                           
  1693                           	psect	inittext
  1694  0777                     init_ram:	
  1695  0777  00FE               	movwf	126
  1696  0778                     initloop:	
  1697  0778  0012               	moviw fsr0++
  1698  0779  001E               	movwi fsr1++
  1699  077A  0BFE               	decfsz	126,f
  1700  077B  2F78               	goto	initloop
  1701  077C  3400               	retlw	0
  1702                           
  1703                           	psect	clrtext
  1704  077D                     clear_ram0:	
  1705                           ;	Called with FSR0 containing the base address, and
  1706                           ;	WREG with the size to clear
  1707                           
  1708  077D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1709  077E                     clrloop0:	
  1710  077E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1711  077F  3101               	addfsr 0,1
  1712  0780  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1713  0781  2F7E               	goto	clrloop0	;have we reached the end yet?
  1714  0782  3400               	retlw	0	;all done for this memory range, return
  1715                           
  1716                           	psect	cstackBANK1
  1717  00A0                     __pcstackBANK1:	
  1718  00A0                     main@command:	
  1719                           
  1720                           ; 64 bytes @ 0x0
  1721  00A0                     	ds	64
  1722  00E0                     main@result:	
  1723                           
  1724                           ; 4 bytes @ 0x40
  1725  00E0                     	ds	4
  1726  00E4                     main@c:	
  1727                           
  1728                           ; 2 bytes @ 0x44
  1729  00E4                     	ds	2
  1730  00E6                     main@err:	
  1731                           
  1732                           ; 2 bytes @ 0x46
  1733  00E6                     	ds	2
  1734                           
  1735                           	psect	cstackCOMMON
  1736  0070                     __pcstackCOMMON:	
  1737  0070                     ?_OSCILLATOR_Initialize:	
  1738  0070                     ?_WDT_Initialize:	
  1739                           ; 1 bytes @ 0x0
  1740                           
  1741  0070                     ?_ADC_Initialize:	
  1742                           ; 1 bytes @ 0x0
  1743                           
  1744  0070                     ?_EUSART_Initialize:	
  1745                           ; 1 bytes @ 0x0
  1746                           
  1747  0070                     ?_PIN_MANAGER_Initialize:	
  1748                           ; 1 bytes @ 0x0
  1749                           
  1750  0070                     ?_SYSTEM_Initialize:	
  1751                           ; 1 bytes @ 0x0
  1752                           
  1753  0070                     ?_EUSART_Read:	
  1754                           ; 1 bytes @ 0x0
  1755                           
  1756  0070                     ?_EUSART_Write:	
  1757                           ; 1 bytes @ 0x0
  1758                           
  1759  0070                     ?_EUSART_Transmit_ISR:	
  1760                           ; 1 bytes @ 0x0
  1761                           
  1762  0070                     ??_EUSART_Transmit_ISR:	
  1763                           ; 1 bytes @ 0x0
  1764                           
  1765  0070                     ?_EUSART_Receive_ISR:	
  1766                           ; 1 bytes @ 0x0
  1767                           
  1768  0070                     ??_EUSART_Receive_ISR:	
  1769                           ; 1 bytes @ 0x0
  1770                           
  1771  0070                     ?_INTERRUPT_InterruptManager:	
  1772                           ; 1 bytes @ 0x0
  1773                           
  1774  0070                     ?_read_line:	
  1775                           ; 1 bytes @ 0x0
  1776                           
  1777  0070                     ?_main:	
  1778                           ; 1 bytes @ 0x0
  1779                           
  1780  0070                     ?_set_low_leds:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783                           
  1784                           ; 2 bytes @ 0x0
  1785  0070                     	ds	1
  1786  0071                     ??_INTERRUPT_InterruptManager:	
  1787                           
  1788                           ; 1 bytes @ 0x1
  1789  0071                     	ds	1
  1790  0072                     ??_OSCILLATOR_Initialize:	
  1791  0072                     ??_WDT_Initialize:	
  1792                           ; 1 bytes @ 0x2
  1793                           
  1794  0072                     ??_ADC_Initialize:	
  1795                           ; 1 bytes @ 0x2
  1796                           
  1797  0072                     ??_EUSART_Initialize:	
  1798                           ; 1 bytes @ 0x2
  1799                           
  1800  0072                     ?_strcat:	
  1801                           ; 1 bytes @ 0x2
  1802                           
  1803  0072                     ??_PIN_MANAGER_Initialize:	
  1804                           ; 1 bytes @ 0x2
  1805                           
  1806  0072                     ??_EUSART_Read:	
  1807                           ; 1 bytes @ 0x2
  1808                           
  1809  0072                     ??_EUSART_Write:	
  1810                           ; 1 bytes @ 0x2
  1811                           
  1812  0072                     ??_set_low_leds:	
  1813                           ; 1 bytes @ 0x2
  1814                           
  1815  0072                     ?_ADC_GetConversion:	
  1816                           ; 1 bytes @ 0x2
  1817                           
  1818  0072                     ?_blink_leds:	
  1819                           ; 2 bytes @ 0x2
  1820                           
  1821  0072                     ?___awmod:	
  1822                           ; 2 bytes @ 0x2
  1823                           
  1824  0072                     ?___lwdiv:	
  1825                           ; 2 bytes @ 0x2
  1826                           
  1827  0072                     strcat@from:	
  1828                           ; 2 bytes @ 0x2
  1829                           
  1830  0072                     blink_leds@n:	
  1831                           ; 1 bytes @ 0x2
  1832                           
  1833  0072                     ___awmod@divisor:	
  1834                           ; 2 bytes @ 0x2
  1835                           
  1836  0072                     ___lwdiv@divisor:	
  1837                           ; 2 bytes @ 0x2
  1838                           
  1839                           
  1840                           ; 2 bytes @ 0x2
  1841  0072                     	ds	1
  1842  0073                     ??_strcat:	
  1843  0073                     ??_SYSTEM_Initialize:	
  1844                           ; 1 bytes @ 0x3
  1845                           
  1846  0073                     EUSART_Read@readValue:	
  1847                           ; 1 bytes @ 0x3
  1848                           
  1849  0073                     EUSART_Write@txData:	
  1850                           ; 1 bytes @ 0x3
  1851                           
  1852                           
  1853                           ; 1 bytes @ 0x3
  1854  0073                     	ds	1
  1855  0074                     ??_ADC_GetConversion:	
  1856  0074                     ??_read_line:	
  1857                           ; 1 bytes @ 0x4
  1858                           
  1859  0074                     strcat@to:	
  1860                           ; 1 bytes @ 0x4
  1861                           
  1862  0074                     blink_leds@c:	
  1863                           ; 1 bytes @ 0x4
  1864                           
  1865  0074                     ___awmod@dividend:	
  1866                           ; 2 bytes @ 0x4
  1867                           
  1868  0074                     ___lwdiv@dividend:	
  1869                           ; 2 bytes @ 0x4
  1870                           
  1871                           
  1872                           ; 2 bytes @ 0x4
  1873  0074                     	ds	1
  1874  0075                     ?_strcmp:	
  1875  0075                     ADC_GetConversion@channel:	
  1876                           ; 2 bytes @ 0x5
  1877                           
  1878  0075                     strcat@cp:	
  1879                           ; 1 bytes @ 0x5
  1880                           
  1881  0075                     strcmp@s2:	
  1882                           ; 1 bytes @ 0x5
  1883                           
  1884                           
  1885                           ; 2 bytes @ 0x5
  1886  0075                     	ds	1
  1887  0076                     ??_blink_leds:	
  1888  0076                     ??___awmod:	
  1889                           ; 1 bytes @ 0x6
  1890                           
  1891  0076                     ??___lwdiv:	
  1892                           ; 1 bytes @ 0x6
  1893                           
  1894  0076                     ?_write_line:	
  1895                           ; 1 bytes @ 0x6
  1896                           
  1897  0076                     write_line@line:	
  1898                           ; 2 bytes @ 0x6
  1899                           
  1900                           
  1901                           ; 2 bytes @ 0x6
  1902  0076                     	ds	1
  1903  0077                     ??_strcmp:	
  1904  0077                     ___awmod@counter:	
  1905                           ; 1 bytes @ 0x7
  1906                           
  1907  0077                     ___lwdiv@quotient:	
  1908                           ; 1 bytes @ 0x7
  1909                           
  1910                           
  1911                           ; 2 bytes @ 0x7
  1912  0077                     	ds	1
  1913  0078                     ??_write_line:	
  1914  0078                     ___awmod@sign:	
  1915                           ; 1 bytes @ 0x8
  1916                           
  1917  0078                     strcmp@r:	
  1918                           ; 1 bytes @ 0x8
  1919                           
  1920  0078                     blink_leds@i:	
  1921                           ; 1 bytes @ 0x8
  1922                           
  1923                           
  1924                           ; 2 bytes @ 0x8
  1925  0078                     	ds	1
  1926  0079                     ___lwdiv@counter:	
  1927  0079                     strcmp@s1:	
  1928                           ; 1 bytes @ 0x9
  1929                           
  1930                           
  1931                           ; 1 bytes @ 0x9
  1932  0079                     	ds	1
  1933                           
  1934                           	psect	cstackBANK0
  1935  0020                     __pcstackBANK0:	
  1936  0020                     ?_sprintf:	
  1937  0020                     write_line@i:	
  1938                           ; 2 bytes @ 0x0
  1939                           
  1940  0020                     sprintf@f:	
  1941                           ; 2 bytes @ 0x0
  1942                           
  1943  0020                     read_line@c:	
  1944                           ; 2 bytes @ 0x0
  1945                           
  1946                           
  1947                           ; 64 bytes @ 0x0
  1948  0020                     	ds	4
  1949  0024                     ??_sprintf:	
  1950                           
  1951                           ; 1 bytes @ 0x4
  1952  0024                     	ds	4
  1953  0028                     sprintf@flag:	
  1954                           
  1955                           ; 1 bytes @ 0x8
  1956  0028                     	ds	1
  1957  0029                     sprintf@idx:	
  1958                           
  1959                           ; 1 bytes @ 0x9
  1960  0029                     	ds	1
  1961  002A                     sprintf@ap:	
  1962                           
  1963                           ; 1 bytes @ 0xA
  1964  002A                     	ds	1
  1965  002B                     sprintf@val:	
  1966                           
  1967                           ; 2 bytes @ 0xB
  1968  002B                     	ds	2
  1969  002D                     sprintf@prec:	
  1970                           
  1971                           ; 1 bytes @ 0xD
  1972  002D                     	ds	1
  1973  002E                     sprintf@sp:	
  1974                           
  1975                           ; 1 bytes @ 0xE
  1976  002E                     	ds	1
  1977  002F                     sprintf@c:	
  1978                           
  1979                           ; 1 bytes @ 0xF
  1980  002F                     	ds	49
  1981  0060                     read_line@i:	
  1982                           
  1983                           ; 2 bytes @ 0x40
  1984  0060                     	ds	2
  1985  0062                     ?_write_and_wait:	
  1986  0062                     write_and_wait@cmd:	
  1987                           ; 2 bytes @ 0x42
  1988                           
  1989                           
  1990                           ; 2 bytes @ 0x42
  1991  0062                     	ds	2
  1992  0064                     write_and_wait@res:	
  1993                           
  1994                           ; 2 bytes @ 0x44
  1995  0064                     	ds	2
  1996  0066                     ??_write_and_wait:	
  1997                           
  1998                           ; 1 bytes @ 0x46
  1999  0066                     	ds	1
  2000  0067                     write_and_wait@line:	
  2001                           
  2002                           ; 1 bytes @ 0x47
  2003  0067                     	ds	1
  2004  0068                     ??_main:	
  2005                           
  2006                           ; 1 bytes @ 0x48
  2007  0068                     	ds	2
  2008                           
  2009                           	psect	maintext
  2010  0045                     __pmaintext:	
  2011 ;;
  2012 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2013 ;;
  2014 ;; *************** function _main *****************
  2015 ;; Defined at:
  2016 ;;		line 175 in file "main.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  command        64    0[BANK1 ] unsigned char [64]
  2021 ;;  result          4   64[BANK1 ] unsigned char [4]
  2022 ;;  err             2   70[BANK1 ] int 
  2023 ;;  c               2   68[BANK1 ] int 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : B1F/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2033 ;;      Params:         0       0       0       0
  2034 ;;      Locals:         0       0      72       0
  2035 ;;      Temps:          0       2       0       0
  2036 ;;      Totals:         0       2      72       0
  2037 ;;Total ram usage:       74 bytes
  2038 ;; Hardware stack levels required when called:    5
  2039 ;; This function calls:
  2040 ;;		_ADC_GetConversion
  2041 ;;		_SYSTEM_Initialize
  2042 ;;		___awmod
  2043 ;;		_blink_leds
  2044 ;;		_read_line
  2045 ;;		_sprintf
  2046 ;;		_strcat
  2047 ;;		_strcmp
  2048 ;;		_write_and_wait
  2049 ;;		_write_line
  2050 ;; This function is called by:
  2051 ;;		Startup code after reset
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           
  2056                           ;psect for function _main
  2057  0045                     _main:	
  2058                           
  2059                           ;main.c: 178: SYSTEM_Initialize();
  2060                           
  2061                           ;incstack = 0
  2062                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2063  0045  3187  2760  3180   	fcall	_SYSTEM_Initialize
  2064                           
  2065                           ;main.c: 179: (INTCONbits.GIE = 1);
  2066  0048  178B               	bsf	11,7	;volatile
  2067                           
  2068                           ;main.c: 180: (INTCONbits.PEIE = 1);
  2069  0049  170B               	bsf	11,6	;volatile
  2070                           
  2071                           ;main.c: 182: do { LATAbits.LATA4 = 1; } while(0);
  2072  004A  0022               	movlb	2	; select bank2
  2073  004B  160C               	bsf	12,4	;volatile
  2074                           
  2075                           ;main.c: 184: int err = 0;
  2076  004C  0021               	movlb	1	; select bank1
  2077  004D  01E6               	clrf	main@err^(0+128)
  2078  004E  01E7               	clrf	(main@err+1)^(0+128)
  2079                           
  2080                           ;main.c: 187: err = strcmp(read_line(), "CMD");
  2081  004F  30E3               	movlw	low (STR_1| (0+32768))
  2082  0050  00F5               	movwf	strcmp@s2
  2083  0051  3083               	movlw	high (STR_1| (0+32768))
  2084  0052  00F6               	movwf	strcmp@s2+1
  2085  0053  3185  2500  3180   	fcall	_read_line
  2086  0056  3186  2606  3180   	fcall	_strcmp
  2087  0059  0876               	movf	?_strcmp+1,w
  2088  005A  0021               	movlb	1	; select bank1
  2089  005B  00E7               	movwf	(main@err+1)^(0+128)
  2090  005C  0875               	movf	?_strcmp,w
  2091  005D  00E6               	movwf	main@err^(0+128)
  2092                           
  2093                           ;main.c: 188: if (err) blink_leds(1, 1);
  2094  005E  0866               	movf	main@err^(0+128),w
  2095  005F  0467               	iorwf	(main@err+1)^(0+128),w
  2096  0060  1903               	btfsc	3,2
  2097  0061  286D               	goto	l1869
  2098  0062  3001               	movlw	1
  2099  0063  00F2               	movwf	blink_leds@n
  2100  0064  3000               	movlw	0
  2101  0065  00F3               	movwf	blink_leds@n+1
  2102  0066  3001               	movlw	1
  2103  0067  00F4               	movwf	blink_leds@c
  2104  0068  3000               	movlw	0
  2105  0069  00F5               	movwf	blink_leds@c+1
  2106  006A  3184  24A8  3180   	fcall	_blink_leds
  2107  006D                     l1869:	
  2108                           
  2109                           ;main.c: 191: err = write_and_wait("SF,1", "AOK");
  2110  006D  30DA               	movlw	low (STR_2| (0+32768))
  2111  006E  0020               	movlb	0	; select bank0
  2112  006F  00E2               	movwf	write_and_wait@cmd
  2113  0070  3083               	movlw	high (STR_2| (0+32768))
  2114  0071  00E3               	movwf	write_and_wait@cmd+1
  2115  0072  30EB               	movlw	low (STR_3| (0+32768))
  2116  0073  00E4               	movwf	write_and_wait@res
  2117  0074  3083               	movlw	high (STR_3| (0+32768))
  2118  0075  00E5               	movwf	write_and_wait@res+1
  2119  0076  3186  26D9  3180   	fcall	_write_and_wait
  2120  0079  0020               	movlb	0	; select bank0
  2121  007A  0863               	movf	?_write_and_wait+1,w
  2122  007B  0021               	movlb	1	; select bank1
  2123  007C  00E7               	movwf	(main@err+1)^(0+128)
  2124  007D  0020               	movlb	0	; select bank0
  2125  007E  0862               	movf	?_write_and_wait,w
  2126  007F  0021               	movlb	1	; select bank1
  2127  0080  00E6               	movwf	main@err^(0+128)
  2128                           
  2129                           ;main.c: 192: if (err) blink_leds(1, 2);
  2130  0081  0866               	movf	main@err^(0+128),w
  2131  0082  0467               	iorwf	(main@err+1)^(0+128),w
  2132  0083  1903               	btfsc	3,2
  2133  0084  2890               	goto	l1875
  2134  0085  3001               	movlw	1
  2135  0086  00F2               	movwf	blink_leds@n
  2136  0087  3000               	movlw	0
  2137  0088  00F3               	movwf	blink_leds@n+1
  2138  0089  3002               	movlw	2
  2139  008A  00F4               	movwf	blink_leds@c
  2140  008B  3000               	movlw	0
  2141  008C  00F5               	movwf	blink_leds@c+1
  2142  008D  3184  24A8  3180   	fcall	_blink_leds
  2143  0090                     l1875:	
  2144                           
  2145                           ;main.c: 196: err = write_and_wait("SS,C0000001", "AOK");
  2146  0090  30BB               	movlw	low (STR_4| (0+32768))
  2147  0091  0020               	movlb	0	; select bank0
  2148  0092  00E2               	movwf	write_and_wait@cmd
  2149  0093  3083               	movlw	high (STR_4| (0+32768))
  2150  0094  00E3               	movwf	write_and_wait@cmd+1
  2151  0095  30EB               	movlw	low (STR_3| (0+32768))
  2152  0096  00E4               	movwf	write_and_wait@res
  2153  0097  3083               	movlw	high (STR_3| (0+32768))
  2154  0098  00E5               	movwf	write_and_wait@res+1
  2155  0099  3186  26D9  3180   	fcall	_write_and_wait
  2156  009C  0020               	movlb	0	; select bank0
  2157  009D  0863               	movf	?_write_and_wait+1,w
  2158  009E  0021               	movlb	1	; select bank1
  2159  009F  00E7               	movwf	(main@err+1)^(0+128)
  2160  00A0  0020               	movlb	0	; select bank0
  2161  00A1  0862               	movf	?_write_and_wait,w
  2162  00A2  0021               	movlb	1	; select bank1
  2163  00A3  00E6               	movwf	main@err^(0+128)
  2164                           
  2165                           ;main.c: 197: if (err) blink_leds(1, 4);
  2166  00A4  0866               	movf	main@err^(0+128),w
  2167  00A5  0467               	iorwf	(main@err+1)^(0+128),w
  2168  00A6  1903               	btfsc	3,2
  2169  00A7  28B3               	goto	l1881
  2170  00A8  3001               	movlw	1
  2171  00A9  00F2               	movwf	blink_leds@n
  2172  00AA  3000               	movlw	0
  2173  00AB  00F3               	movwf	blink_leds@n+1
  2174  00AC  3004               	movlw	4
  2175  00AD  00F4               	movwf	blink_leds@c
  2176  00AE  3000               	movlw	0
  2177  00AF  00F5               	movwf	blink_leds@c+1
  2178  00B0  3184  24A8  3180   	fcall	_blink_leds
  2179  00B3                     l1881:	
  2180                           
  2181                           ;main.c: 200: err = write_and_wait("SR,00000000", "AOK");
  2182  00B3  30A3               	movlw	low (STR_6| (0+32768))
  2183  00B4  0020               	movlb	0	; select bank0
  2184  00B5  00E2               	movwf	write_and_wait@cmd
  2185  00B6  3083               	movlw	high (STR_6| (0+32768))
  2186  00B7  00E3               	movwf	write_and_wait@cmd+1
  2187  00B8  30EB               	movlw	low (STR_3| (0+32768))
  2188  00B9  00E4               	movwf	write_and_wait@res
  2189  00BA  3083               	movlw	high (STR_3| (0+32768))
  2190  00BB  00E5               	movwf	write_and_wait@res+1
  2191  00BC  3186  26D9  3180   	fcall	_write_and_wait
  2192  00BF  0020               	movlb	0	; select bank0
  2193  00C0  0863               	movf	?_write_and_wait+1,w
  2194  00C1  0021               	movlb	1	; select bank1
  2195  00C2  00E7               	movwf	(main@err+1)^(0+128)
  2196  00C3  0020               	movlb	0	; select bank0
  2197  00C4  0862               	movf	?_write_and_wait,w
  2198  00C5  0021               	movlb	1	; select bank1
  2199  00C6  00E6               	movwf	main@err^(0+128)
  2200                           
  2201                           ;main.c: 201: if (err) blink_leds(2, 1);
  2202  00C7  0866               	movf	main@err^(0+128),w
  2203  00C8  0467               	iorwf	(main@err+1)^(0+128),w
  2204  00C9  1903               	btfsc	3,2
  2205  00CA  28D6               	goto	l1887
  2206  00CB  3002               	movlw	2
  2207  00CC  00F2               	movwf	blink_leds@n
  2208  00CD  3000               	movlw	0
  2209  00CE  00F3               	movwf	blink_leds@n+1
  2210  00CF  3001               	movlw	1
  2211  00D0  00F4               	movwf	blink_leds@c
  2212  00D1  3000               	movlw	0
  2213  00D2  00F5               	movwf	blink_leds@c+1
  2214  00D3  3184  24A8  3180   	fcall	_blink_leds
  2215  00D6                     l1887:	
  2216                           
  2217                           ;main.c: 204: err = write_and_wait("S-,PIC16-BLE2-001", "AOK");
  2218  00D6  3080               	movlw	low (STR_8| (0+32768))
  2219  00D7  0020               	movlb	0	; select bank0
  2220  00D8  00E2               	movwf	write_and_wait@cmd
  2221  00D9  3083               	movlw	high (STR_8| (0+32768))
  2222  00DA  00E3               	movwf	write_and_wait@cmd+1
  2223  00DB  30EB               	movlw	low (STR_3| (0+32768))
  2224  00DC  00E4               	movwf	write_and_wait@res
  2225  00DD  3083               	movlw	high (STR_3| (0+32768))
  2226  00DE  00E5               	movwf	write_and_wait@res+1
  2227  00DF  3186  26D9  3180   	fcall	_write_and_wait
  2228  00E2  0020               	movlb	0	; select bank0
  2229  00E3  0863               	movf	?_write_and_wait+1,w
  2230  00E4  0021               	movlb	1	; select bank1
  2231  00E5  00E7               	movwf	(main@err+1)^(0+128)
  2232  00E6  0020               	movlb	0	; select bank0
  2233  00E7  0862               	movf	?_write_and_wait,w
  2234  00E8  0021               	movlb	1	; select bank1
  2235  00E9  00E6               	movwf	main@err^(0+128)
  2236                           
  2237                           ;main.c: 205: if (err) blink_leds(2, 2);
  2238  00EA  0866               	movf	main@err^(0+128),w
  2239  00EB  0467               	iorwf	(main@err+1)^(0+128),w
  2240  00EC  1903               	btfsc	3,2
  2241  00ED  28F9               	goto	l1893
  2242  00EE  3002               	movlw	2
  2243  00EF  00F2               	movwf	blink_leds@n
  2244  00F0  3000               	movlw	0
  2245  00F1  00F3               	movwf	blink_leds@n+1
  2246  00F2  3002               	movlw	2
  2247  00F3  00F4               	movwf	blink_leds@c
  2248  00F4  3000               	movlw	0
  2249  00F5  00F5               	movwf	blink_leds@c+1
  2250  00F6  3184  24A8  3180   	fcall	_blink_leds
  2251  00F9                     l1893:	
  2252                           
  2253                           ;main.c: 208: err = write_and_wait("PZ", "AOK");
  2254  00F9  30F2               	movlw	low (STR_10| (0+32768))
  2255  00FA  0020               	movlb	0	; select bank0
  2256  00FB  00E2               	movwf	write_and_wait@cmd
  2257  00FC  3083               	movlw	high (STR_10| (0+32768))
  2258  00FD  00E3               	movwf	write_and_wait@cmd+1
  2259  00FE  30EB               	movlw	low (STR_3| (0+32768))
  2260  00FF  00E4               	movwf	write_and_wait@res
  2261  0100  3083               	movlw	high (STR_3| (0+32768))
  2262  0101  00E5               	movwf	write_and_wait@res+1
  2263  0102  3186  26D9  3180   	fcall	_write_and_wait
  2264  0105  0020               	movlb	0	; select bank0
  2265  0106  0863               	movf	?_write_and_wait+1,w
  2266  0107  0021               	movlb	1	; select bank1
  2267  0108  00E7               	movwf	(main@err+1)^(0+128)
  2268  0109  0020               	movlb	0	; select bank0
  2269  010A  0862               	movf	?_write_and_wait,w
  2270  010B  0021               	movlb	1	; select bank1
  2271  010C  00E6               	movwf	main@err^(0+128)
  2272                           
  2273                           ;main.c: 209: if (err) blink_leds(2, 6);
  2274  010D  0866               	movf	main@err^(0+128),w
  2275  010E  0467               	iorwf	(main@err+1)^(0+128),w
  2276  010F  1903               	btfsc	3,2
  2277  0110  291C               	goto	l1899
  2278  0111  3002               	movlw	2
  2279  0112  00F2               	movwf	blink_leds@n
  2280  0113  3000               	movlw	0
  2281  0114  00F3               	movwf	blink_leds@n+1
  2282  0115  3006               	movlw	6
  2283  0116  00F4               	movwf	blink_leds@c
  2284  0117  3000               	movlw	0
  2285  0118  00F5               	movwf	blink_leds@c+1
  2286  0119  3184  24A8  3180   	fcall	_blink_leds
  2287  011C                     l1899:	
  2288                           
  2289                           ;main.c: 212: err = write_and_wait("PS,11223344556677889900AABBCCDDEEFF", "AOK");
  2290  011C  305C               	movlw	low (STR_12| (0+32768))
  2291  011D  0020               	movlb	0	; select bank0
  2292  011E  00E2               	movwf	write_and_wait@cmd
  2293  011F  3083               	movlw	high (STR_12| (0+32768))
  2294  0120  00E3               	movwf	write_and_wait@cmd+1
  2295  0121  30EB               	movlw	low (STR_3| (0+32768))
  2296  0122  00E4               	movwf	write_and_wait@res
  2297  0123  3083               	movlw	high (STR_3| (0+32768))
  2298  0124  00E5               	movwf	write_and_wait@res+1
  2299  0125  3186  26D9  3180   	fcall	_write_and_wait
  2300  0128  0020               	movlb	0	; select bank0
  2301  0129  0863               	movf	?_write_and_wait+1,w
  2302  012A  0021               	movlb	1	; select bank1
  2303  012B  00E7               	movwf	(main@err+1)^(0+128)
  2304  012C  0020               	movlb	0	; select bank0
  2305  012D  0862               	movf	?_write_and_wait,w
  2306  012E  0021               	movlb	1	; select bank1
  2307  012F  00E6               	movwf	main@err^(0+128)
  2308                           
  2309                           ;main.c: 213: if (err) blink_leds(2, 7);
  2310  0130  0866               	movf	main@err^(0+128),w
  2311  0131  0467               	iorwf	(main@err+1)^(0+128),w
  2312  0132  1903               	btfsc	3,2
  2313  0133  293F               	goto	l1905
  2314  0134  3002               	movlw	2
  2315  0135  00F2               	movwf	blink_leds@n
  2316  0136  3000               	movlw	0
  2317  0137  00F3               	movwf	blink_leds@n+1
  2318  0138  3007               	movlw	7
  2319  0139  00F4               	movwf	blink_leds@c
  2320  013A  3000               	movlw	0
  2321  013B  00F5               	movwf	blink_leds@c+1
  2322  013C  3184  24A8  3180   	fcall	_blink_leds
  2323  013F                     l1905:	
  2324                           
  2325                           ;main.c: 216: err = write_and_wait("PC,010203040506070809000A0B0C0D0E0F,12,02", "AOK");
  2326  013F  3008               	movlw	low (STR_14| (0+32768))
  2327  0140  0020               	movlb	0	; select bank0
  2328  0141  00E2               	movwf	write_and_wait@cmd
  2329  0142  3083               	movlw	high (STR_14| (0+32768))
  2330  0143  00E3               	movwf	write_and_wait@cmd+1
  2331  0144  30EB               	movlw	low (STR_3| (0+32768))
  2332  0145  00E4               	movwf	write_and_wait@res
  2333  0146  3083               	movlw	high (STR_3| (0+32768))
  2334  0147  00E5               	movwf	write_and_wait@res+1
  2335  0148  3186  26D9  3180   	fcall	_write_and_wait
  2336  014B  0020               	movlb	0	; select bank0
  2337  014C  0863               	movf	?_write_and_wait+1,w
  2338  014D  0021               	movlb	1	; select bank1
  2339  014E  00E7               	movwf	(main@err+1)^(0+128)
  2340  014F  0020               	movlb	0	; select bank0
  2341  0150  0862               	movf	?_write_and_wait,w
  2342  0151  0021               	movlb	1	; select bank1
  2343  0152  00E6               	movwf	main@err^(0+128)
  2344                           
  2345                           ;main.c: 217: if (err) blink_leds(2, 8);
  2346  0153  0866               	movf	main@err^(0+128),w
  2347  0154  0467               	iorwf	(main@err+1)^(0+128),w
  2348  0155  1903               	btfsc	3,2
  2349  0156  2962               	goto	l1911
  2350  0157  3002               	movlw	2
  2351  0158  00F2               	movwf	blink_leds@n
  2352  0159  3000               	movlw	0
  2353  015A  00F3               	movwf	blink_leds@n+1
  2354  015B  3008               	movlw	8
  2355  015C  00F4               	movwf	blink_leds@c
  2356  015D  3000               	movlw	0
  2357  015E  00F5               	movwf	blink_leds@c+1
  2358  015F  3184  24A8  3180   	fcall	_blink_leds
  2359  0162                     l1911:	
  2360                           
  2361                           ;main.c: 220: err = write_and_wait("PC,FF0203040506070809000A0B0C0D0E0F,1A,03", "AOK");
  2362  0162  3032               	movlw	low (STR_16| (0+32768))
  2363  0163  0020               	movlb	0	; select bank0
  2364  0164  00E2               	movwf	write_and_wait@cmd
  2365  0165  3083               	movlw	high (STR_16| (0+32768))
  2366  0166  00E3               	movwf	write_and_wait@cmd+1
  2367  0167  30EB               	movlw	low (STR_3| (0+32768))
  2368  0168  00E4               	movwf	write_and_wait@res
  2369  0169  3083               	movlw	high (STR_3| (0+32768))
  2370  016A  00E5               	movwf	write_and_wait@res+1
  2371  016B  3186  26D9  3180   	fcall	_write_and_wait
  2372  016E  0020               	movlb	0	; select bank0
  2373  016F  0863               	movf	?_write_and_wait+1,w
  2374  0170  0021               	movlb	1	; select bank1
  2375  0171  00E7               	movwf	(main@err+1)^(0+128)
  2376  0172  0020               	movlb	0	; select bank0
  2377  0173  0862               	movf	?_write_and_wait,w
  2378  0174  0021               	movlb	1	; select bank1
  2379  0175  00E6               	movwf	main@err^(0+128)
  2380                           
  2381                           ;main.c: 221: if (err) blink_leds(2, 9);
  2382  0176  0866               	movf	main@err^(0+128),w
  2383  0177  0467               	iorwf	(main@err+1)^(0+128),w
  2384  0178  1903               	btfsc	3,2
  2385  0179  2985               	goto	l1917
  2386  017A  3002               	movlw	2
  2387  017B  00F2               	movwf	blink_leds@n
  2388  017C  3000               	movlw	0
  2389  017D  00F3               	movwf	blink_leds@n+1
  2390  017E  3009               	movlw	9
  2391  017F  00F4               	movwf	blink_leds@c
  2392  0180  3000               	movlw	0
  2393  0181  00F5               	movwf	blink_leds@c+1
  2394  0182  3184  24A8  3180   	fcall	_blink_leds
  2395  0185                     l1917:	
  2396                           
  2397                           ;main.c: 224: err = write_and_wait("R,1", "Reboot");
  2398  0185  30DF               	movlw	low (STR_18| (0+32768))
  2399  0186  0020               	movlb	0	; select bank0
  2400  0187  00E2               	movwf	write_and_wait@cmd
  2401  0188  3083               	movlw	high (STR_18| (0+32768))
  2402  0189  00E3               	movwf	write_and_wait@cmd+1
  2403  018A  30D3               	movlw	low (STR_19| (0+32768))
  2404  018B  00E4               	movwf	write_and_wait@res
  2405  018C  3083               	movlw	high (STR_19| (0+32768))
  2406  018D  00E5               	movwf	write_and_wait@res+1
  2407  018E  3186  26D9  3180   	fcall	_write_and_wait
  2408  0191  0020               	movlb	0	; select bank0
  2409  0192  0863               	movf	?_write_and_wait+1,w
  2410  0193  0021               	movlb	1	; select bank1
  2411  0194  00E7               	movwf	(main@err+1)^(0+128)
  2412  0195  0020               	movlb	0	; select bank0
  2413  0196  0862               	movf	?_write_and_wait,w
  2414  0197  0021               	movlb	1	; select bank1
  2415  0198  00E6               	movwf	main@err^(0+128)
  2416                           
  2417                           ;main.c: 225: if (err) blink_leds(2, 3);
  2418  0199  0866               	movf	main@err^(0+128),w
  2419  019A  0467               	iorwf	(main@err+1)^(0+128),w
  2420  019B  1903               	btfsc	3,2
  2421  019C  29A8               	goto	l1923
  2422  019D  3002               	movlw	2
  2423  019E  00F2               	movwf	blink_leds@n
  2424  019F  3000               	movlw	0
  2425  01A0  00F3               	movwf	blink_leds@n+1
  2426  01A1  3003               	movlw	3
  2427  01A2  00F4               	movwf	blink_leds@c
  2428  01A3  3000               	movlw	0
  2429  01A4  00F5               	movwf	blink_leds@c+1
  2430  01A5  3184  24A8  3180   	fcall	_blink_leds
  2431  01A8                     l1923:	
  2432                           
  2433                           ;main.c: 228: err = strcmp(read_line(), "CMD");
  2434  01A8  30E3               	movlw	low (STR_1| (0+32768))
  2435  01A9  00F5               	movwf	strcmp@s2
  2436  01AA  3083               	movlw	high (STR_1| (0+32768))
  2437  01AB  00F6               	movwf	strcmp@s2+1
  2438  01AC  3185  2500  3180   	fcall	_read_line
  2439  01AF  3186  2606  3180   	fcall	_strcmp
  2440  01B2  0876               	movf	?_strcmp+1,w
  2441  01B3  0021               	movlb	1	; select bank1
  2442  01B4  00E7               	movwf	(main@err+1)^(0+128)
  2443  01B5  0875               	movf	?_strcmp,w
  2444  01B6  00E6               	movwf	main@err^(0+128)
  2445                           
  2446                           ;main.c: 229: if (err) blink_leds(2, 4);
  2447  01B7  0866               	movf	main@err^(0+128),w
  2448  01B8  0467               	iorwf	(main@err+1)^(0+128),w
  2449  01B9  1903               	btfsc	3,2
  2450  01BA  29C6               	goto	l1929
  2451  01BB  3002               	movlw	2
  2452  01BC  00F2               	movwf	blink_leds@n
  2453  01BD  3000               	movlw	0
  2454  01BE  00F3               	movwf	blink_leds@n+1
  2455  01BF  3004               	movlw	4
  2456  01C0  00F4               	movwf	blink_leds@c
  2457  01C1  3000               	movlw	0
  2458  01C2  00F5               	movwf	blink_leds@c+1
  2459  01C3  3184  24A8  3180   	fcall	_blink_leds
  2460  01C6                     l1929:	
  2461                           
  2462                           ;main.c: 232: err = write_and_wait("SUW,2A19,32", "AOK");
  2463  01C6  30C7               	movlw	low (STR_21| (0+32768))
  2464  01C7  0020               	movlb	0	; select bank0
  2465  01C8  00E2               	movwf	write_and_wait@cmd
  2466  01C9  3083               	movlw	high (STR_21| (0+32768))
  2467  01CA  00E3               	movwf	write_and_wait@cmd+1
  2468  01CB  30EB               	movlw	low (STR_3| (0+32768))
  2469  01CC  00E4               	movwf	write_and_wait@res
  2470  01CD  3083               	movlw	high (STR_3| (0+32768))
  2471  01CE  00E5               	movwf	write_and_wait@res+1
  2472  01CF  3186  26D9  3180   	fcall	_write_and_wait
  2473  01D2  0020               	movlb	0	; select bank0
  2474  01D3  0863               	movf	?_write_and_wait+1,w
  2475  01D4  0021               	movlb	1	; select bank1
  2476  01D5  00E7               	movwf	(main@err+1)^(0+128)
  2477  01D6  0020               	movlb	0	; select bank0
  2478  01D7  0862               	movf	?_write_and_wait,w
  2479  01D8  0021               	movlb	1	; select bank1
  2480  01D9  00E6               	movwf	main@err^(0+128)
  2481                           
  2482                           ;main.c: 233: if (err) blink_leds(2, 5);
  2483  01DA  0866               	movf	main@err^(0+128),w
  2484  01DB  0467               	iorwf	(main@err+1)^(0+128),w
  2485  01DC  1903               	btfsc	3,2
  2486  01DD  29E9               	goto	l1935
  2487  01DE  3002               	movlw	2
  2488  01DF  00F2               	movwf	blink_leds@n
  2489  01E0  3000               	movlw	0
  2490  01E1  00F3               	movwf	blink_leds@n+1
  2491  01E2  3005               	movlw	5
  2492  01E3  00F4               	movwf	blink_leds@c
  2493  01E4  3000               	movlw	0
  2494  01E5  00F5               	movwf	blink_leds@c+1
  2495  01E6  3184  24A8  3180   	fcall	_blink_leds
  2496  01E9                     l1935:	
  2497                           
  2498                           ;main.c: 236: err = write_and_wait("SUW,010203040506070809000A0B0C0D0E0F,AABBCCDDEE", "A
      +                          OK");
  2499  01E9  30D8               	movlw	low (STR_23| (0+32768))
  2500  01EA  0020               	movlb	0	; select bank0
  2501  01EB  00E2               	movwf	write_and_wait@cmd
  2502  01EC  3082               	movlw	high (STR_23| (0+32768))
  2503  01ED  00E3               	movwf	write_and_wait@cmd+1
  2504  01EE  30EB               	movlw	low (STR_3| (0+32768))
  2505  01EF  00E4               	movwf	write_and_wait@res
  2506  01F0  3083               	movlw	high (STR_3| (0+32768))
  2507  01F1  00E5               	movwf	write_and_wait@res+1
  2508  01F2  3186  26D9  3180   	fcall	_write_and_wait
  2509  01F5  0020               	movlb	0	; select bank0
  2510  01F6  0863               	movf	?_write_and_wait+1,w
  2511  01F7  0021               	movlb	1	; select bank1
  2512  01F8  00E7               	movwf	(main@err+1)^(0+128)
  2513  01F9  0020               	movlb	0	; select bank0
  2514  01FA  0862               	movf	?_write_and_wait,w
  2515  01FB  0021               	movlb	1	; select bank1
  2516  01FC  00E6               	movwf	main@err^(0+128)
  2517                           
  2518                           ;main.c: 237: if (err) blink_leds(2, 10);
  2519  01FD  0866               	movf	main@err^(0+128),w
  2520  01FE  0467               	iorwf	(main@err+1)^(0+128),w
  2521  01FF  1903               	btfsc	3,2
  2522  0200  2A0C               	goto	l1941
  2523  0201  3002               	movlw	2
  2524  0202  00F2               	movwf	blink_leds@n
  2525  0203  3000               	movlw	0
  2526  0204  00F3               	movwf	blink_leds@n+1
  2527  0205  300A               	movlw	10
  2528  0206  00F4               	movwf	blink_leds@c
  2529  0207  3000               	movlw	0
  2530  0208  00F5               	movwf	blink_leds@c+1
  2531  0209  3184  24A8  3180   	fcall	_blink_leds
  2532  020C                     l1941:	
  2533                           
  2534                           ;main.c: 253: int c = 0;
  2535  020C  0021               	movlb	1	; select bank1
  2536  020D  01E4               	clrf	main@c^(0+128)
  2537  020E  01E5               	clrf	(main@c+1)^(0+128)
  2538  020F                     l1943:	
  2539                           ;main.c: 254: while(1) {
  2540                           
  2541                           
  2542                           ;main.c: 256: c++;
  2543  020F  3001               	movlw	1
  2544  0210  07E4               	addwf	main@c^(0+128),f
  2545  0211  3000               	movlw	0
  2546  0212  3DE5               	addwfc	(main@c+1)^(0+128),f
  2547                           
  2548                           ;main.c: 257: if (c%5==0) {
  2549  0213  3005               	movlw	5
  2550  0214  00F2               	movwf	___awmod@divisor
  2551  0215  3000               	movlw	0
  2552  0216  00F3               	movwf	___awmod@divisor+1
  2553  0217  0865               	movf	(main@c+1)^(0+128),w
  2554  0218  00F5               	movwf	___awmod@dividend+1
  2555  0219  0864               	movf	main@c^(0+128),w
  2556  021A  00F4               	movwf	___awmod@dividend
  2557  021B  3185  254D  3180   	fcall	___awmod
  2558  021E  0872               	movf	?___awmod,w
  2559  021F  0473               	iorwf	?___awmod+1,w
  2560  0220  1D03               	btfss	3,2
  2561  0221  2A3D               	goto	l1953
  2562                           
  2563                           ;main.c: 258: err = write_line("A,0050,07D0");
  2564  0222  30AF               	movlw	low (STR_25| (0+32768))
  2565  0223  00F6               	movwf	write_line@line
  2566  0224  3083               	movlw	high (STR_25| (0+32768))
  2567  0225  00F7               	movwf	write_line@line+1
  2568  0226  3186  262D  3180   	fcall	_write_line
  2569  0229  0877               	movf	?_write_line+1,w
  2570  022A  0021               	movlb	1	; select bank1
  2571  022B  00E7               	movwf	(main@err+1)^(0+128)
  2572  022C  0876               	movf	?_write_line,w
  2573  022D  00E6               	movwf	main@err^(0+128)
  2574                           
  2575                           ;main.c: 259: if (err) blink_leds(2, 14);
  2576  022E  0866               	movf	main@err^(0+128),w
  2577  022F  0467               	iorwf	(main@err+1)^(0+128),w
  2578  0230  1903               	btfsc	3,2
  2579  0231  2A3D               	goto	l1953
  2580  0232  3002               	movlw	2
  2581  0233  00F2               	movwf	blink_leds@n
  2582  0234  3000               	movlw	0
  2583  0235  00F3               	movwf	blink_leds@n+1
  2584  0236  300E               	movlw	14
  2585  0237  00F4               	movwf	blink_leds@c
  2586  0238  3000               	movlw	0
  2587  0239  00F5               	movwf	blink_leds@c+1
  2588  023A  3184  24A8  3180   	fcall	_blink_leds
  2589  023D                     l1953:	
  2590                           
  2591                           ;main.c: 260: }
  2592                           ;main.c: 261: if(c>100) {
  2593  023D  0021               	movlb	1	; select bank1
  2594  023E  0865               	movf	(main@c+1)^(0+128),w
  2595  023F  3A80               	xorlw	128
  2596  0240  0020               	movlb	0	; select bank0
  2597  0241  00E8               	movwf	??_main
  2598  0242  3080               	movlw	128
  2599  0243  0268               	subwf	??_main,w
  2600  0244  1D03               	skipz
  2601  0245  2A49               	goto	u1965
  2602  0246  3065               	movlw	101
  2603  0247  0021               	movlb	1	; select bank1
  2604  0248  0264               	subwf	main@c^(0+128),w
  2605  0249                     u1965:	
  2606  0249  1C03               	skipc
  2607  024A  2A4E               	goto	l1957
  2608                           
  2609                           ;main.c: 262: c=0;
  2610  024B  0021               	movlb	1	; select bank1
  2611  024C  01E4               	clrf	main@c^(0+128)
  2612  024D  01E5               	clrf	(main@c+1)^(0+128)
  2613  024E                     l1957:	
  2614                           
  2615                           ;main.c: 263: }
  2616                           ;main.c: 264: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2617  024E  300B               	movlw	11
  2618  024F  0020               	movlb	0	; select bank0
  2619  0250  00E9               	movwf	??_main+1
  2620  0251  3026               	movlw	38
  2621  0252  00E8               	movwf	??_main
  2622  0253  305D               	movlw	93
  2623  0254                     u2017:	
  2624  0254  0B89               	decfsz	9,f
  2625  0255  2A54               	goto	u2017
  2626  0256  0BE8               	decfsz	??_main,f
  2627  0257  2A54               	goto	u2017
  2628  0258  0BE9               	decfsz	??_main+1,f
  2629  0259  2A54               	goto	u2017
  2630  025A  3200               	nop2
  2631                           
  2632                           ;main.c: 265: err = write_line("A,0050,07D0");
  2633  025B  30AF               	movlw	low (STR_25| (0+32768))
  2634  025C  00F6               	movwf	write_line@line
  2635  025D  3083               	movlw	high (STR_25| (0+32768))
  2636  025E  00F7               	movwf	write_line@line+1
  2637  025F  3186  262D  3180   	fcall	_write_line
  2638  0262  0877               	movf	?_write_line+1,w
  2639  0263  0021               	movlb	1	; select bank1
  2640  0264  00E7               	movwf	(main@err+1)^(0+128)
  2641  0265  0876               	movf	?_write_line,w
  2642  0266  00E6               	movwf	main@err^(0+128)
  2643                           
  2644                           ;main.c: 266: if (err) blink_leds(2, 14);
  2645  0267  0866               	movf	main@err^(0+128),w
  2646  0268  0467               	iorwf	(main@err+1)^(0+128),w
  2647  0269  1903               	btfsc	3,2
  2648  026A  2A76               	goto	l332
  2649  026B  3002               	movlw	2
  2650  026C  00F2               	movwf	blink_leds@n
  2651  026D  3000               	movlw	0
  2652  026E  00F3               	movwf	blink_leds@n+1
  2653  026F  300E               	movlw	14
  2654  0270  00F4               	movwf	blink_leds@c
  2655  0271  3000               	movlw	0
  2656  0272  00F5               	movwf	blink_leds@c+1
  2657  0273  3184  24A8  3180   	fcall	_blink_leds
  2658  0276                     l332:	
  2659                           
  2660                           ;main.c: 267: adcResult = ADC_GetConversion(0x4);
  2661  0276  3004               	movlw	4
  2662  0277  3187  2747  3180   	fcall	_ADC_GetConversion
  2663  027A  0873               	movf	?_ADC_GetConversion+1,w
  2664  027B  0021               	movlb	1	; select bank1
  2665  027C  00E9               	movwf	(_adcResult+1)^(0+128)
  2666  027D  0872               	movf	?_ADC_GetConversion,w
  2667  027E  00E8               	movwf	_adcResult^(0+128)
  2668                           
  2669                           ;main.c: 268: char result[4];
  2670                           ;main.c: 269: char command[64]="SUW,010203040506070809000A0B0C0D0E0F,";
  2671  027F  3020               	movlw	low main@F4456
  2672  0280  0086               	movwf	6
  2673  0281  3001               	movlw	high main@F4456
  2674  0282  0087               	movwf	7
  2675  0283  30A0               	movlw	low main@command
  2676  0284  0084               	movwf	4
  2677  0285  3000               	movlw	high main@command
  2678  0286  0085               	movwf	5
  2679  0287  3040               	movlw	64
  2680  0288  0020               	movlb	0	; select bank0
  2681  0289  00E8               	movwf	??_main
  2682  028A                     u1980:	
  2683  028A  0016               	moviw fsr1++
  2684  028B  001A               	movwi fsr0++
  2685  028C  0BE8               	decfsz	??_main,f
  2686  028D  2A8A               	goto	u1980
  2687                           
  2688                           ;main.c: 271: err = write_line("SUW,2A19,32");
  2689  028E  30C7               	movlw	low (STR_21| (0+32768))
  2690  028F  00F6               	movwf	write_line@line
  2691  0290  3083               	movlw	high (STR_21| (0+32768))
  2692  0291  00F7               	movwf	write_line@line+1
  2693  0292  3186  262D  3180   	fcall	_write_line
  2694  0295  0877               	movf	?_write_line+1,w
  2695  0296  0021               	movlb	1	; select bank1
  2696  0297  00E7               	movwf	(main@err+1)^(0+128)
  2697  0298  0876               	movf	?_write_line,w
  2698  0299  00E6               	movwf	main@err^(0+128)
  2699                           
  2700                           ;main.c: 272: if (err) blink_leds(2, 5);
  2701  029A  0866               	movf	main@err^(0+128),w
  2702  029B  0467               	iorwf	(main@err+1)^(0+128),w
  2703  029C  1903               	btfsc	3,2
  2704  029D  2AA9               	goto	l1971
  2705  029E  3002               	movlw	2
  2706  029F  00F2               	movwf	blink_leds@n
  2707  02A0  3000               	movlw	0
  2708  02A1  00F3               	movwf	blink_leds@n+1
  2709  02A2  3005               	movlw	5
  2710  02A3  00F4               	movwf	blink_leds@c
  2711  02A4  3000               	movlw	0
  2712  02A5  00F5               	movwf	blink_leds@c+1
  2713  02A6  3184  24A8  3180   	fcall	_blink_leds
  2714  02A9                     l1971:	
  2715                           
  2716                           ;main.c: 273: sprintf(result, "%X", adcResult);
  2717  02A9  30EF               	movlw	low (STR_28| (0+32768))
  2718  02AA  0020               	movlb	0	; select bank0
  2719  02AB  00A0               	movwf	sprintf@f
  2720  02AC  3083               	movlw	high (STR_28| (0+32768))
  2721  02AD  00A1               	movwf	sprintf@f+1
  2722  02AE  0021               	movlb	1	; select bank1
  2723  02AF  0869               	movf	(_adcResult+1)^(0+128),w
  2724  02B0  0020               	movlb	0	; select bank0
  2725  02B1  00A3               	movwf	?_sprintf+3
  2726  02B2  0021               	movlb	1	; select bank1
  2727  02B3  0868               	movf	_adcResult^(0+128),w
  2728  02B4  0020               	movlb	0	; select bank0
  2729  02B5  00A2               	movwf	?_sprintf+2
  2730  02B6  30E0               	movlw	(low (main@result| 0))& (0+255)
  2731  02B7  3183  23F5  3180   	fcall	_sprintf
  2732                           
  2733                           ;main.c: 274: err=write_line(strcat(command,result));
  2734  02BA  30E0               	movlw	(low (main@result| 0))& (0+255)
  2735  02BB  0020               	movlb	0	; select bank0
  2736  02BC  00E8               	movwf	??_main
  2737  02BD  0868               	movf	??_main,w
  2738  02BE  00F2               	movwf	strcat@from
  2739  02BF  30A0               	movlw	(low (main@command| 0))& (0+255)
  2740  02C0  3186  2653  3180   	fcall	_strcat
  2741  02C3  00F6               	movwf	write_line@line
  2742  02C4  3000               	movlw	0
  2743  02C5  00F7               	movwf	write_line@line+1
  2744  02C6  3186  262D  3180   	fcall	_write_line
  2745  02C9  0877               	movf	?_write_line+1,w
  2746  02CA  0021               	movlb	1	; select bank1
  2747  02CB  00E7               	movwf	(main@err+1)^(0+128)
  2748  02CC  0876               	movf	?_write_line,w
  2749  02CD  00E6               	movwf	main@err^(0+128)
  2750  02CE  2A0F               	goto	l1943
  2751  02CF                     l342:	
  2752                           ;main.c: 285: while(1);
  2753                           
  2754                           ;main.c: 282: if (err) blink_leds(3,9);
  2755                           
  2756                           ;main.c: 281: err = strcmp(read_line(), "END");
  2757                           
  2758                           ;main.c: 275: }
  2759                           ;main.c: 278: do { LATAbits.LATA4 = 0; } while(0);
  2760                           
  2761  02CF  2ACF               	goto	l342
  2762  02D0                     __end_of_main:	
  2763                           
  2764                           	psect	text1
  2765  06D9                     __ptext1:	
  2766 ;; *************** function _write_and_wait *****************
  2767 ;; Defined at:
  2768 ;;		line 167 in file "main.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;  cmd             2   66[BANK0 ] PTR unsigned char 
  2771 ;;		 -> STR_23(48), STR_21(12), STR_18(4), STR_16(42), 
  2772 ;;		 -> STR_14(42), STR_12(36), STR_10(3), STR_8(18), 
  2773 ;;		 -> STR_6(12), STR_4(12), STR_2(5), 
  2774 ;;  res             2   68[BANK0 ] PTR unsigned char 
  2775 ;;		 -> STR_24(4), STR_22(4), STR_19(7), STR_17(4), 
  2776 ;;		 -> STR_15(4), STR_13(4), STR_11(4), STR_9(4), 
  2777 ;;		 -> STR_7(4), STR_5(4), STR_3(4), 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  line            1   71[BANK0 ] PTR unsigned char 
  2780 ;;		 -> read_line@c(64), 
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  2   66[BANK0 ] int 
  2783 ;; Registers used:
  2784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2790 ;;      Params:         0       4       0       0
  2791 ;;      Locals:         0       1       0       0
  2792 ;;      Temps:          0       1       0       0
  2793 ;;      Totals:         0       6       0       0
  2794 ;;Total ram usage:        6 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    4
  2797 ;; This function calls:
  2798 ;;		_read_line
  2799 ;;		_strcmp
  2800 ;;		_write_line
  2801 ;; This function is called by:
  2802 ;;		_main
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           
  2807                           ;psect for function _write_and_wait
  2808  06D9                     _write_and_wait:	
  2809                           
  2810                           ;main.c: 168: write_line(cmd);
  2811                           
  2812                           ;incstack = 0
  2813                           ; Regs used in _write_and_wait: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2814  06D9  0020               	movlb	0	; select bank0
  2815  06DA  0863               	movf	write_and_wait@cmd+1,w
  2816  06DB  00F7               	movwf	write_line@line+1
  2817  06DC  0862               	movf	write_and_wait@cmd,w
  2818  06DD  00F6               	movwf	write_line@line
  2819  06DE  3186  262D  3186   	fcall	_write_line
  2820                           
  2821                           ;main.c: 169: char * line = read_line();
  2822  06E1  3185  2500  3186   	fcall	_read_line
  2823  06E4  0020               	movlb	0	; select bank0
  2824  06E5  00E6               	movwf	??_write_and_wait
  2825  06E6  0866               	movf	??_write_and_wait,w
  2826  06E7  00E7               	movwf	write_and_wait@line
  2827                           
  2828                           ;main.c: 170: return strcmp(line, res);
  2829  06E8  0865               	movf	write_and_wait@res+1,w
  2830  06E9  00F6               	movwf	strcmp@s2+1
  2831  06EA  0864               	movf	write_and_wait@res,w
  2832  06EB  00F5               	movwf	strcmp@s2
  2833  06EC  0867               	movf	write_and_wait@line,w
  2834  06ED  3186  2606         	fcall	_strcmp
  2835  06EF  0876               	movf	?_strcmp+1,w
  2836  06F0  0020               	movlb	0	; select bank0
  2837  06F1  00E3               	movwf	?_write_and_wait+1
  2838  06F2  0875               	movf	?_strcmp,w
  2839  06F3  00E2               	movwf	?_write_and_wait
  2840  06F4  0008               	return
  2841  06F5                     __end_of_write_and_wait:	
  2842                           
  2843                           	psect	text2
  2844  062D                     __ptext2:	
  2845 ;; *************** function _write_line *****************
  2846 ;; Defined at:
  2847 ;;		line 153 in file "main.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  line            2    6[COMMON] PTR unsigned char 
  2850 ;;		 -> STR_27(12), main@command(64), STR_26(12), STR_25(12), 
  2851 ;;		 -> STR_23(48), STR_21(12), STR_18(4), STR_16(42), 
  2852 ;;		 -> STR_14(42), STR_12(36), STR_10(3), STR_8(18), 
  2853 ;;		 -> STR_6(12), STR_4(12), STR_2(5), 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  i               2    0[BANK0 ] int 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  2    6[COMMON] int 
  2858 ;; Registers used:
  2859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2865 ;;      Params:         2       0       0       0
  2866 ;;      Locals:         0       2       0       0
  2867 ;;      Temps:          1       0       0       0
  2868 ;;      Totals:         3       2       0       0
  2869 ;;Total ram usage:        5 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    3
  2872 ;; This function calls:
  2873 ;;		_EUSART_Write
  2874 ;; This function is called by:
  2875 ;;		_write_and_wait
  2876 ;;		_main
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           
  2881                           ;psect for function _write_line
  2882  062D                     _write_line:	
  2883                           
  2884                           ;main.c: 154: int i = 0;
  2885                           
  2886                           ;incstack = 0
  2887                           ; Regs used in _write_line: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2888  062D  0020               	movlb	0	; select bank0
  2889  062E  01A0               	clrf	write_line@i
  2890  062F  01A1               	clrf	write_line@i+1
  2891  0630                     l1837:	
  2892                           ;main.c: 155: while(line[i] != '\0') {
  2893                           
  2894  0630  0876               	movf	write_line@line,w
  2895  0631  0720               	addwf	write_line@i,w
  2896  0632  0084               	movwf	4
  2897  0633  0877               	movf	write_line@line+1,w
  2898  0634  3D21               	addwfc	write_line@i+1,w
  2899  0635  0085               	movwf	5
  2900  0636  0012               	moviw fsr0++
  2901  0637  1903               	btfsc	3,2
  2902  0638  2E49               	goto	l1839
  2903                           
  2904                           ;main.c: 156: EUSART_Write(line[i++]);
  2905  0639  0876               	movf	write_line@line,w
  2906  063A  0720               	addwf	write_line@i,w
  2907  063B  0084               	movwf	4
  2908  063C  0877               	movf	write_line@line+1,w
  2909  063D  3D21               	addwfc	write_line@i+1,w
  2910  063E  0085               	movwf	5
  2911  063F  0800               	movf	0,w	;code access
  2912  0640  3186  2678  3186   	fcall	_EUSART_Write
  2913  0643  3001               	movlw	1
  2914  0644  0020               	movlb	0	; select bank0
  2915  0645  07A0               	addwf	write_line@i,f
  2916  0646  3000               	movlw	0
  2917  0647  3DA1               	addwfc	write_line@i+1,f
  2918  0648  2E30               	goto	l1837
  2919  0649                     l1839:	
  2920                           
  2921                           ;main.c: 157: }
  2922                           ;main.c: 158: EUSART_Write('\r');
  2923  0649  300D               	movlw	13
  2924  064A  3186  2678  3186   	fcall	_EUSART_Write
  2925                           
  2926                           ;main.c: 159: EUSART_Write('\n');
  2927  064D  300A               	movlw	10
  2928  064E  3186  2678         	fcall	_EUSART_Write
  2929                           
  2930                           ;main.c: 160: return (0);
  2931  0650  01F6               	clrf	?_write_line
  2932  0651  01F7               	clrf	?_write_line+1
  2933  0652  0008               	return
  2934  0653                     __end_of_write_line:	
  2935                           
  2936                           	psect	text3
  2937  0678                     __ptext3:	
  2938 ;; *************** function _EUSART_Write *****************
  2939 ;; Defined at:
  2940 ;;		line 132 in file "mcc_generated_files/eusart.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;  txData          1    wreg     unsigned char 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  txData          1    3[COMMON] unsigned char 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2954 ;;      Params:         0       0       0       0
  2955 ;;      Locals:         1       0       0       0
  2956 ;;      Temps:          1       0       0       0
  2957 ;;      Totals:         2       0       0       0
  2958 ;;Total ram usage:        2 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    2
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_write_line
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           
  2969                           ;psect for function _EUSART_Write
  2970  0678                     _EUSART_Write:	
  2971                           
  2972                           ;incstack = 0
  2973                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  2974                           ;EUSART_Write@txData stored from wreg
  2975  0678  00F3               	movwf	EUSART_Write@txData
  2976  0679                     l1815:	
  2977                           ;eusart.c: 135: {
  2978                           
  2979                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  2980                           
  2981  0679  0020               	movlb	0	; select bank0
  2982  067A  086D               	movf	_eusartTxBufferRemaining,w	;volatile
  2983  067B  1903               	btfsc	3,2
  2984  067C  2E79               	goto	l1815
  2985                           
  2986                           ;eusart.c: 136: }
  2987                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  2988  067D  0021               	movlb	1	; select bank1
  2989  067E  1A11               	btfsc	17,4	;volatile
  2990  067F  2E84               	goto	l105
  2991                           
  2992                           ;eusart.c: 139: {
  2993                           ;eusart.c: 140: TXREG = txData;
  2994  0680  0873               	movf	EUSART_Write@txData,w
  2995  0681  0023               	movlb	3	; select bank3
  2996  0682  009A               	movwf	26	;volatile
  2997                           
  2998                           ;eusart.c: 141: }
  2999  0683  2E99               	goto	l1829
  3000  0684                     l105:	
  3001                           
  3002                           ;eusart.c: 142: else
  3003                           ;eusart.c: 143: {
  3004                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  3005  0684  1211               	bcf	17,4	;volatile
  3006                           
  3007                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  3008  0685  0873               	movf	EUSART_Write@txData,w
  3009  0686  00F2               	movwf	??_EUSART_Write
  3010  0687  087B               	movf	_eusartTxHead,w
  3011  0688  3E68               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  3012  0689  0086               	movwf	6
  3013  068A  3001               	movlw	1	; select bank2/3
  3014  068B  0087               	movwf	7
  3015  068C  0872               	movf	??_EUSART_Write,w
  3016  068D  0081               	movwf	1
  3017  068E  3001               	movlw	1
  3018  068F  00F2               	movwf	??_EUSART_Write
  3019  0690  0872               	movf	??_EUSART_Write,w
  3020  0691  07FB               	addwf	_eusartTxHead,f	;volatile
  3021                           
  3022                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  3023  0692  3008               	movlw	8
  3024  0693  027B               	subwf	_eusartTxHead,w	;volatile
  3025  0694  1803               	btfsc	3,0
  3026                           
  3027                           ;eusart.c: 147: {
  3028                           ;eusart.c: 148: eusartTxHead = 0;
  3029  0695  01FB               	clrf	_eusartTxHead	;volatile
  3030                           
  3031                           ;eusart.c: 149: }
  3032                           ;eusart.c: 150: eusartTxBufferRemaining--;
  3033  0696  3001               	movlw	1
  3034  0697  0020               	movlb	0	; select bank0
  3035  0698  02ED               	subwf	_eusartTxBufferRemaining,f	;volatile
  3036  0699                     l1829:	
  3037                           
  3038                           ;eusart.c: 151: }
  3039                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  3040  0699  0021               	movlb	1	; select bank1
  3041  069A  1611               	bsf	17,4	;volatile
  3042  069B  0008               	return
  3043  069C                     __end_of_EUSART_Write:	
  3044                           
  3045                           	psect	text4
  3046  0606                     __ptext4:	
  3047 ;; *************** function _strcmp *****************
  3048 ;; Defined at:
  3049 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcmp.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  s1              1    wreg     PTR const unsigned char 
  3052 ;;		 -> read_line@c(64), 
  3053 ;;  s2              2    5[COMMON] PTR const unsigned char 
  3054 ;;		 -> STR_29(4), STR_24(4), STR_22(4), STR_20(4), 
  3055 ;;		 -> STR_19(7), STR_17(4), STR_15(4), STR_13(4), 
  3056 ;;		 -> STR_11(4), STR_9(4), STR_7(4), STR_5(4), 
  3057 ;;		 -> STR_3(4), STR_1(4), 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  s1              1    9[COMMON] PTR const unsigned char 
  3060 ;;		 -> read_line@c(64), 
  3061 ;;  r               1    8[COMMON] char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  2    5[COMMON] int 
  3064 ;; Registers used:
  3065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3071 ;;      Params:         2       0       0       0
  3072 ;;      Locals:         2       0       0       0
  3073 ;;      Temps:          1       0       0       0
  3074 ;;      Totals:         5       0       0       0
  3075 ;;Total ram usage:        5 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    2
  3078 ;; This function calls:
  3079 ;;		Nothing
  3080 ;; This function is called by:
  3081 ;;		_write_and_wait
  3082 ;;		_main
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           
  3087                           ;psect for function _strcmp
  3088  0606                     _strcmp:	
  3089                           
  3090                           ;incstack = 0
  3091                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  3092                           ;strcmp@s1 stored from wreg
  3093  0606  00F9               	movwf	strcmp@s1
  3094  0607  2E10               	goto	l1429
  3095  0608                     l1427:	
  3096  0608  3001               	movlw	1
  3097  0609  00F7               	movwf	??_strcmp
  3098  060A  0877               	movf	??_strcmp,w
  3099  060B  07F9               	addwf	strcmp@s1,f
  3100  060C  3001               	movlw	1
  3101  060D  07F5               	addwf	strcmp@s2,f
  3102  060E  3000               	movlw	0
  3103  060F  3DF6               	addwfc	strcmp@s2+1,f
  3104  0610                     l1429:	
  3105  0610  0879               	movf	strcmp@s1,w
  3106  0611  0086               	movwf	6
  3107  0612  0187               	clrf	7
  3108  0613  0875               	movf	strcmp@s2,w
  3109  0614  0084               	movwf	4
  3110  0615  0876               	movf	strcmp@s2+1,w
  3111  0616  0085               	movwf	5
  3112  0617  0800               	movf	0,w	;code access
  3113  0618  3AFF               	xorlw	255
  3114  0619  3E01               	addlw	1
  3115  061A  0701               	addwf	1,w
  3116  061B  00F7               	movwf	??_strcmp
  3117  061C  0877               	movf	??_strcmp,w
  3118  061D  00F8               	movwf	strcmp@r
  3119  061E  0878               	movf	strcmp@r,w
  3120  061F  1D03               	btfss	3,2
  3121  0620  2E27               	goto	l1433
  3122  0621  0879               	movf	strcmp@s1,w
  3123  0622  0086               	movwf	6
  3124  0623  0187               	clrf	7
  3125  0624  0801               	movf	1,w
  3126  0625  1D03               	btfss	3,2
  3127  0626  2E08               	goto	l1427
  3128  0627                     l1433:	
  3129  0627  0878               	movf	strcmp@r,w
  3130  0628  00F5               	movwf	?_strcmp
  3131  0629  01F6               	clrf	?_strcmp+1
  3132  062A  1BF5               	btfsc	?_strcmp,7
  3133  062B  03F6               	decf	?_strcmp+1,f
  3134  062C  0008               	return
  3135  062D                     __end_of_strcmp:	
  3136                           
  3137                           	psect	text5
  3138  0500                     __ptext5:	
  3139 ;; *************** function _read_line *****************
  3140 ;; Defined at:
  3141 ;;		line 132 in file "main.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;		None
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  c              64    0[BANK0 ] unsigned char [64]
  3146 ;;  i               2   64[BANK0 ] int 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      PTR unsigned char 
  3149 ;; Registers used:
  3150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3156 ;;      Params:         0       0       0       0
  3157 ;;      Locals:         0      66       0       0
  3158 ;;      Temps:          1       0       0       0
  3159 ;;      Totals:         1      66       0       0
  3160 ;;Total ram usage:       67 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    3
  3163 ;; This function calls:
  3164 ;;		_EUSART_Read
  3165 ;; This function is called by:
  3166 ;;		_write_and_wait
  3167 ;;		_main
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           
  3172                           ;psect for function _read_line
  3173  0500                     _read_line:	
  3174  0500                     l293:	
  3175                           ;incstack = 0
  3176                           ; Regs used in _read_line: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3177                           ;main.c: 133: char c[64];
  3178                           ;main.c: 135: do {
  3179                           
  3180                           
  3181                           ;main.c: 136: c[0] = EUSART_Read();
  3182  0500  3186  269C  3185   	fcall	_EUSART_Read
  3183  0503  00F4               	movwf	??_read_line
  3184  0504  0874               	movf	??_read_line,w
  3185  0505  0020               	movlb	0	; select bank0
  3186  0506  00A0               	movwf	read_line@c
  3187                           
  3188                           ;main.c: 137: } while (c[0] == '\0');
  3189  0507  0820               	movf	read_line@c,w
  3190  0508  1903               	btfsc	3,2
  3191  0509  2D00               	goto	l293
  3192                           
  3193                           ;main.c: 139: int i = 0;
  3194  050A  01E0               	clrf	read_line@i
  3195  050B  01E1               	clrf	read_line@i+1
  3196  050C                     l1395:	
  3197                           ;main.c: 140: do {
  3198                           
  3199                           
  3200                           ;main.c: 141: c[++i] = EUSART_Read();
  3201  050C  3186  269C  3185   	fcall	_EUSART_Read
  3202  050F  00F4               	movwf	??_read_line
  3203  0510  3001               	movlw	1
  3204  0511  0020               	movlb	0	; select bank0
  3205  0512  07E0               	addwf	read_line@i,f
  3206  0513  3000               	movlw	0
  3207  0514  3DE1               	addwfc	read_line@i+1,f
  3208  0515  0860               	movf	read_line@i,w
  3209  0516  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3210  0517  0086               	movwf	6
  3211  0518  0187               	clrf	7
  3212  0519  0874               	movf	??_read_line,w
  3213  051A  0081               	movwf	1
  3214                           
  3215                           ;main.c: 142: } while (c[i] != '\n' && i < 64);
  3216  051B  0860               	movf	read_line@i,w
  3217  051C  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3218  051D  0086               	movwf	6
  3219  051E  0187               	clrf	7
  3220  051F  300A               	movlw	10
  3221  0520  0601               	xorwf	1,w
  3222  0521  1903               	btfsc	3,2
  3223  0522  2D2E               	goto	l1401
  3224  0523  0861               	movf	read_line@i+1,w
  3225  0524  3A80               	xorlw	128
  3226  0525  00F4               	movwf	??_read_line
  3227  0526  3080               	movlw	128
  3228  0527  0274               	subwf	??_read_line,w
  3229  0528  1D03               	skipz
  3230  0529  2D2C               	goto	u1005
  3231  052A  3040               	movlw	64
  3232  052B  0260               	subwf	read_line@i,w
  3233  052C                     u1005:	
  3234  052C  1C03               	skipc
  3235  052D  2D0C               	goto	l1395
  3236  052E                     l1401:	
  3237                           
  3238                           ;main.c: 144: if (c[i] == '\n') c[i] = '\0';
  3239  052E  0020               	movlb	0	; select bank0
  3240  052F  0860               	movf	read_line@i,w
  3241  0530  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3242  0531  0086               	movwf	6
  3243  0532  0187               	clrf	7
  3244  0533  300A               	movlw	10
  3245  0534  0601               	xorwf	1,w
  3246  0535  1D03               	btfss	3,2
  3247  0536  2D3C               	goto	l299
  3248  0537  0860               	movf	read_line@i,w
  3249  0538  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3250  0539  0086               	movwf	6
  3251  053A  0187               	clrf	7
  3252  053B  0181               	clrf	1
  3253  053C                     l299:	
  3254                           
  3255                           ;main.c: 145: if (c[i-1] == '\r') c[i-1] = '\0';
  3256  053C  0860               	movf	read_line@i,w
  3257  053D  3EFF               	addlw	255
  3258  053E  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3259  053F  0086               	movwf	6
  3260  0540  0187               	clrf	7
  3261  0541  300D               	movlw	13
  3262  0542  0601               	xorwf	1,w
  3263  0543  1D03               	btfss	3,2
  3264  0544  2D4B               	goto	l1407
  3265  0545  0860               	movf	read_line@i,w
  3266  0546  3EFF               	addlw	255
  3267  0547  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3268  0548  0086               	movwf	6
  3269  0549  0187               	clrf	7
  3270  054A  0181               	clrf	1
  3271  054B                     l1407:	
  3272                           
  3273                           ;main.c: 146: return c;
  3274  054B  3020               	movlw	(low (read_line@c| 0))& (0+255)
  3275  054C  0008               	return
  3276  054D                     __end_of_read_line:	
  3277                           
  3278                           	psect	text6
  3279  069C                     __ptext6:	
  3280 ;; *************** function _EUSART_Read *****************
  3281 ;; Defined at:
  3282 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;		None
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  readValue       1    3[COMMON] unsigned char 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  1    wreg      unsigned char 
  3289 ;; Registers used:
  3290 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3296 ;;      Params:         0       0       0       0
  3297 ;;      Locals:         1       0       0       0
  3298 ;;      Temps:          1       0       0       0
  3299 ;;      Totals:         2       0       0       0
  3300 ;;Total ram usage:        2 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    2
  3303 ;; This function calls:
  3304 ;;		Nothing
  3305 ;; This function is called by:
  3306 ;;		_read_line
  3307 ;;		_show_input_leds
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           
  3312                           ;psect for function _EUSART_Read
  3313  069C                     _EUSART_Read:	
  3314                           
  3315                           ;eusart.c: 114: uint8_t readValue = 0;
  3316                           
  3317                           ;incstack = 0
  3318                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3319  069C  01F3               	clrf	EUSART_Read@readValue
  3320  069D                     l1303:	
  3321                           ;eusart.c: 117: {
  3322                           
  3323                           ;eusart.c: 116: while(0 == eusartRxCount)
  3324                           
  3325  069D  0020               	movlb	0	; select bank0
  3326  069E  086A               	movf	_eusartRxCount,w	;volatile
  3327  069F  1903               	btfsc	3,2
  3328  06A0  2E9D               	goto	l1303
  3329                           
  3330                           ;eusart.c: 118: }
  3331                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  3332  06A1  086B               	movf	_eusartRxTail,w
  3333  06A2  3E60               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3334  06A3  0086               	movwf	6
  3335  06A4  3001               	movlw	1	; select bank2/3
  3336  06A5  0087               	movwf	7
  3337  06A6  0801               	movf	1,w
  3338  06A7  00F2               	movwf	??_EUSART_Read
  3339  06A8  0872               	movf	??_EUSART_Read,w
  3340  06A9  00F3               	movwf	EUSART_Read@readValue
  3341  06AA  3001               	movlw	1
  3342  06AB  00F2               	movwf	??_EUSART_Read
  3343  06AC  0872               	movf	??_EUSART_Read,w
  3344  06AD  07EB               	addwf	_eusartRxTail,f	;volatile
  3345                           
  3346                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3347  06AE  3008               	movlw	8
  3348  06AF  026B               	subwf	_eusartRxTail,w	;volatile
  3349  06B0  1803               	btfsc	3,0
  3350                           
  3351                           ;eusart.c: 122: {
  3352                           ;eusart.c: 123: eusartRxTail = 0;
  3353  06B1  01EB               	clrf	_eusartRxTail	;volatile
  3354                           
  3355                           ;eusart.c: 124: }
  3356                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  3357  06B2  0021               	movlb	1	; select bank1
  3358  06B3  1291               	bcf	17,5	;volatile
  3359                           
  3360                           ;eusart.c: 126: eusartRxCount--;
  3361  06B4  3001               	movlw	1
  3362  06B5  0020               	movlb	0	; select bank0
  3363  06B6  02EA               	subwf	_eusartRxCount,f	;volatile
  3364                           
  3365                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  3366  06B7  0021               	movlb	1	; select bank1
  3367  06B8  1691               	bsf	17,5	;volatile
  3368                           
  3369                           ;eusart.c: 129: return readValue;
  3370  06B9  0873               	movf	EUSART_Read@readValue,w
  3371  06BA  0008               	return
  3372  06BB                     __end_of_EUSART_Read:	
  3373                           
  3374                           	psect	text7
  3375  0653                     __ptext7:	
  3376 ;; *************** function _strcat *****************
  3377 ;; Defined at:
  3378 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcat.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  to              1    wreg     PTR unsigned char 
  3381 ;;		 -> main@command(64), 
  3382 ;;  from            1    2[COMMON] PTR const unsigned char 
  3383 ;;		 -> main@result(4), 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  to              1    4[COMMON] PTR unsigned char 
  3386 ;;		 -> main@command(64), 
  3387 ;;  cp              1    5[COMMON] PTR unsigned char 
  3388 ;;		 -> main@command(64), 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      PTR unsigned char 
  3391 ;; Registers used:
  3392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3398 ;;      Params:         1       0       0       0
  3399 ;;      Locals:         2       0       0       0
  3400 ;;      Temps:          1       0       0       0
  3401 ;;      Totals:         4       0       0       0
  3402 ;;Total ram usage:        4 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    2
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_main
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           
  3413                           ;psect for function _strcat
  3414  0653                     _strcat:	
  3415                           
  3416                           ;incstack = 0
  3417                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0]
  3418                           ;strcat@to stored from wreg
  3419  0653  00F4               	movwf	strcat@to
  3420  0654  0874               	movf	strcat@to,w
  3421  0655  00F3               	movwf	??_strcat
  3422  0656  0873               	movf	??_strcat,w
  3423  0657  00F5               	movwf	strcat@cp
  3424  0658                     l1615:	
  3425  0658  0875               	movf	strcat@cp,w
  3426  0659  0086               	movwf	6
  3427  065A  0187               	clrf	7
  3428  065B  0801               	movf	1,w
  3429  065C  1903               	btfsc	3,2
  3430  065D  2E6B               	goto	l1619
  3431  065E  3001               	movlw	1
  3432  065F  00F3               	movwf	??_strcat
  3433  0660  0873               	movf	??_strcat,w
  3434  0661  07F5               	addwf	strcat@cp,f
  3435  0662  2E58               	goto	l1615
  3436  0663                     l1617:	
  3437  0663  3001               	movlw	1
  3438  0664  00F3               	movwf	??_strcat
  3439  0665  0873               	movf	??_strcat,w
  3440  0666  07F5               	addwf	strcat@cp,f
  3441  0667  3001               	movlw	1
  3442  0668  00F3               	movwf	??_strcat
  3443  0669  0873               	movf	??_strcat,w
  3444  066A  07F2               	addwf	strcat@from,f
  3445  066B                     l1619:	
  3446  066B  0875               	movf	strcat@cp,w
  3447  066C  0086               	movwf	6
  3448  066D  0187               	clrf	7
  3449  066E  0872               	movf	strcat@from,w
  3450  066F  0084               	movwf	4
  3451  0670  0185               	clrf	5
  3452  0671  0800               	movf	0,w
  3453  0672  3FC0               	movwi [0]fsr1
  3454  0673  0889               	movf	9,f
  3455  0674  1D03               	btfss	3,2
  3456  0675  2E63               	goto	l1617
  3457  0676  0874               	movf	strcat@to,w
  3458  0677  0008               	return
  3459  0678                     __end_of_strcat:	
  3460                           
  3461                           	psect	text8
  3462  03F5                     __ptext8:	
  3463 ;; *************** function _sprintf *****************
  3464 ;; Defined at:
  3465 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  sp              1    wreg     PTR unsigned char 
  3468 ;;		 -> main@result(4), 
  3469 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  3470 ;;		 -> STR_28(3), 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  3473 ;;		 -> main@result(4), 
  3474 ;;  idx             1    9[BANK0 ] unsigned char 
  3475 ;;  tmpval          4    0        struct .
  3476 ;;  val             2   11[BANK0 ] unsigned int 
  3477 ;;  cp              2    0        PTR const unsigned char 
  3478 ;;  len             2    0        unsigned int 
  3479 ;;  c               1   15[BANK0 ] char 
  3480 ;;  prec            1   13[BANK0 ] char 
  3481 ;;  ap              1   10[BANK0 ] PTR void [1]
  3482 ;;		 -> ?_sprintf(2), 
  3483 ;;  flag            1    8[BANK0 ] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  2    0[BANK0 ] int 
  3486 ;; Registers used:
  3487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3493 ;;      Params:         0       4       0       0
  3494 ;;      Locals:         0       8       0       0
  3495 ;;      Temps:          0       4       0       0
  3496 ;;      Totals:         0      16       0       0
  3497 ;;Total ram usage:       16 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    3
  3500 ;; This function calls:
  3501 ;;		___lwdiv
  3502 ;; This function is called by:
  3503 ;;		_main
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           
  3508                           ;psect for function _sprintf
  3509  03F5                     _sprintf:	
  3510                           
  3511                           ;incstack = 0
  3512                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3513                           ;sprintf@sp stored from wreg
  3514  03F5  0020               	movlb	0	; select bank0
  3515  03F6  00AE               	movwf	sprintf@sp
  3516                           
  3517                           ;doprnt.c: 494: va_list ap;
  3518                           ;doprnt.c: 499: signed char c;
  3519                           ;doprnt.c: 506: signed char prec;
  3520                           ;doprnt.c: 508: unsigned char flag;
  3521                           ;doprnt.c: 523: union {
  3522                           ;doprnt.c: 524: unsigned long vd;
  3523                           ;doprnt.c: 525: double integ;
  3524                           ;doprnt.c: 526: } tmpval;
  3525                           ;doprnt.c: 528: unsigned int val;
  3526                           ;doprnt.c: 529: unsigned len;
  3527                           ;doprnt.c: 530: const char * cp;
  3528                           ;doprnt.c: 533: *ap = __va_start();
  3529  03F7  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3530  03F8  00A4               	movwf	??_sprintf
  3531  03F9  0824               	movf	??_sprintf,w
  3532  03FA  00AA               	movwf	sprintf@ap
  3533  03FB                     l1605:	
  3534                           ;doprnt.c: 536: while(c = *f++) {
  3535                           
  3536  03FB  0821               	movf	sprintf@f+1,w
  3537  03FC  00A5               	movwf	??_sprintf+1
  3538  03FD  0820               	movf	sprintf@f,w
  3539  03FE  00A4               	movwf	??_sprintf
  3540  03FF  0AA0               	incf	sprintf@f,f
  3541  0400  1903               	skipnz
  3542  0401  0AA1               	incf	sprintf@f+1,f
  3543  0402  0824               	movf	??_sprintf,w
  3544  0403  0084               	movwf	4
  3545  0404  0825               	movf	??_sprintf+1,w
  3546  0405  0085               	movwf	5
  3547  0406  0800               	movf	0,w	;code access
  3548  0407  00A6               	movwf	??_sprintf+2
  3549  0408  0826               	movf	??_sprintf+2,w
  3550  0409  00AF               	movwf	sprintf@c
  3551  040A  082F               	movf	sprintf@c,w
  3552  040B  1903               	btfsc	3,2
  3553  040C  2CA3               	goto	l1607
  3554                           
  3555                           ;doprnt.c: 538: if(c != '%')
  3556  040D  3025               	movlw	37
  3557  040E  062F               	xorwf	sprintf@c,w
  3558  040F  1903               	btfsc	3,2
  3559  0410  2C1D               	goto	l1571
  3560                           
  3561                           ;doprnt.c: 540: {
  3562                           ;doprnt.c: 541: ((*sp++ = (c)));
  3563  0411  082F               	movf	sprintf@c,w
  3564  0412  00A4               	movwf	??_sprintf
  3565  0413  082E               	movf	sprintf@sp,w
  3566  0414  0086               	movwf	6
  3567  0415  0187               	clrf	7
  3568  0416  0824               	movf	??_sprintf,w
  3569  0417  0081               	movwf	1
  3570  0418  3001               	movlw	1
  3571  0419  00A4               	movwf	??_sprintf
  3572  041A  0824               	movf	??_sprintf,w
  3573  041B  07AE               	addwf	sprintf@sp,f
  3574                           
  3575                           ;doprnt.c: 542: continue;
  3576  041C  2BFB               	goto	l1605
  3577  041D                     l1571:	
  3578                           
  3579                           ;doprnt.c: 543: }
  3580                           ;doprnt.c: 548: flag = 0;
  3581  041D  01A8               	clrf	sprintf@flag
  3582                           
  3583                           ;doprnt.c: 822: }
  3584                           
  3585                           ;doprnt.c: 813: continue;
  3586                           
  3587                           ;doprnt.c: 802: default:
  3588                           
  3589                           ;doprnt.c: 718: case 'x':
  3590                           ;doprnt.c: 723: break;
  3591                           
  3592                           ;doprnt.c: 712: case 'X':
  3593                           
  3594                           ;doprnt.c: 638: goto alldone;
  3595                           
  3596                           ;doprnt.c: 637: case 0:
  3597                           
  3598                           ;doprnt.c: 635: switch(c = *f++) {
  3599  041E  0821               	movf	sprintf@f+1,w
  3600  041F  00A5               	movwf	??_sprintf+1
  3601  0420  0820               	movf	sprintf@f,w
  3602  0421  00A4               	movwf	??_sprintf
  3603  0422  0AA0               	incf	sprintf@f,f
  3604  0423  1903               	skipnz
  3605  0424  0AA1               	incf	sprintf@f+1,f
  3606  0425  0824               	movf	??_sprintf,w
  3607  0426  0084               	movwf	4
  3608  0427  0825               	movf	??_sprintf+1,w
  3609  0428  0085               	movwf	5
  3610  0429  0800               	movf	0,w	;code access
  3611  042A  00AF               	movwf	sprintf@c
  3612                           
  3613                           ; Switch size 1, requested type "space"
  3614                           ; Number of cases is 3, Range of values is 0 to 120
  3615                           ; switch strategies available:
  3616                           ; Name         Instructions Cycles
  3617                           ; simple_byte           10     6 (average)
  3618                           ; direct_byte          248     6 (fixed)
  3619                           ; jumptable            260     6 (fixed)
  3620                           ;	Chosen strategy is simple_byte
  3621  042B  3A00               	xorlw	0	; case 0
  3622  042C  1903               	skipnz
  3623  042D  2CA3               	goto	l1607
  3624  042E  3A58               	xorlw	88	; case 88
  3625  042F  1903               	skipnz
  3626  0430  2C35               	goto	l1577
  3627  0431  3A20               	xorlw	32	; case 120
  3628  0432  1903               	skipnz
  3629  0433  2C35               	goto	l1577
  3630  0434  2BFB               	goto	l1605
  3631  0435                     l1577:	
  3632                           
  3633                           ;doprnt.c: 1273: {
  3634                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3635  0435  082A               	movf	sprintf@ap,w
  3636  0436  0086               	movwf	6
  3637  0437  0187               	clrf	7
  3638  0438  3F40               	moviw [0]fsr1
  3639  0439  00AB               	movwf	sprintf@val
  3640  043A  3F41               	moviw [1]fsr1
  3641  043B  00AC               	movwf	sprintf@val+1
  3642  043C  3002               	movlw	2
  3643  043D  00A4               	movwf	??_sprintf
  3644  043E  0824               	movf	??_sprintf,w
  3645  043F  07AA               	addwf	sprintf@ap,f
  3646                           
  3647                           ;doprnt.c: 1287: }
  3648                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3649  0440  01AF               	clrf	sprintf@c
  3650  0441  0AAF               	incf	sprintf@c,f
  3651  0442  3004               	movlw	4
  3652  0443  062F               	xorwf	sprintf@c,w
  3653  0444  1903               	btfsc	3,2
  3654  0445  2C65               	goto	l1593
  3655  0446                     l1587:	
  3656                           
  3657                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3658  0446  082F               	movf	sprintf@c,w
  3659  0447  00A4               	movwf	??_sprintf
  3660  0448  01A5               	clrf	??_sprintf+1
  3661  0449  35A4               	lslf	??_sprintf,f
  3662  044A  0DA5               	rlf	??_sprintf+1,f
  3663  044B  30D0               	movlw	low (_hexpowers| (0+32768))
  3664  044C  0724               	addwf	??_sprintf,w
  3665  044D  0084               	movwf	4
  3666  044E  3082               	movlw	high (_hexpowers| (0+32768))
  3667  044F  3D25               	addwfc	??_sprintf+1,w
  3668  0450  0085               	movwf	5
  3669  0451  3F00               	moviw [0]fsr0
  3670  0452  00A6               	movwf	??_sprintf+2
  3671  0453  3F01               	moviw [1]fsr0
  3672  0454  00A7               	movwf	??_sprintf+3
  3673  0455  0827               	movf	??_sprintf+3,w
  3674  0456  022C               	subwf	sprintf@val+1,w
  3675  0457  1D03               	skipz
  3676  0458  2C5B               	goto	u1355
  3677  0459  0826               	movf	??_sprintf+2,w
  3678  045A  022B               	subwf	sprintf@val,w
  3679  045B                     u1355:	
  3680  045B  1C03               	btfss	3,0
  3681  045C  2C65               	goto	l1593
  3682                           
  3683                           ;doprnt.c: 1318: break;
  3684  045D  3001               	movlw	1
  3685  045E  00A4               	movwf	??_sprintf
  3686  045F  0824               	movf	??_sprintf,w
  3687  0460  07AF               	addwf	sprintf@c,f
  3688  0461  3004               	movlw	4
  3689  0462  062F               	xorwf	sprintf@c,w
  3690  0463  1D03               	btfss	3,2
  3691  0464  2C46               	goto	l1587
  3692  0465                     l1593:	
  3693                           
  3694                           ;doprnt.c: 1422: {
  3695                           ;doprnt.c: 1469: }
  3696                           ;doprnt.c: 1472: prec = c;
  3697  0465  082F               	movf	sprintf@c,w
  3698  0466  00A4               	movwf	??_sprintf
  3699  0467  0824               	movf	??_sprintf,w
  3700  0468  00AD               	movwf	sprintf@prec
  3701  0469                     l1603:	
  3702                           ;doprnt.c: 1474: while(prec--) {
  3703                           
  3704  0469  30FF               	movlw	255
  3705  046A  00A4               	movwf	??_sprintf
  3706  046B  0824               	movf	??_sprintf,w
  3707  046C  07AD               	addwf	sprintf@prec,f
  3708  046D  0A2D               	incf	sprintf@prec,w
  3709  046E  1903               	btfsc	3,2
  3710  046F  2BFB               	goto	l1605
  3711                           
  3712                           ;doprnt.c: 1478: {
  3713                           ;doprnt.c: 1499: {
  3714                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3715  0470  082D               	movf	sprintf@prec,w
  3716  0471  00A4               	movwf	??_sprintf
  3717  0472  01A5               	clrf	??_sprintf+1
  3718  0473  35A4               	lslf	??_sprintf,f
  3719  0474  0DA5               	rlf	??_sprintf+1,f
  3720  0475  30D0               	movlw	low (_hexpowers| (0+32768))
  3721  0476  0724               	addwf	??_sprintf,w
  3722  0477  0084               	movwf	4
  3723  0478  3082               	movlw	high (_hexpowers| (0+32768))
  3724  0479  3D25               	addwfc	??_sprintf+1,w
  3725  047A  0085               	movwf	5
  3726  047B  3F00               	moviw [0]fsr0
  3727  047C  00F2               	movwf	___lwdiv@divisor
  3728  047D  3F01               	moviw [1]fsr0
  3729  047E  00F3               	movwf	___lwdiv@divisor+1
  3730  047F  082C               	movf	sprintf@val+1,w
  3731  0480  00F5               	movwf	___lwdiv@dividend+1
  3732  0481  082B               	movf	sprintf@val,w
  3733  0482  00F4               	movwf	___lwdiv@dividend
  3734  0483  3185  25D2  3183   	fcall	___lwdiv
  3735  0486  0872               	movf	?___lwdiv,w
  3736  0487  390F               	andlw	15
  3737  0488  0020               	movlb	0	; select bank0
  3738  0489  00A6               	movwf	??_sprintf+2
  3739  048A  0826               	movf	??_sprintf+2,w
  3740  048B  00A9               	movwf	sprintf@idx
  3741                           
  3742                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  3743  048C  0829               	movf	sprintf@idx,w
  3744  048D  3E92               	addlw	low (STR_30| (0+32768))
  3745  048E  0084               	movwf	4
  3746  048F  3083               	movlw	high (STR_30| (0+32768))
  3747  0490  1803               	skipnc
  3748  0491  3E01               	addlw	1
  3749  0492  0085               	movwf	5
  3750  0493  0800               	movf	0,w	;code access
  3751  0494  00A4               	movwf	??_sprintf
  3752  0495  0824               	movf	??_sprintf,w
  3753  0496  00AF               	movwf	sprintf@c
  3754                           
  3755                           ;doprnt.c: 1508: }
  3756                           ;doprnt.c: 1523: }
  3757                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3758  0497  082F               	movf	sprintf@c,w
  3759  0498  00A4               	movwf	??_sprintf
  3760  0499  082E               	movf	sprintf@sp,w
  3761  049A  0086               	movwf	6
  3762  049B  0187               	clrf	7
  3763  049C  0824               	movf	??_sprintf,w
  3764  049D  0081               	movwf	1
  3765  049E  3001               	movlw	1
  3766  049F  00A4               	movwf	??_sprintf
  3767  04A0  0824               	movf	??_sprintf,w
  3768  04A1  07AE               	addwf	sprintf@sp,f
  3769  04A2  2C69               	goto	l1603
  3770  04A3                     l1607:	
  3771                           ;doprnt.c: 1525: }
  3772                           ;doprnt.c: 1533: }
  3773                           ;doprnt.c: 1535: alldone:
  3774                           
  3775                           
  3776                           ;doprnt.c: 1538: *sp = 0;
  3777  04A3  082E               	movf	sprintf@sp,w
  3778  04A4  0086               	movwf	6
  3779  04A5  0187               	clrf	7
  3780  04A6  0181               	clrf	1
  3781  04A7  0008               	return
  3782  04A8                     __end_of_sprintf:	
  3783                           ;doprnt.c: 1540: return 0;
  3784                           ;	Return value of _sprintf is never used
  3785                           
  3786                           
  3787                           	psect	text9
  3788  05D2                     __ptext9:	
  3789 ;; *************** function ___lwdiv *****************
  3790 ;; Defined at:
  3791 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;  divisor         2    2[COMMON] unsigned int 
  3794 ;;  dividend        2    4[COMMON] unsigned int 
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  quotient        2    7[COMMON] unsigned int 
  3797 ;;  counter         1    9[COMMON] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  2    2[COMMON] unsigned int 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3807 ;;      Params:         4       0       0       0
  3808 ;;      Locals:         3       0       0       0
  3809 ;;      Temps:          1       0       0       0
  3810 ;;      Totals:         8       0       0       0
  3811 ;;Total ram usage:        8 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    2
  3814 ;; This function calls:
  3815 ;;		Nothing
  3816 ;; This function is called by:
  3817 ;;		_sprintf
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           
  3822                           ;psect for function ___lwdiv
  3823  05D2                     ___lwdiv:	
  3824                           
  3825                           ;incstack = 0
  3826                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3827  05D2  01F7               	clrf	___lwdiv@quotient
  3828  05D3  01F8               	clrf	___lwdiv@quotient+1
  3829  05D4  0872               	movf	___lwdiv@divisor,w
  3830  05D5  0473               	iorwf	___lwdiv@divisor+1,w
  3831  05D6  1903               	btfsc	3,2
  3832  05D7  2E01               	goto	l1459
  3833  05D8  01F9               	clrf	___lwdiv@counter
  3834  05D9  0AF9               	incf	___lwdiv@counter,f
  3835  05DA                     l1447:	
  3836  05DA  1BF3               	btfsc	___lwdiv@divisor+1,7
  3837  05DB  2DE6               	goto	l1449
  3838  05DC  3001               	movlw	1
  3839  05DD                     u1075:	
  3840  05DD  35F2               	lslf	___lwdiv@divisor,f
  3841  05DE  0DF3               	rlf	___lwdiv@divisor+1,f
  3842  05DF  0B89               	decfsz	9,f
  3843  05E0  2DDD               	goto	u1075
  3844  05E1  3001               	movlw	1
  3845  05E2  00F6               	movwf	??___lwdiv
  3846  05E3  0876               	movf	??___lwdiv,w
  3847  05E4  07F9               	addwf	___lwdiv@counter,f
  3848  05E5  2DDA               	goto	l1447
  3849  05E6                     l1449:	
  3850  05E6  3001               	movlw	1
  3851  05E7                     u1095:	
  3852  05E7  35F7               	lslf	___lwdiv@quotient,f
  3853  05E8  0DF8               	rlf	___lwdiv@quotient+1,f
  3854  05E9  0B89               	decfsz	9,f
  3855  05EA  2DE7               	goto	u1095
  3856  05EB  0873               	movf	___lwdiv@divisor+1,w
  3857  05EC  0275               	subwf	___lwdiv@dividend+1,w
  3858  05ED  1D03               	skipz
  3859  05EE  2DF1               	goto	u1105
  3860  05EF  0872               	movf	___lwdiv@divisor,w
  3861  05F0  0274               	subwf	___lwdiv@dividend,w
  3862  05F1                     u1105:	
  3863  05F1  1C03               	skipc
  3864  05F2  2DF8               	goto	l1455
  3865  05F3  0872               	movf	___lwdiv@divisor,w
  3866  05F4  02F4               	subwf	___lwdiv@dividend,f
  3867  05F5  0873               	movf	___lwdiv@divisor+1,w
  3868  05F6  3BF5               	subwfb	___lwdiv@dividend+1,f
  3869  05F7  1477               	bsf	___lwdiv@quotient,0
  3870  05F8                     l1455:	
  3871  05F8  3001               	movlw	1
  3872  05F9                     u1115:	
  3873  05F9  36F3               	lsrf	___lwdiv@divisor+1,f
  3874  05FA  0CF2               	rrf	___lwdiv@divisor,f
  3875  05FB  0B89               	decfsz	9,f
  3876  05FC  2DF9               	goto	u1115
  3877  05FD  3001               	movlw	1
  3878  05FE  02F9               	subwf	___lwdiv@counter,f
  3879  05FF  1D03               	btfss	3,2
  3880  0600  2DE6               	goto	l1449
  3881  0601                     l1459:	
  3882  0601  0878               	movf	___lwdiv@quotient+1,w
  3883  0602  00F3               	movwf	?___lwdiv+1
  3884  0603  0877               	movf	___lwdiv@quotient,w
  3885  0604  00F2               	movwf	?___lwdiv
  3886  0605  0008               	return
  3887  0606                     __end_of___lwdiv:	
  3888                           
  3889                           	psect	text10
  3890  04A8                     __ptext10:	
  3891 ;; *************** function _blink_leds *****************
  3892 ;; Defined at:
  3893 ;;		line 44 in file "main.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;  n               2    2[COMMON] int 
  3896 ;;  c               2    4[COMMON] int 
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  i               2    8[COMMON] int 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  2    2[COMMON] int 
  3901 ;; Registers used:
  3902 ;;		wreg, status,2, status,0, pclath, cstack
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3908 ;;      Params:         4       0       0       0
  3909 ;;      Locals:         2       0       0       0
  3910 ;;      Temps:          2       0       0       0
  3911 ;;      Totals:         8       0       0       0
  3912 ;;Total ram usage:        8 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    3
  3915 ;; This function calls:
  3916 ;;		_set_low_leds
  3917 ;; This function is called by:
  3918 ;;		_main
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           
  3923                           ;psect for function _blink_leds
  3924  04A8                     _blink_leds:	
  3925                           
  3926                           ;main.c: 45: _delay((unsigned long)((640)*(8000000/4000.0)));
  3927                           
  3928                           ;incstack = 0
  3929                           ; Regs used in _blink_leds: [wreg+status,2+status,0+pclath+cstack]
  3930  04A8  3007               	movlw	7
  3931  04A9  00F7               	movwf	??_blink_leds+1
  3932  04AA  307F               	movlw	127
  3933  04AB  00F6               	movwf	??_blink_leds
  3934  04AC  3050               	movlw	80
  3935  04AD                     u2027:	
  3936  04AD  0B89               	decfsz	9,f
  3937  04AE  2CAD               	goto	u2027
  3938  04AF  0BF6               	decfsz	??_blink_leds,f
  3939  04B0  2CAD               	goto	u2027
  3940  04B1  0BF7               	decfsz	??_blink_leds+1,f
  3941  04B2  2CAD               	goto	u2027
  3942                           
  3943                           ;main.c: 46: for (int i = 0; i < n; ++i) {
  3944  04B3  01F8               	clrf	blink_leds@i
  3945  04B4  01F9               	clrf	blink_leds@i+1
  3946  04B5                     l233:	
  3947  04B5  0879               	movf	blink_leds@i+1,w
  3948  04B6  3A80               	xorlw	128
  3949  04B7  00F6               	movwf	??_blink_leds
  3950  04B8  0873               	movf	blink_leds@n+1,w
  3951  04B9  3A80               	xorlw	128
  3952  04BA  0276               	subwf	??_blink_leds,w
  3953  04BB  1D03               	skipz
  3954  04BC  2CBF               	goto	u1225
  3955  04BD  0872               	movf	blink_leds@n,w
  3956  04BE  0278               	subwf	blink_leds@i,w
  3957  04BF                     u1225:	
  3958  04BF  1803               	btfsc	3,0
  3959  04C0  2CF1               	goto	l1515
  3960                           
  3961                           ;main.c: 47: set_low_leds();
  3962  04C1  3187  2783  3184   	fcall	_set_low_leds
  3963                           
  3964                           ;main.c: 48: _delay((unsigned long)((128)*(8000000/4000.0)));
  3965  04C4  3002               	movlw	2
  3966  04C5  00F7               	movwf	??_blink_leds+1
  3967  04C6  304D               	movlw	77
  3968  04C7  00F6               	movwf	??_blink_leds
  3969  04C8  3074               	movlw	116
  3970  04C9                     u2037:	
  3971  04C9  0B89               	decfsz	9,f
  3972  04CA  2CC9               	goto	u2037
  3973  04CB  0BF6               	decfsz	??_blink_leds,f
  3974  04CC  2CC9               	goto	u2037
  3975  04CD  0BF7               	decfsz	??_blink_leds+1,f
  3976  04CE  2CC9               	goto	u2037
  3977  04CF  3200               	nop2
  3978                           
  3979                           ;main.c: 49: if (c & 0b00000001) do { LATAbits.LATA5 = 1; } while(0);
  3980  04D0  1C74               	btfss	blink_leds@c,0
  3981  04D1  2CD4               	goto	l235
  3982  04D2  0022               	movlb	2	; select bank2
  3983  04D3  168C               	bsf	12,5	;volatile
  3984  04D4                     l235:	
  3985                           
  3986                           ;main.c: 50: if (c & 0b00000010) do { LATAbits.LATA1 = 1; } while(0);
  3987  04D4  1CF4               	btfss	blink_leds@c,1
  3988  04D5  2CD8               	goto	l238
  3989  04D6  0022               	movlb	2	; select bank2
  3990  04D7  148C               	bsf	12,1	;volatile
  3991  04D8                     l238:	
  3992                           
  3993                           ;main.c: 51: if (c & 0b00000100) do { LATAbits.LATA2 = 1; } while(0);
  3994  04D8  1D74               	btfss	blink_leds@c,2
  3995  04D9  2CDC               	goto	l241
  3996  04DA  0022               	movlb	2	; select bank2
  3997  04DB  150C               	bsf	12,2	;volatile
  3998  04DC                     l241:	
  3999                           
  4000                           ;main.c: 52: if (c & 0b00001000) do { LATCbits.LATC5 = 1; } while(0);
  4001  04DC  1DF4               	btfss	blink_leds@c,3
  4002  04DD  2CE0               	goto	l1513
  4003  04DE  0022               	movlb	2	; select bank2
  4004  04DF  168E               	bsf	14,5	;volatile
  4005  04E0                     l1513:	
  4006                           
  4007                           ;main.c: 53: _delay((unsigned long)((128)*(8000000/4000.0)));
  4008  04E0  3002               	movlw	2
  4009  04E1  00F7               	movwf	??_blink_leds+1
  4010  04E2  304D               	movlw	77
  4011  04E3  00F6               	movwf	??_blink_leds
  4012  04E4  3074               	movlw	116
  4013  04E5                     u2047:	
  4014  04E5  0B89               	decfsz	9,f
  4015  04E6  2CE5               	goto	u2047
  4016  04E7  0BF6               	decfsz	??_blink_leds,f
  4017  04E8  2CE5               	goto	u2047
  4018  04E9  0BF7               	decfsz	??_blink_leds+1,f
  4019  04EA  2CE5               	goto	u2047
  4020  04EB  3200               	nop2
  4021  04EC  3001               	movlw	1
  4022  04ED  07F8               	addwf	blink_leds@i,f
  4023  04EE  3000               	movlw	0
  4024  04EF  3DF9               	addwfc	blink_leds@i+1,f
  4025  04F0  2CB5               	goto	l233
  4026  04F1                     l1515:	
  4027                           
  4028                           ;main.c: 54: }
  4029                           ;main.c: 55: set_low_leds();
  4030  04F1  3187  2783  3184   	fcall	_set_low_leds
  4031                           
  4032                           ;main.c: 56: _delay((unsigned long)((640)*(8000000/4000.0)));
  4033  04F4  3007               	movlw	7
  4034  04F5  00F7               	movwf	??_blink_leds+1
  4035  04F6  307F               	movlw	127
  4036  04F7  00F6               	movwf	??_blink_leds
  4037  04F8  3050               	movlw	80
  4038  04F9                     u2057:	
  4039  04F9  0B89               	decfsz	9,f
  4040  04FA  2CF9               	goto	u2057
  4041  04FB  0BF6               	decfsz	??_blink_leds,f
  4042  04FC  2CF9               	goto	u2057
  4043  04FD  0BF7               	decfsz	??_blink_leds+1,f
  4044  04FE  2CF9               	goto	u2057
  4045  04FF  0008               	return
  4046  0500                     __end_of_blink_leds:	
  4047                           ;main.c: 57: return (0);
  4048                           ;	Return value of _blink_leds is never used
  4049                           
  4050                           
  4051                           	psect	text11
  4052  0783                     __ptext11:	
  4053 ;; *************** function _set_low_leds *****************
  4054 ;; Defined at:
  4055 ;;		line 32 in file "main.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;		None
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;		None
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  2  221[None  ] int 
  4062 ;; Registers used:
  4063 ;;		None
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4069 ;;      Params:         0       0       0       0
  4070 ;;      Locals:         0       0       0       0
  4071 ;;      Temps:          0       0       0       0
  4072 ;;      Totals:         0       0       0       0
  4073 ;;Total ram usage:        0 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; Hardware stack levels required when called:    2
  4076 ;; This function calls:
  4077 ;;		Nothing
  4078 ;; This function is called by:
  4079 ;;		_blink_leds
  4080 ;;		_show_char_leds
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           
  4085                           ;psect for function _set_low_leds
  4086  0783                     _set_low_leds:	
  4087                           
  4088                           ;incstack = 0
  4089                           ; Regs used in _set_low_leds: []
  4090                           ;main.c: 33: do { LATAbits.LATA5 = 0; } while(0);
  4091  0783  0022               	movlb	2	; select bank2
  4092  0784  128C               	bcf	12,5	;volatile
  4093                           
  4094                           ;main.c: 34: do { LATAbits.LATA1 = 0; } while(0);
  4095  0785  108C               	bcf	12,1	;volatile
  4096                           
  4097                           ;main.c: 35: do { LATAbits.LATA2 = 0; } while(0);
  4098  0786  110C               	bcf	12,2	;volatile
  4099                           
  4100                           ;main.c: 36: do { LATCbits.LATC5 = 0; } while(0);
  4101  0787  128E               	bcf	14,5	;volatile
  4102  0788  0008               	return
  4103  0789                     __end_of_set_low_leds:	
  4104                           ;main.c: 37: return (0);
  4105                           ;	Return value of _set_low_leds is never used
  4106                           
  4107                           
  4108                           	psect	text12
  4109  054D                     __ptext12:	
  4110 ;; *************** function ___awmod *****************
  4111 ;; Defined at:
  4112 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  divisor         2    2[COMMON] int 
  4115 ;;  dividend        2    4[COMMON] int 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;  sign            1    8[COMMON] unsigned char 
  4118 ;;  counter         1    7[COMMON] unsigned char 
  4119 ;; Return value:  Size  Location     Type
  4120 ;;                  2    2[COMMON] int 
  4121 ;; Registers used:
  4122 ;;		wreg, status,2, status,0
  4123 ;; Tracked objects:
  4124 ;;		On entry : 0/0
  4125 ;;		On exit  : 0/0
  4126 ;;		Unchanged: 0/0
  4127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4128 ;;      Params:         4       0       0       0
  4129 ;;      Locals:         2       0       0       0
  4130 ;;      Temps:          1       0       0       0
  4131 ;;      Totals:         7       0       0       0
  4132 ;;Total ram usage:        7 bytes
  4133 ;; Hardware stack levels used:    1
  4134 ;; Hardware stack levels required when called:    2
  4135 ;; This function calls:
  4136 ;;		Nothing
  4137 ;; This function is called by:
  4138 ;;		_main
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           
  4143                           ;psect for function ___awmod
  4144  054D                     ___awmod:	
  4145                           
  4146                           ;incstack = 0
  4147                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4148  054D  01F8               	clrf	___awmod@sign
  4149  054E  1FF5               	btfss	___awmod@dividend+1,7
  4150  054F  2D57               	goto	l1633
  4151  0550  09F4               	comf	___awmod@dividend,f
  4152  0551  09F5               	comf	___awmod@dividend+1,f
  4153  0552  0AF4               	incf	___awmod@dividend,f
  4154  0553  1903               	skipnz
  4155  0554  0AF5               	incf	___awmod@dividend+1,f
  4156  0555  01F8               	clrf	___awmod@sign
  4157  0556  0AF8               	incf	___awmod@sign,f
  4158  0557                     l1633:	
  4159  0557  1FF3               	btfss	___awmod@divisor+1,7
  4160  0558  2D5E               	goto	l1637
  4161  0559  09F2               	comf	___awmod@divisor,f
  4162  055A  09F3               	comf	___awmod@divisor+1,f
  4163  055B  0AF2               	incf	___awmod@divisor,f
  4164  055C  1903               	skipnz
  4165  055D  0AF3               	incf	___awmod@divisor+1,f
  4166  055E                     l1637:	
  4167  055E  0872               	movf	___awmod@divisor,w
  4168  055F  0473               	iorwf	___awmod@divisor+1,w
  4169  0560  1903               	btfsc	3,2
  4170  0561  2D85               	goto	l1655
  4171  0562  01F7               	clrf	___awmod@counter
  4172  0563  0AF7               	incf	___awmod@counter,f
  4173  0564                     l1645:	
  4174  0564  1BF3               	btfsc	___awmod@divisor+1,7
  4175  0565  2D70               	goto	l1647
  4176  0566  3001               	movlw	1
  4177  0567                     u1445:	
  4178  0567  35F2               	lslf	___awmod@divisor,f
  4179  0568  0DF3               	rlf	___awmod@divisor+1,f
  4180  0569  0B89               	decfsz	9,f
  4181  056A  2D67               	goto	u1445
  4182  056B  3001               	movlw	1
  4183  056C  00F6               	movwf	??___awmod
  4184  056D  0876               	movf	??___awmod,w
  4185  056E  07F7               	addwf	___awmod@counter,f
  4186  056F  2D64               	goto	l1645
  4187  0570                     l1647:	
  4188  0570  0873               	movf	___awmod@divisor+1,w
  4189  0571  0275               	subwf	___awmod@dividend+1,w
  4190  0572  1D03               	skipz
  4191  0573  2D76               	goto	u1465
  4192  0574  0872               	movf	___awmod@divisor,w
  4193  0575  0274               	subwf	___awmod@dividend,w
  4194  0576                     u1465:	
  4195  0576  1C03               	skipc
  4196  0577  2D7C               	goto	l1651
  4197  0578  0872               	movf	___awmod@divisor,w
  4198  0579  02F4               	subwf	___awmod@dividend,f
  4199  057A  0873               	movf	___awmod@divisor+1,w
  4200  057B  3BF5               	subwfb	___awmod@dividend+1,f
  4201  057C                     l1651:	
  4202  057C  3001               	movlw	1
  4203  057D                     u1475:	
  4204  057D  36F3               	lsrf	___awmod@divisor+1,f
  4205  057E  0CF2               	rrf	___awmod@divisor,f
  4206  057F  0B89               	decfsz	9,f
  4207  0580  2D7D               	goto	u1475
  4208  0581  3001               	movlw	1
  4209  0582  02F7               	subwf	___awmod@counter,f
  4210  0583  1D03               	btfss	3,2
  4211  0584  2D70               	goto	l1647
  4212  0585                     l1655:	
  4213  0585  0878               	movf	___awmod@sign,w
  4214  0586  1903               	btfsc	3,2
  4215  0587  2D8D               	goto	l1659
  4216  0588  09F4               	comf	___awmod@dividend,f
  4217  0589  09F5               	comf	___awmod@dividend+1,f
  4218  058A  0AF4               	incf	___awmod@dividend,f
  4219  058B  1903               	skipnz
  4220  058C  0AF5               	incf	___awmod@dividend+1,f
  4221  058D                     l1659:	
  4222  058D  0875               	movf	___awmod@dividend+1,w
  4223  058E  00F3               	movwf	?___awmod+1
  4224  058F  0874               	movf	___awmod@dividend,w
  4225  0590  00F2               	movwf	?___awmod
  4226  0591  0008               	return
  4227  0592                     __end_of___awmod:	
  4228                           
  4229                           	psect	text13
  4230  0760                     __ptext13:	
  4231 ;; *************** function _SYSTEM_Initialize *****************
  4232 ;; Defined at:
  4233 ;;		line 68 in file "mcc_generated_files/mcc.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4247 ;;      Params:         0       0       0       0
  4248 ;;      Locals:         0       0       0       0
  4249 ;;      Temps:          0       0       0       0
  4250 ;;      Totals:         0       0       0       0
  4251 ;;Total ram usage:        0 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    3
  4254 ;; This function calls:
  4255 ;;		_ADC_Initialize
  4256 ;;		_EUSART_Initialize
  4257 ;;		_OSCILLATOR_Initialize
  4258 ;;		_PIN_MANAGER_Initialize
  4259 ;;		_WDT_Initialize
  4260 ;; This function is called by:
  4261 ;;		_main
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           
  4266                           ;psect for function _SYSTEM_Initialize
  4267  0760                     _SYSTEM_Initialize:	
  4268                           
  4269                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  4270                           
  4271                           ;incstack = 0
  4272                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4273  0760  3186  26F5  3187   	fcall	_PIN_MANAGER_Initialize
  4274                           
  4275                           ;mcc.c: 72: OSCILLATOR_Initialize();
  4276  0763  3187  278D  3187   	fcall	_OSCILLATOR_Initialize
  4277                           
  4278                           ;mcc.c: 73: WDT_Initialize();
  4279  0766  3187  2789  3187   	fcall	_WDT_Initialize
  4280                           
  4281                           ;mcc.c: 74: ADC_Initialize();
  4282  0769  3187  276F  3187   	fcall	_ADC_Initialize
  4283                           
  4284                           ;mcc.c: 75: EUSART_Initialize();
  4285  076C  3187  272D         	fcall	_EUSART_Initialize
  4286  076E  0008               	return
  4287  076F                     __end_of_SYSTEM_Initialize:	
  4288                           
  4289                           	psect	text14
  4290  0789                     __ptext14:	
  4291 ;; *************** function _WDT_Initialize *****************
  4292 ;; Defined at:
  4293 ;;		line 84 in file "mcc_generated_files/mcc.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;		None
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;		None
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		wreg
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4307 ;;      Params:         0       0       0       0
  4308 ;;      Locals:         0       0       0       0
  4309 ;;      Temps:          0       0       0       0
  4310 ;;      Totals:         0       0       0       0
  4311 ;;Total ram usage:        0 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:    2
  4314 ;; This function calls:
  4315 ;;		Nothing
  4316 ;; This function is called by:
  4317 ;;		_SYSTEM_Initialize
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           
  4322                           ;psect for function _WDT_Initialize
  4323  0789                     _WDT_Initialize:	
  4324                           
  4325                           ;mcc.c: 87: WDTCON = 0x16;
  4326                           
  4327                           ;incstack = 0
  4328                           ; Regs used in _WDT_Initialize: [wreg]
  4329  0789  3016               	movlw	22
  4330  078A  0021               	movlb	1	; select bank1
  4331  078B  0097               	movwf	23	;volatile
  4332  078C  0008               	return
  4333  078D                     __end_of_WDT_Initialize:	
  4334                           
  4335                           	psect	text15
  4336  06F5                     __ptext15:	
  4337 ;; *************** function _PIN_MANAGER_Initialize *****************
  4338 ;; Defined at:
  4339 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;		None
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4353 ;;      Params:         0       0       0       0
  4354 ;;      Locals:         0       0       0       0
  4355 ;;      Temps:          0       0       0       0
  4356 ;;      Totals:         0       0       0       0
  4357 ;;Total ram usage:        0 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    2
  4360 ;; This function calls:
  4361 ;;		Nothing
  4362 ;; This function is called by:
  4363 ;;		_SYSTEM_Initialize
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _PIN_MANAGER_Initialize
  4369  06F5                     _PIN_MANAGER_Initialize:	
  4370                           
  4371                           ;pin_manager.c: 56: LATA = 0x00;
  4372                           
  4373                           ;incstack = 0
  4374                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4375  06F5  0022               	movlb	2	; select bank2
  4376  06F6  018C               	clrf	12	;volatile
  4377                           
  4378                           ;pin_manager.c: 57: LATB = 0x00;
  4379  06F7  018D               	clrf	13	;volatile
  4380                           
  4381                           ;pin_manager.c: 58: LATC = 0x00;
  4382  06F8  018E               	clrf	14	;volatile
  4383                           
  4384                           ;pin_manager.c: 63: TRISA = 0x09;
  4385  06F9  3009               	movlw	9
  4386  06FA  0021               	movlb	1	; select bank1
  4387  06FB  008C               	movwf	12	;volatile
  4388                           
  4389                           ;pin_manager.c: 64: TRISB = 0x70;
  4390  06FC  3070               	movlw	112
  4391  06FD  008D               	movwf	13	;volatile
  4392                           
  4393                           ;pin_manager.c: 65: TRISC = 0xCF;
  4394  06FE  30CF               	movlw	207
  4395  06FF  008E               	movwf	14	;volatile
  4396                           
  4397                           ;pin_manager.c: 70: ANSELC = 0xCE;
  4398  0700  30CE               	movlw	206
  4399  0701  0023               	movlb	3	; select bank3
  4400  0702  008E               	movwf	14	;volatile
  4401                           
  4402                           ;pin_manager.c: 71: ANSELB = 0x10;
  4403  0703  3010               	movlw	16
  4404  0704  008D               	movwf	13	;volatile
  4405                           
  4406                           ;pin_manager.c: 72: ANSELA = 0x17;
  4407  0705  3017               	movlw	23
  4408  0706  008C               	movwf	12	;volatile
  4409                           
  4410                           ;pin_manager.c: 77: WPUB = 0xF0;
  4411  0707  30F0               	movlw	240
  4412  0708  0024               	movlb	4	; select bank4
  4413  0709  008D               	movwf	13	;volatile
  4414                           
  4415                           ;pin_manager.c: 78: WPUA = 0x3F;
  4416  070A  303F               	movlw	63
  4417  070B  008C               	movwf	12	;volatile
  4418                           
  4419                           ;pin_manager.c: 79: OPTION_REGbits.nWPUEN = 0;
  4420  070C  0021               	movlb	1	; select bank1
  4421  070D  1395               	bcf	21,7	;volatile
  4422                           
  4423                           ;pin_manager.c: 85: APFCON = 0x00;
  4424  070E  0022               	movlb	2	; select bank2
  4425  070F  019D               	clrf	29	;volatile
  4426  0710  0008               	return
  4427  0711                     __end_of_PIN_MANAGER_Initialize:	
  4428                           
  4429                           	psect	text16
  4430  078D                     __ptext16:	
  4431 ;; *************** function _OSCILLATOR_Initialize *****************
  4432 ;; Defined at:
  4433 ;;		line 78 in file "mcc_generated_files/mcc.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;		None
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4447 ;;      Params:         0       0       0       0
  4448 ;;      Locals:         0       0       0       0
  4449 ;;      Temps:          0       0       0       0
  4450 ;;      Totals:         0       0       0       0
  4451 ;;Total ram usage:        0 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    2
  4454 ;; This function calls:
  4455 ;;		Nothing
  4456 ;; This function is called by:
  4457 ;;		_SYSTEM_Initialize
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _OSCILLATOR_Initialize
  4463  078D                     _OSCILLATOR_Initialize:	
  4464                           
  4465                           ;mcc.c: 81: OSCCON = 0x70;
  4466                           
  4467                           ;incstack = 0
  4468                           ; Regs used in _OSCILLATOR_Initialize: [wreg]
  4469  078D  3070               	movlw	112
  4470  078E  0021               	movlb	1	; select bank1
  4471  078F  0099               	movwf	25	;volatile
  4472  0790  0008               	return
  4473  0791                     __end_of_OSCILLATOR_Initialize:	
  4474                           
  4475                           	psect	text17
  4476  072D                     __ptext17:	
  4477 ;; *************** function _EUSART_Initialize *****************
  4478 ;; Defined at:
  4479 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;		None
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  1    wreg      void 
  4486 ;; Registers used:
  4487 ;;		wreg, status,2
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4493 ;;      Params:         0       0       0       0
  4494 ;;      Locals:         0       0       0       0
  4495 ;;      Temps:          1       0       0       0
  4496 ;;      Totals:         1       0       0       0
  4497 ;;Total ram usage:        1 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    2
  4500 ;; This function calls:
  4501 ;;		Nothing
  4502 ;; This function is called by:
  4503 ;;		_SYSTEM_Initialize
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function _EUSART_Initialize
  4509  072D                     _EUSART_Initialize:	
  4510                           
  4511                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4515  072D  0021               	movlb	1	; select bank1
  4516  072E  1291               	bcf	17,5	;volatile
  4517                           
  4518                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4519  072F  1211               	bcf	17,4	;volatile
  4520                           
  4521                           ;eusart.c: 84: BAUDCON = 0x09;
  4522  0730  3009               	movlw	9
  4523  0731  0023               	movlb	3	; select bank3
  4524  0732  009F               	movwf	31	;volatile
  4525                           
  4526                           ;eusart.c: 87: RCSTA = 0x90;
  4527  0733  3090               	movlw	144
  4528  0734  009D               	movwf	29	;volatile
  4529                           
  4530                           ;eusart.c: 90: TXSTA = 0x24;
  4531  0735  3024               	movlw	36
  4532  0736  009E               	movwf	30	;volatile
  4533                           
  4534                           ;eusart.c: 93: SPBRGL = 0x10;
  4535  0737  3010               	movlw	16
  4536  0738  009B               	movwf	27	;volatile
  4537                           
  4538                           ;eusart.c: 96: SPBRGH = 0x00;
  4539  0739  019C               	clrf	28	;volatile
  4540                           
  4541                           ;eusart.c: 100: eusartTxHead = 0;
  4542  073A  01FB               	clrf	_eusartTxHead	;volatile
  4543                           
  4544                           ;eusart.c: 101: eusartTxTail = 0;
  4545  073B  01FA               	clrf	_eusartTxTail	;volatile
  4546                           
  4547                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4548  073C  3008               	movlw	8
  4549  073D  00F2               	movwf	??_EUSART_Initialize
  4550  073E  0872               	movf	??_EUSART_Initialize,w
  4551  073F  0020               	movlb	0	; select bank0
  4552  0740  00ED               	movwf	_eusartTxBufferRemaining	;volatile
  4553                           
  4554                           ;eusart.c: 104: eusartRxHead = 0;
  4555  0741  01EC               	clrf	_eusartRxHead	;volatile
  4556                           
  4557                           ;eusart.c: 105: eusartRxTail = 0;
  4558  0742  01EB               	clrf	_eusartRxTail	;volatile
  4559                           
  4560                           ;eusart.c: 106: eusartRxCount = 0;
  4561  0743  01EA               	clrf	_eusartRxCount	;volatile
  4562                           
  4563                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4564  0744  0021               	movlb	1	; select bank1
  4565  0745  1691               	bsf	17,5	;volatile
  4566  0746  0008               	return
  4567  0747                     __end_of_EUSART_Initialize:	
  4568                           
  4569                           	psect	text18
  4570  076F                     __ptext18:	
  4571 ;; *************** function _ADC_Initialize *****************
  4572 ;; Defined at:
  4573 ;;		line 64 in file "mcc_generated_files/adc.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;		None
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;		None
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  1    wreg      void 
  4580 ;; Registers used:
  4581 ;;		wreg, status,2
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4587 ;;      Params:         0       0       0       0
  4588 ;;      Locals:         0       0       0       0
  4589 ;;      Temps:          0       0       0       0
  4590 ;;      Totals:         0       0       0       0
  4591 ;;Total ram usage:        0 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    2
  4594 ;; This function calls:
  4595 ;;		Nothing
  4596 ;; This function is called by:
  4597 ;;		_SYSTEM_Initialize
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           
  4602                           ;psect for function _ADC_Initialize
  4603  076F                     _ADC_Initialize:	
  4604                           
  4605                           ;adc.c: 69: ADCON0 = 0x01;
  4606                           
  4607                           ;incstack = 0
  4608                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4609  076F  3001               	movlw	1
  4610  0770  0021               	movlb	1	; select bank1
  4611  0771  009D               	movwf	29	;volatile
  4612                           
  4613                           ;adc.c: 72: ADCON1 = 0x00;
  4614  0772  019E               	clrf	30	;volatile
  4615                           
  4616                           ;adc.c: 75: ADCON2 = 0x00;
  4617  0773  019F               	clrf	31	;volatile
  4618                           
  4619                           ;adc.c: 78: ADRESL = 0x00;
  4620  0774  019B               	clrf	27	;volatile
  4621                           
  4622                           ;adc.c: 81: ADRESH = 0x00;
  4623  0775  019C               	clrf	28	;volatile
  4624  0776  0008               	return
  4625  0777                     __end_of_ADC_Initialize:	
  4626                           
  4627                           	psect	text19
  4628  0747                     __ptext19:	
  4629 ;; *************** function _ADC_GetConversion *****************
  4630 ;; Defined at:
  4631 ;;		line 112 in file "mcc_generated_files/adc.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;  channel         1    wreg     enum E4101
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;  channel         1    5[COMMON] enum E4101
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  2    2[COMMON] unsigned int 
  4638 ;; Registers used:
  4639 ;;		wreg, status,2, status,0
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4645 ;;      Params:         2       0       0       0
  4646 ;;      Locals:         1       0       0       0
  4647 ;;      Temps:          1       0       0       0
  4648 ;;      Totals:         4       0       0       0
  4649 ;;Total ram usage:        4 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    2
  4652 ;; This function calls:
  4653 ;;		Nothing
  4654 ;; This function is called by:
  4655 ;;		_main
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           
  4660                           ;psect for function _ADC_GetConversion
  4661  0747                     _ADC_GetConversion:	
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4665                           ;ADC_GetConversion@channel stored from wreg
  4666  0747  00F5               	movwf	ADC_GetConversion@channel
  4667                           
  4668                           ;adc.c: 115: ADCON0bits.CHS = channel;
  4669  0748  0875               	movf	ADC_GetConversion@channel,w
  4670  0749  00F4               	movwf	??_ADC_GetConversion
  4671  074A  0DF4               	rlf	??_ADC_GetConversion,f
  4672  074B  0DF4               	rlf	??_ADC_GetConversion,f
  4673  074C  0021               	movlb	1	; select bank1
  4674  074D  081D               	movf	29,w	;volatile
  4675  074E  0674               	xorwf	??_ADC_GetConversion,w
  4676  074F  3983               	andlw	-125
  4677  0750  0674               	xorwf	??_ADC_GetConversion,w
  4678  0751  009D               	movwf	29	;volatile
  4679                           
  4680                           ;adc.c: 118: ADCON0bits.ADON = 1;
  4681  0752  141D               	bsf	29,0	;volatile
  4682                           
  4683                           ;adc.c: 120: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4684  0753  3003               	movlw	3
  4685  0754                     u2067:	
  4686  0754  0B89               	decfsz	9,f
  4687  0755  2F54               	goto	u2067
  4688  0756  0000               	nop
  4689                           
  4690                           ;adc.c: 123: ADCON0bits.GO_nDONE = 1;
  4691  0757  0021               	movlb	1	; select bank1
  4692  0758  149D               	bsf	29,1	;volatile
  4693  0759                     l151:	
  4694                           ;adc.c: 127: {
  4695                           
  4696                           ;adc.c: 126: while (ADCON0bits.GO_nDONE)
  4697                           
  4698  0759  189D               	btfsc	29,1	;volatile
  4699  075A  2F59               	goto	l151
  4700                           
  4701                           ;adc.c: 128: }
  4702                           ;adc.c: 130: return ((ADRESH << 8) + ADRESL);
  4703  075B  081C               	movf	28,w	;volatile
  4704  075C  00F3               	movwf	?_ADC_GetConversion+1
  4705  075D  081B               	movf	27,w	;volatile
  4706  075E  00F2               	movwf	?_ADC_GetConversion
  4707  075F  0008               	return
  4708  0760                     __end_of_ADC_GetConversion:	
  4709                           
  4710                           	psect	intentry
  4711  0004                     __pintentry:	
  4712 ;; *************** function _INTERRUPT_InterruptManager *****************
  4713 ;; Defined at:
  4714 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      void 
  4721 ;; Registers used:
  4722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4728 ;;      Params:         0       0       0       0
  4729 ;;      Locals:         0       0       0       0
  4730 ;;      Temps:          1       0       0       0
  4731 ;;      Totals:         1       0       0       0
  4732 ;;Total ram usage:        1 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    1
  4735 ;; This function calls:
  4736 ;;		_EUSART_Receive_ISR
  4737 ;;		_EUSART_Transmit_ISR
  4738 ;; This function is called by:
  4739 ;;		Interrupt level 1
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743  0004                     _INTERRUPT_InterruptManager:	
  4744                           
  4745                           ;incstack = 0
  4746  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4747                           
  4748                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4749  0005  3180               	pagesel	$
  4750  0006  0020               	movlb	0	; select bank0
  4751  0007  087F               	movf	127,w
  4752  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  4753                           
  4754                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4755  0009  1F0B               	btfss	11,6	;volatile
  4756  000A  2815               	goto	i1l167
  4757  000B  0021               	movlb	1	; select bank1
  4758  000C  1E11               	btfss	17,4	;volatile
  4759  000D  2815               	goto	i1l167
  4760  000E  0020               	movlb	0	; select bank0
  4761  000F  1E11               	btfss	17,4	;volatile
  4762  0010  2815               	goto	i1l167
  4763                           
  4764                           ;interrupt_manager.c: 55: {
  4765                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  4766  0011  3186  26BB  3180   	fcall	_EUSART_Transmit_ISR
  4767                           
  4768                           ;interrupt_manager.c: 57: }
  4769  0014  281F               	goto	i1l171
  4770  0015                     i1l167:	
  4771                           
  4772                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  4773  0015  1F0B               	btfss	11,6	;volatile
  4774  0016  281F               	goto	i1l171
  4775  0017  0021               	movlb	1	; select bank1
  4776  0018  1E91               	btfss	17,5	;volatile
  4777  0019  281F               	goto	i1l171
  4778  001A  0020               	movlb	0	; select bank0
  4779  001B  1E91               	btfss	17,5	;volatile
  4780  001C  281F               	goto	i1l171
  4781                           
  4782                           ;interrupt_manager.c: 59: {
  4783                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  4784  001D  3187  2711         	fcall	_EUSART_Receive_ISR
  4785  001F                     i1l171:	
  4786                           ;interrupt_manager.c: 62: else
  4787                           ;interrupt_manager.c: 63: {
  4788                           
  4789                           ;interrupt_manager.c: 61: }
  4790                           
  4791  001F  0871               	movf	??_INTERRUPT_InterruptManager,w
  4792  0020  0020               	movlb	0	; select bank0
  4793  0021  00FF               	movwf	127
  4794  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4795  0023  0009               	retfie
  4796  0024                     __end_of_INTERRUPT_InterruptManager:	
  4797                           
  4798                           	psect	text21
  4799  06BB                     __ptext21:	
  4800 ;; *************** function _EUSART_Transmit_ISR *****************
  4801 ;; Defined at:
  4802 ;;		line 155 in file "mcc_generated_files/eusart.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4816 ;;      Params:         0       0       0       0
  4817 ;;      Locals:         0       0       0       0
  4818 ;;      Temps:          1       0       0       0
  4819 ;;      Totals:         1       0       0       0
  4820 ;;Total ram usage:        1 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		_INTERRUPT_InterruptManager
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           
  4830                           ;psect for function _EUSART_Transmit_ISR
  4831  06BB                     _EUSART_Transmit_ISR:	
  4832                           
  4833                           ;eusart.c: 159: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4837  06BB  3008               	movlw	8
  4838  06BC  0020               	movlb	0	; select bank0
  4839  06BD  026D               	subwf	_eusartTxBufferRemaining,w	;volatile
  4840  06BE  1803               	skipnc
  4841  06BF  2ED6               	goto	i1l111
  4842                           
  4843                           ;eusart.c: 160: {
  4844                           ;eusart.c: 161: TXREG = eusartTxBuffer[eusartTxTail++];
  4845  06C0  087A               	movf	_eusartTxTail,w
  4846  06C1  3E68               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  4847  06C2  0086               	movwf	6
  4848  06C3  3001               	movlw	1	; select bank2/3
  4849  06C4  0087               	movwf	7
  4850  06C5  0801               	movf	1,w
  4851  06C6  0023               	movlb	3	; select bank3
  4852  06C7  009A               	movwf	26	;volatile
  4853  06C8  3001               	movlw	1
  4854  06C9  00F0               	movwf	??_EUSART_Transmit_ISR
  4855  06CA  0870               	movf	??_EUSART_Transmit_ISR,w
  4856  06CB  07FA               	addwf	_eusartTxTail,f	;volatile
  4857                           
  4858                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4859  06CC  3008               	movlw	8
  4860  06CD  027A               	subwf	_eusartTxTail,w	;volatile
  4861  06CE  1803               	btfsc	3,0
  4862                           
  4863                           ;eusart.c: 163: {
  4864                           ;eusart.c: 164: eusartTxTail = 0;
  4865  06CF  01FA               	clrf	_eusartTxTail	;volatile
  4866                           
  4867                           ;eusart.c: 165: }
  4868                           ;eusart.c: 166: eusartTxBufferRemaining++;
  4869  06D0  3001               	movlw	1
  4870  06D1  00F0               	movwf	??_EUSART_Transmit_ISR
  4871  06D2  0870               	movf	??_EUSART_Transmit_ISR,w
  4872  06D3  0020               	movlb	0	; select bank0
  4873  06D4  07ED               	addwf	_eusartTxBufferRemaining,f	;volatile
  4874                           
  4875                           ;eusart.c: 167: }
  4876  06D5  0008               	return
  4877  06D6                     i1l111:	
  4878                           
  4879                           ;eusart.c: 168: else
  4880                           ;eusart.c: 169: {
  4881                           ;eusart.c: 170: PIE1bits.TXIE = 0;
  4882  06D6  0021               	movlb	1	; select bank1
  4883  06D7  1211               	bcf	17,4	;volatile
  4884  06D8  0008               	return
  4885  06D9                     __end_of_EUSART_Transmit_ISR:	
  4886                           
  4887                           	psect	text22
  4888  0711                     __ptext22:	
  4889 ;; *************** function _EUSART_Receive_ISR *****************
  4890 ;; Defined at:
  4891 ;;		line 174 in file "mcc_generated_files/eusart.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;		None
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  1    wreg      void 
  4898 ;; Registers used:
  4899 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4905 ;;      Params:         0       0       0       0
  4906 ;;      Locals:         0       0       0       0
  4907 ;;      Temps:          1       0       0       0
  4908 ;;      Totals:         1       0       0       0
  4909 ;;Total ram usage:        1 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_INTERRUPT_InterruptManager
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           
  4919                           ;psect for function _EUSART_Receive_ISR
  4920  0711                     _EUSART_Receive_ISR:	
  4921                           
  4922                           ;eusart.c: 177: if(1 == RCSTAbits.OERR)
  4923                           
  4924                           ;incstack = 0
  4925                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4926  0711  0023               	movlb	3	; select bank3
  4927  0712  1C9D               	btfss	29,1	;volatile
  4928  0713  2F16               	goto	i1l1481
  4929                           
  4930                           ;eusart.c: 178: {
  4931                           ;eusart.c: 181: RCSTAbits.CREN = 0;
  4932  0714  121D               	bcf	29,4	;volatile
  4933                           
  4934                           ;eusart.c: 182: RCSTAbits.CREN = 1;
  4935  0715  161D               	bsf	29,4	;volatile
  4936  0716                     i1l1481:	
  4937                           
  4938                           ;eusart.c: 183: }
  4939                           ;eusart.c: 186: eusartRxBuffer[eusartRxHead++] = RCREG;
  4940  0716  0819               	movf	25,w	;volatile
  4941  0717  00F0               	movwf	??_EUSART_Receive_ISR
  4942  0718  0020               	movlb	0	; select bank0
  4943  0719  086C               	movf	_eusartRxHead,w
  4944  071A  3E60               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  4945  071B  0086               	movwf	6
  4946  071C  3001               	movlw	1	; select bank2/3
  4947  071D  0087               	movwf	7
  4948  071E  0870               	movf	??_EUSART_Receive_ISR,w
  4949  071F  0081               	movwf	1
  4950  0720  3001               	movlw	1
  4951  0721  00F0               	movwf	??_EUSART_Receive_ISR
  4952  0722  0870               	movf	??_EUSART_Receive_ISR,w
  4953  0723  07EC               	addwf	_eusartRxHead,f	;volatile
  4954                           
  4955                           ;eusart.c: 187: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4956  0724  3008               	movlw	8
  4957  0725  026C               	subwf	_eusartRxHead,w	;volatile
  4958  0726  1803               	btfsc	3,0
  4959                           
  4960                           ;eusart.c: 188: {
  4961                           ;eusart.c: 189: eusartRxHead = 0;
  4962  0727  01EC               	clrf	_eusartRxHead	;volatile
  4963                           
  4964                           ;eusart.c: 190: }
  4965                           ;eusart.c: 191: eusartRxCount++;
  4966  0728  3001               	movlw	1
  4967  0729  00F0               	movwf	??_EUSART_Receive_ISR
  4968  072A  0870               	movf	??_EUSART_Receive_ISR,w
  4969  072B  07EA               	addwf	_eusartRxCount,f	;volatile
  4970  072C  0008               	return
  4971  072D                     __end_of_EUSART_Receive_ISR:	
  4972  007E                     btemp	set	126	;btemp
  4973  007E                     int$flags	set	126
  4974  007E                     wtemp0	set	126


Data Sizes:
    Strings     285
    Constant    8
    Data        64
    BSS         23
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     74      78
    BANK1            80     72      74
    BANK2            80      0      80

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_29(CODE[4]), STR_24(CODE[4]), STR_22(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[7]), STR_17(CODE[4]), STR_15(CODE[4]), STR_13(CODE[4]), 
		 -> STR_11(CODE[4]), STR_9(CODE[4]), STR_7(CODE[4]), STR_5(CODE[4]), 
		 -> STR_3(CODE[4]), STR_1(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 4
		 -> main@result(BANK1[4]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_28(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> main@result(BANK1[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    write_and_wait@res	PTR unsigned char  size(2) Largest target is 7
		 -> STR_24(CODE[4]), STR_22(CODE[4]), STR_19(CODE[7]), STR_17(CODE[4]), 
		 -> STR_15(CODE[4]), STR_13(CODE[4]), STR_11(CODE[4]), STR_9(CODE[4]), 
		 -> STR_7(CODE[4]), STR_5(CODE[4]), STR_3(CODE[4]), 

    write_and_wait@line	PTR unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 

    write_and_wait@cmd	PTR unsigned char  size(2) Largest target is 48
		 -> STR_23(CODE[48]), STR_21(CODE[12]), STR_18(CODE[4]), STR_16(CODE[42]), 
		 -> STR_14(CODE[42]), STR_12(CODE[36]), STR_10(CODE[3]), STR_8(CODE[18]), 
		 -> STR_6(CODE[12]), STR_4(CODE[12]), STR_2(CODE[5]), 

    write_line@line	PTR unsigned char  size(2) Largest target is 64
		 -> STR_27(CODE[12]), main@command(BANK1[64]), STR_26(CODE[12]), STR_25(CODE[12]), 
		 -> STR_23(CODE[48]), STR_21(CODE[12]), STR_18(CODE[4]), STR_16(CODE[42]), 
		 -> STR_14(CODE[42]), STR_12(CODE[36]), STR_10(CODE[3]), STR_8(CODE[18]), 
		 -> STR_6(CODE[12]), STR_4(CODE[12]), STR_2(CODE[5]), 

    sp__read_line	PTR unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 


Critical Paths under _main in COMMON

    _main->_blink_leds
    _main->_strcmp
    _write_and_wait->_strcmp
    _write_line->_strcat
    _strcmp->_read_line
    _read_line->_EUSART_Read
    _sprintf->___lwdiv
    _SYSTEM_Initialize->_EUSART_Initialize

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _main->_write_and_wait
    _write_and_wait->_read_line
    _strcmp->_read_line

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                74    74      0    9156
                                             72 BANK0      2     2      0
                                              0 BANK1     72    72      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                            ___awmod
                         _blink_leds
                          _read_line
                            _sprintf
                             _strcat
                             _strcmp
                     _write_and_wait
                         _write_line
 ---------------------------------------------------------------------------------
 (1) _write_and_wait                                       6     2      4    3201
                                             66 BANK0      6     2      4
                          _read_line
                             _strcmp
                         _write_line
 ---------------------------------------------------------------------------------
 (1) _write_line                                           5     3      2     577
                                              6 COMMON     3     1      2
                                              0 BANK0      2     2      0
                       _EUSART_Write
                             _strcat (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               5     3      2     467
                                              5 COMMON     5     3      2
                          _read_line (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_line                                           67    67      0     367
                                              4 COMMON     1     1      0
                                              0 BANK0     66    66      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _strcat                                               4     3      1     208
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             24    20      4     793
                                              0 BANK0     16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _blink_leds                                           8     4      4    2310
                                              2 COMMON     8     4      4
                       _set_low_leds
 ---------------------------------------------------------------------------------
 (2) _set_low_leds                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     424
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   ___awmod
   _blink_leds
     _set_low_leds
   _read_line
     _EUSART_Read
   _sprintf
     ___lwdiv
   _strcat
   _strcmp
     _read_line (ARG)
       _EUSART_Read
   _write_and_wait
     _read_line
       _EUSART_Read
     _strcmp
       _read_line (ARG)
         _EUSART_Read
     _write_line
       _EUSART_Write
       _strcat (ARG)
   _write_line
     _EUSART_Write
     _strcat (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      F4       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4A      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     48      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      F4      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jun 02 15:59:40 2017

                        __CFG_CP$OFF 0000                          __CFG_LVP$ON 0000  
                                l105 0684                                  l151 0759  
                                l241 04DC                                  l233 04B5  
                                l235 04D4                                  l332 0276  
                                l238 04D8                                  l342 02CF  
                                l293 0500                                  l299 053C  
                       ___awmod@sign 0078                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       ?_EUSART_Read 0070                          main@command 00A0  
                               l1303 069D                                 l1401 052E  
                               l1407 054B                                 l1513 04E0  
                               l1433 0627                                 l1515 04F1  
                               l1603 0469                                 l1427 0608  
                               l1605 03FB                                 l1429 0610  
                               l1455 05F8                                 l1447 05DA  
                               l1607 04A3                                 l1615 0658  
                               l1633 0557                                 l1449 05E6  
                               l1617 0663                                 l1651 057C  
                               l1459 0601                                 l1571 041D  
                               l1619 066B                                 l1395 050C  
                               l1645 0564                                 l1637 055E  
                               l1647 0570                                 l1655 0585  
                               l1815 0679                                 l1911 0162  
                               l1593 0465                                 l1577 0435  
                               l1905 013F                                 l1659 058D  
                               l1587 0446                                 l1923 01A8  
                               l1829 0699                                 l1837 0630  
                               l1941 020C                                 l1917 0185  
                               l1839 0649                                 l1943 020F  
                               l1935 01E9                                 l1953 023D  
                               l1929 01C6                                 l1881 00B3  
                               l1971 02A9                                 l1875 0090  
                               l1957 024E                                 l1893 00F9  
                               l1869 006D                                 l1887 00D6  
                               l1899 011C                                 STR_1 03E3  
                               STR_2 03DA                                 STR_3 03EB  
                               STR_4 03BB                                 STR_5 03EB  
                               STR_6 03A3                                 STR_7 03EB  
                               STR_8 0380                                 STR_9 03EB  
                               u1005 052C                                 u1105 05F1  
                               u1115 05F9                                 u1225 04BF  
                               u2017 0254                                 u2027 04AD  
                               u1075 05DD                                 u2037 04C9  
                               _LATA 010C                                 _LATB 010D  
                               u2047 04E5                                 u1095 05E7  
                               _LATC 010E                                 u2057 04F9  
                               u2067 0754                                 u1355 045B  
                               u1445 0567                                 u1465 0576  
                               u1475 057D                                 u1980 028A  
                               u1965 0249                                 _WPUA 020C  
                               _WPUB 020D                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _main 0045  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               start 0024                        __CFG_MCLRE$ON 0000  
                      ?_EUSART_Write 0070       __size_of_OSCILLATOR_Initialize 0004  
      __end_of_OSCILLATOR_Initialize 0791                                ?_main 0070  
                              STR_10 03F2                                STR_11 03EB  
                              STR_20 03E3                                STR_12 035C  
                              STR_13 03EB                                STR_21 03C7  
                              STR_22 03EB                                STR_30 0392  
                              STR_14 0308                                STR_15 03EB  
                              STR_23 02D8                                STR_24 03EB  
                              STR_16 0332                                STR_17 03EB  
                              STR_25 03AF                        __CFG_WDTE$OFF 0000  
                              STR_26 03AF                                STR_18 03DF  
                              STR_27 03C7                                STR_19 03D3  
                              STR_28 03EF                      __end_of___awmod 0592  
                              STR_29 03E7                      __end_of___lwdiv 0606  
                              i1l111 06D6                                i1l171 001F  
                              i1l167 0015                                _RCREG 0199  
                              _RCSTA 019D                                _TRISA 008C  
                              _TRISB 008D                                _TRISC 008E  
                              _TXREG 019A                                _TXSTA 019E  
                     _WDT_Initialize 0789                                main@c 00E4  
                     write_line@line 0076                                status 0003  
                              wtemp0 007E                      __end_of_sprintf 04A8  
                    __initialization 0026                         __end_of_main 02D0  
                     ??_EUSART_Write 0072                     ??_write_and_wait 0066  
                     __CFG_LPBOR$OFF 0000          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 0068               __end_of_WDT_Initialize 078D  
                             _ADCON0 009D                               _ADCON1 009E  
                             _ADCON2 009F                               _ADRESH 009C  
                             _ADRESL 009B                               _APFCON 011D  
                             _ANSELA 018C                               _ANSELB 018D  
                             _ANSELC 018E                               i1l1481 0716  
                             _OSCCON 0099                               _SPBRGH 019C  
                             _SPBRGL 019B                               _WDTCON 0097  
                     __CFG_PWRTE$OFF 0000                       __CFG_STVREN$ON 0000  
                          ??___awmod 0076                            ??___lwdiv 0076  
                _EUSART_Transmit_ISR 06BB                   write_and_wait@line 0067  
                    ___awmod@divisor 0072                      ___awmod@counter 0077  
                             _strcat 0653                               _strcmp 0606  
                    ?_WDT_Initialize 0070             ADC_GetConversion@channel 0075  
                          ??_sprintf 0024                 ?_EUSART_Transmit_ISR 0070  
               __size_of_EUSART_Read 001F                    _SYSTEM_Initialize 0760  
            __end_of__initialization 0041                   ?_SYSTEM_Initialize 0070  
                     __pcstackCOMMON 0070                         __pidataBANK2 0592  
                ??_SYSTEM_Initialize 0073                       _OPTION_REGbits 0095  
          __end_of_SYSTEM_Initialize 076F                ??_EUSART_Transmit_ISR 0070  
                         __pbssBANK0 006A                           __pbssBANK1 00E8  
                         __pbssBANK2 0160                 __end_of_EUSART_Write 069C  
        __size_of_EUSART_Receive_ISR 001C                   __size_of_read_line 004D  
                         __pmaintext 0045                           __pintentry 0004  
                         _blink_leds 04A8                              _BAUDCON 019F  
            __size_of_ADC_Initialize 0008                              ?_strcat 0072  
                            ?_strcmp 0075                        _eusartRxCount 006A  
                            ___awmod 054D                              ___lwdiv 05D2  
                      ?_set_low_leds 0070                              __ptext1 06D9  
                            __ptext2 062D                              __ptext3 0678  
                            __ptext4 0606                              __ptext5 0500  
                            __ptext6 069C                              __ptext7 0653  
                            __ptext8 03F5                              __ptext9 05D2  
                    __size_of_strcat 0025                      __size_of_strcmp 0027  
                  __end_of_hexpowers 02D8                _OSCILLATOR_Initialize 078D  
                   ___awmod@dividend 0074                    __end_of_read_line 054D  
           ??_PIN_MANAGER_Initialize 0072           __size_of_SYSTEM_Initialize 000F  
                            main@err 00E6                              _sprintf 03F5  
                            clrloop0 077E                 end_of_initialization 0041  
                            init_ram 0777                              initloop 0778  
                  _EUSART_Initialize 072D                   ?_EUSART_Initialize 0070  
                          _RCSTAbits 019D                          ?_blink_leds 0072  
                     ??_set_low_leds 0072                         __pstringtext 02D0  
                            strcmp@r 0078                  ??_EUSART_Initialize 0072  
                   ??_WDT_Initialize 0072                            _PORTCbits 000E  
                   __CFG_FOSC$INTOSC 0000                __size_of_EUSART_Write 0024  
          __end_of_EUSART_Initialize 0747                           main@result 00E0  
                         _write_line 062D                         _EUSART_Write 0678  
                     _ADC_Initialize 076F               ?_OSCILLATOR_Initialize 0070  
                     __end_of_strcat 0678                       __end_of_strcmp 062D  
                start_initialization 0026      __size_of_PIN_MANAGER_Initialize 001C  
                      ??_EUSART_Read 0072              __size_of_write_and_wait 001C  
                __size_of_blink_leds 0058                    write_and_wait@cmd 0062  
                  write_and_wait@res 0064               __end_of_ADC_Initialize 0777  
                        __pdataBANK2 0120                           read_line@c 0020  
                         read_line@i 0060                             ??_strcat 0073  
                           ??_strcmp 0077          __end_of_EUSART_Transmit_ISR 06D9  
                        __pbssCOMMON 007A                            ___latbits 0001  
                          _adcResult 00E8                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                 __end_of_set_low_leds 0789  
         __end_of_EUSART_Receive_ISR 072D           __size_of_EUSART_Initialize 001A  
                        sprintf@flag 0028                          sprintf@prec 002D  
                __end_of_EUSART_Read 06BB                            __pnvBANK0 006D  
                   ___lwdiv@dividend 0074               _PIN_MANAGER_Initialize 06F5  
               EUSART_Read@readValue 0073                             ?___awmod 0072  
                           ?___lwdiv 0072                      ?_ADC_Initialize 0070  
                       _eusartRxHead 006C                         _eusartTxHead 007B  
                       _eusartRxTail 006B                         _eusartTxTail 007A  
                        ?_write_line 0076         ??_INTERRUPT_InterruptManager 0071  
            _eusartTxBufferRemaining 006D                            _hexpowers 02D0  
                   ___lwdiv@quotient 0077                             ?_sprintf 0020  
                          _read_line 0500                       _eusartRxBuffer 0160  
                     _eusartTxBuffer 0168                             _LATAbits 010C  
                           _LATCbits 010E                            clear_ram0 077D  
                           _PIE1bits 0091  __size_of_INTERRUPT_InterruptManager 0020  
                           _PIR1bits 0011                            main@F4456 0120  
                       ??_blink_leds 0076                           _ADCON0bits 009D  
                        write_line@i 0020                       _write_and_wait 06D9  
                        _EUSART_Read 069C                           ?_read_line 0070  
                 __end_of_blink_leds 0500                  __size_of_write_line 0026  
                  _ADC_GetConversion 0747              ??_OSCILLATOR_Initialize 0072  
                 ?_ADC_GetConversion 0072                     __size_of___awmod 0045  
                   __size_of___lwdiv 0034                  ??_ADC_GetConversion 0074  
                         sprintf@idx 0029               __end_of_write_and_wait 06F5  
                         sprintf@val 002B                           strcat@from 0072  
              __size_of_set_low_leds 0006                      ___lwdiv@divisor 0072  
                    ___lwdiv@counter 0079                             __ptext10 04A8  
                           __ptext11 0783                             __ptext12 054D  
                           __ptext21 06BB                             __ptext13 0760  
                           __ptext22 0711                             __ptext14 0789  
                           __ptext15 06F5                             __ptext16 078D  
                           __ptext17 072D                             __ptext18 076F  
                           __ptext19 0747                     __size_of_sprintf 00B3  
                      __size_of_main 028B            __end_of_ADC_GetConversion 0760  
                           int$flags 007E   __end_of_INTERRUPT_InterruptManager 0024  
         _INTERRUPT_InterruptManager 0004                         _set_low_leds 0783  
                    ?_write_and_wait 0062                           _INTCONbits 000B  
                        ??_read_line 0074              __size_of_WDT_Initialize 0004  
                           intlevel1 0000                            sprintf@ap 002A  
                          sprintf@sp 002E              ?_PIN_MANAGER_Initialize 0070  
                  __CFG_CLKOUTEN$OFF 0000                     ??_ADC_Initialize 0072  
                        blink_leds@c 0074                          blink_leds@i 0078  
                        blink_leds@n 0072                   _EUSART_Receive_ISR 0711  
                       ??_write_line 0078                             sprintf@c 002F  
                           sprintf@f 0020                  ?_EUSART_Receive_ISR 0070  
                           strcat@cp 0075                             strcat@to 0074  
                           strcmp@s1 0079                             strcmp@s2 0075  
                 EUSART_Write@txData 0073         __size_of_EUSART_Transmit_ISR 001E  
     __end_of_PIN_MANAGER_Initialize 0711                 ??_EUSART_Receive_ISR 0070  
                 __end_of_write_line 0653           __size_of_ADC_GetConversion 0019  
