

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jun 02 16:32:39 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.41
    43                           ; Generated 25/01/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F1508 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  0111                     	;# 
   124  0112                     	;# 
   125  0113                     	;# 
   126  0114                     	;# 
   127  0115                     	;# 
   128  0116                     	;# 
   129  0117                     	;# 
   130  0118                     	;# 
   131  0119                     	;# 
   132  011D                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  018E                     	;# 
   136  0191                     	;# 
   137  0191                     	;# 
   138  0192                     	;# 
   139  0193                     	;# 
   140  0193                     	;# 
   141  0194                     	;# 
   142  0195                     	;# 
   143  0196                     	;# 
   144  0197                     	;# 
   145  0199                     	;# 
   146  019A                     	;# 
   147  019B                     	;# 
   148  019B                     	;# 
   149  019C                     	;# 
   150  019D                     	;# 
   151  019E                     	;# 
   152  019F                     	;# 
   153  020C                     	;# 
   154  020D                     	;# 
   155  0211                     	;# 
   156  0211                     	;# 
   157  0212                     	;# 
   158  0212                     	;# 
   159  0213                     	;# 
   160  0213                     	;# 
   161  0214                     	;# 
   162  0214                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0216                     	;# 
   167  0216                     	;# 
   168  0217                     	;# 
   169  0217                     	;# 
   170  0391                     	;# 
   171  0392                     	;# 
   172  0393                     	;# 
   173  0394                     	;# 
   174  0395                     	;# 
   175  0396                     	;# 
   176  0498                     	;# 
   177  0498                     	;# 
   178  0499                     	;# 
   179  049A                     	;# 
   180  049B                     	;# 
   181  049B                     	;# 
   182  049C                     	;# 
   183  049D                     	;# 
   184  049E                     	;# 
   185  049F                     	;# 
   186  0611                     	;# 
   187  0612                     	;# 
   188  0613                     	;# 
   189  0613                     	;# 
   190  0614                     	;# 
   191  0615                     	;# 
   192  0616                     	;# 
   193  0616                     	;# 
   194  0617                     	;# 
   195  0618                     	;# 
   196  0619                     	;# 
   197  0619                     	;# 
   198  061A                     	;# 
   199  061B                     	;# 
   200  061C                     	;# 
   201  061C                     	;# 
   202  0691                     	;# 
   203  0692                     	;# 
   204  0693                     	;# 
   205  0694                     	;# 
   206  0695                     	;# 
   207  0F0F                     	;# 
   208  0F10                     	;# 
   209  0F11                     	;# 
   210  0F12                     	;# 
   211  0F13                     	;# 
   212  0F14                     	;# 
   213  0F15                     	;# 
   214  0F16                     	;# 
   215  0F17                     	;# 
   216  0F18                     	;# 
   217  0F19                     	;# 
   218  0F1A                     	;# 
   219  0F1B                     	;# 
   220  0F1C                     	;# 
   221  0F1D                     	;# 
   222  0F1E                     	;# 
   223  0F1F                     	;# 
   224  0F20                     	;# 
   225  0F21                     	;# 
   226  0F22                     	;# 
   227  0F23                     	;# 
   228  0F24                     	;# 
   229  0F25                     	;# 
   230  0F26                     	;# 
   231  0F27                     	;# 
   232  0F28                     	;# 
   233  0F29                     	;# 
   234  0F2A                     	;# 
   235  0F2B                     	;# 
   236  0F2C                     	;# 
   237  0F2D                     	;# 
   238  0F2E                     	;# 
   239  0F2F                     	;# 
   240  0F8C                     	;# 
   241  0F8D                     	;# 
   242  0F91                     	;# 
   243  0F95                     	;# 
   244  0F96                     	;# 
   245  0F97                     	;# 
   246  0F9C                     	;# 
   247  0F9D                     	;# 
   248  0F9E                     	;# 
   249  0FE3                     	;# 
   250  0FE4                     	;# 
   251  0FE5                     	;# 
   252  0FE6                     	;# 
   253  0FE7                     	;# 
   254  0FE8                     	;# 
   255  0FE9                     	;# 
   256  0FEA                     	;# 
   257  0FEB                     	;# 
   258  0FED                     	;# 
   259  0FEE                     	;# 
   260  0FEF                     	;# 
   261  0000                     	;# 
   262  0001                     	;# 
   263  0002                     	;# 
   264  0003                     	;# 
   265  0004                     	;# 
   266  0005                     	;# 
   267  0006                     	;# 
   268  0007                     	;# 
   269  0008                     	;# 
   270  0009                     	;# 
   271  000A                     	;# 
   272  000B                     	;# 
   273  000C                     	;# 
   274  000D                     	;# 
   275  000E                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0015                     	;# 
   280  0016                     	;# 
   281  0016                     	;# 
   282  0017                     	;# 
   283  0018                     	;# 
   284  0019                     	;# 
   285  001A                     	;# 
   286  001B                     	;# 
   287  001C                     	;# 
   288  008C                     	;# 
   289  008D                     	;# 
   290  008E                     	;# 
   291  0091                     	;# 
   292  0092                     	;# 
   293  0093                     	;# 
   294  0095                     	;# 
   295  0096                     	;# 
   296  0097                     	;# 
   297  0099                     	;# 
   298  009A                     	;# 
   299  009B                     	;# 
   300  009B                     	;# 
   301  009C                     	;# 
   302  009D                     	;# 
   303  009E                     	;# 
   304  009F                     	;# 
   305  010C                     	;# 
   306  010D                     	;# 
   307  010E                     	;# 
   308  0111                     	;# 
   309  0112                     	;# 
   310  0113                     	;# 
   311  0114                     	;# 
   312  0115                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  0118                     	;# 
   316  0119                     	;# 
   317  011D                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  018E                     	;# 
   321  0191                     	;# 
   322  0191                     	;# 
   323  0192                     	;# 
   324  0193                     	;# 
   325  0193                     	;# 
   326  0194                     	;# 
   327  0195                     	;# 
   328  0196                     	;# 
   329  0197                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020C                     	;# 
   339  020D                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0391                     	;# 
   356  0392                     	;# 
   357  0393                     	;# 
   358  0394                     	;# 
   359  0395                     	;# 
   360  0396                     	;# 
   361  0498                     	;# 
   362  0498                     	;# 
   363  0499                     	;# 
   364  049A                     	;# 
   365  049B                     	;# 
   366  049B                     	;# 
   367  049C                     	;# 
   368  049D                     	;# 
   369  049E                     	;# 
   370  049F                     	;# 
   371  0611                     	;# 
   372  0612                     	;# 
   373  0613                     	;# 
   374  0613                     	;# 
   375  0614                     	;# 
   376  0615                     	;# 
   377  0616                     	;# 
   378  0616                     	;# 
   379  0617                     	;# 
   380  0618                     	;# 
   381  0619                     	;# 
   382  0619                     	;# 
   383  061A                     	;# 
   384  061B                     	;# 
   385  061C                     	;# 
   386  061C                     	;# 
   387  0691                     	;# 
   388  0692                     	;# 
   389  0693                     	;# 
   390  0694                     	;# 
   391  0695                     	;# 
   392  0F0F                     	;# 
   393  0F10                     	;# 
   394  0F11                     	;# 
   395  0F12                     	;# 
   396  0F13                     	;# 
   397  0F14                     	;# 
   398  0F15                     	;# 
   399  0F16                     	;# 
   400  0F17                     	;# 
   401  0F18                     	;# 
   402  0F19                     	;# 
   403  0F1A                     	;# 
   404  0F1B                     	;# 
   405  0F1C                     	;# 
   406  0F1D                     	;# 
   407  0F1E                     	;# 
   408  0F1F                     	;# 
   409  0F20                     	;# 
   410  0F21                     	;# 
   411  0F22                     	;# 
   412  0F23                     	;# 
   413  0F24                     	;# 
   414  0F25                     	;# 
   415  0F26                     	;# 
   416  0F27                     	;# 
   417  0F28                     	;# 
   418  0F29                     	;# 
   419  0F2A                     	;# 
   420  0F2B                     	;# 
   421  0F2C                     	;# 
   422  0F2D                     	;# 
   423  0F2E                     	;# 
   424  0F2F                     	;# 
   425  0F8C                     	;# 
   426  0F8D                     	;# 
   427  0F91                     	;# 
   428  0F95                     	;# 
   429  0F96                     	;# 
   430  0F97                     	;# 
   431  0F9C                     	;# 
   432  0F9D                     	;# 
   433  0F9E                     	;# 
   434  0FE3                     	;# 
   435  0FE4                     	;# 
   436  0FE5                     	;# 
   437  0FE6                     	;# 
   438  0FE7                     	;# 
   439  0FE8                     	;# 
   440  0FE9                     	;# 
   441  0FEA                     	;# 
   442  0FEB                     	;# 
   443  0FED                     	;# 
   444  0FEE                     	;# 
   445  0FEF                     	;# 
   446  0000                     	;# 
   447  0001                     	;# 
   448  0002                     	;# 
   449  0003                     	;# 
   450  0004                     	;# 
   451  0005                     	;# 
   452  0006                     	;# 
   453  0007                     	;# 
   454  0008                     	;# 
   455  0009                     	;# 
   456  000A                     	;# 
   457  000B                     	;# 
   458  000C                     	;# 
   459  000D                     	;# 
   460  000E                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  008C                     	;# 
   474  008D                     	;# 
   475  008E                     	;# 
   476  0091                     	;# 
   477  0092                     	;# 
   478  0093                     	;# 
   479  0095                     	;# 
   480  0096                     	;# 
   481  0097                     	;# 
   482  0099                     	;# 
   483  009A                     	;# 
   484  009B                     	;# 
   485  009B                     	;# 
   486  009C                     	;# 
   487  009D                     	;# 
   488  009E                     	;# 
   489  009F                     	;# 
   490  010C                     	;# 
   491  010D                     	;# 
   492  010E                     	;# 
   493  0111                     	;# 
   494  0112                     	;# 
   495  0113                     	;# 
   496  0114                     	;# 
   497  0115                     	;# 
   498  0116                     	;# 
   499  0117                     	;# 
   500  0118                     	;# 
   501  0119                     	;# 
   502  011D                     	;# 
   503  018C                     	;# 
   504  018D                     	;# 
   505  018E                     	;# 
   506  0191                     	;# 
   507  0191                     	;# 
   508  0192                     	;# 
   509  0193                     	;# 
   510  0193                     	;# 
   511  0194                     	;# 
   512  0195                     	;# 
   513  0196                     	;# 
   514  0197                     	;# 
   515  0199                     	;# 
   516  019A                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019C                     	;# 
   520  019D                     	;# 
   521  019E                     	;# 
   522  019F                     	;# 
   523  020C                     	;# 
   524  020D                     	;# 
   525  0211                     	;# 
   526  0211                     	;# 
   527  0212                     	;# 
   528  0212                     	;# 
   529  0213                     	;# 
   530  0213                     	;# 
   531  0214                     	;# 
   532  0214                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0216                     	;# 
   537  0216                     	;# 
   538  0217                     	;# 
   539  0217                     	;# 
   540  0391                     	;# 
   541  0392                     	;# 
   542  0393                     	;# 
   543  0394                     	;# 
   544  0395                     	;# 
   545  0396                     	;# 
   546  0498                     	;# 
   547  0498                     	;# 
   548  0499                     	;# 
   549  049A                     	;# 
   550  049B                     	;# 
   551  049B                     	;# 
   552  049C                     	;# 
   553  049D                     	;# 
   554  049E                     	;# 
   555  049F                     	;# 
   556  0611                     	;# 
   557  0612                     	;# 
   558  0613                     	;# 
   559  0613                     	;# 
   560  0614                     	;# 
   561  0615                     	;# 
   562  0616                     	;# 
   563  0616                     	;# 
   564  0617                     	;# 
   565  0618                     	;# 
   566  0619                     	;# 
   567  0619                     	;# 
   568  061A                     	;# 
   569  061B                     	;# 
   570  061C                     	;# 
   571  061C                     	;# 
   572  0691                     	;# 
   573  0692                     	;# 
   574  0693                     	;# 
   575  0694                     	;# 
   576  0695                     	;# 
   577  0F0F                     	;# 
   578  0F10                     	;# 
   579  0F11                     	;# 
   580  0F12                     	;# 
   581  0F13                     	;# 
   582  0F14                     	;# 
   583  0F15                     	;# 
   584  0F16                     	;# 
   585  0F17                     	;# 
   586  0F18                     	;# 
   587  0F19                     	;# 
   588  0F1A                     	;# 
   589  0F1B                     	;# 
   590  0F1C                     	;# 
   591  0F1D                     	;# 
   592  0F1E                     	;# 
   593  0F1F                     	;# 
   594  0F20                     	;# 
   595  0F21                     	;# 
   596  0F22                     	;# 
   597  0F23                     	;# 
   598  0F24                     	;# 
   599  0F25                     	;# 
   600  0F26                     	;# 
   601  0F27                     	;# 
   602  0F28                     	;# 
   603  0F29                     	;# 
   604  0F2A                     	;# 
   605  0F2B                     	;# 
   606  0F2C                     	;# 
   607  0F2D                     	;# 
   608  0F2E                     	;# 
   609  0F2F                     	;# 
   610  0F8C                     	;# 
   611  0F8D                     	;# 
   612  0F91                     	;# 
   613  0F95                     	;# 
   614  0F96                     	;# 
   615  0F97                     	;# 
   616  0F9C                     	;# 
   617  0F9D                     	;# 
   618  0F9E                     	;# 
   619  0FE3                     	;# 
   620  0FE4                     	;# 
   621  0FE5                     	;# 
   622  0FE6                     	;# 
   623  0FE7                     	;# 
   624  0FE8                     	;# 
   625  0FE9                     	;# 
   626  0FEA                     	;# 
   627  0FEB                     	;# 
   628  0FED                     	;# 
   629  0FEE                     	;# 
   630  0FEF                     	;# 
   631  0000                     	;# 
   632  0001                     	;# 
   633  0002                     	;# 
   634  0003                     	;# 
   635  0004                     	;# 
   636  0005                     	;# 
   637  0006                     	;# 
   638  0007                     	;# 
   639  0008                     	;# 
   640  0009                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  0011                     	;# 
   647  0012                     	;# 
   648  0013                     	;# 
   649  0015                     	;# 
   650  0016                     	;# 
   651  0016                     	;# 
   652  0017                     	;# 
   653  0018                     	;# 
   654  0019                     	;# 
   655  001A                     	;# 
   656  001B                     	;# 
   657  001C                     	;# 
   658  008C                     	;# 
   659  008D                     	;# 
   660  008E                     	;# 
   661  0091                     	;# 
   662  0092                     	;# 
   663  0093                     	;# 
   664  0095                     	;# 
   665  0096                     	;# 
   666  0097                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009B                     	;# 
   671  009C                     	;# 
   672  009D                     	;# 
   673  009E                     	;# 
   674  009F                     	;# 
   675  010C                     	;# 
   676  010D                     	;# 
   677  010E                     	;# 
   678  0111                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0115                     	;# 
   683  0116                     	;# 
   684  0117                     	;# 
   685  0118                     	;# 
   686  0119                     	;# 
   687  011D                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0194                     	;# 
   697  0195                     	;# 
   698  0196                     	;# 
   699  0197                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019B                     	;# 
   703  019B                     	;# 
   704  019C                     	;# 
   705  019D                     	;# 
   706  019E                     	;# 
   707  019F                     	;# 
   708  020C                     	;# 
   709  020D                     	;# 
   710  0211                     	;# 
   711  0211                     	;# 
   712  0212                     	;# 
   713  0212                     	;# 
   714  0213                     	;# 
   715  0213                     	;# 
   716  0214                     	;# 
   717  0214                     	;# 
   718  0215                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0216                     	;# 
   722  0216                     	;# 
   723  0217                     	;# 
   724  0217                     	;# 
   725  0391                     	;# 
   726  0392                     	;# 
   727  0393                     	;# 
   728  0394                     	;# 
   729  0395                     	;# 
   730  0396                     	;# 
   731  0498                     	;# 
   732  0498                     	;# 
   733  0499                     	;# 
   734  049A                     	;# 
   735  049B                     	;# 
   736  049B                     	;# 
   737  049C                     	;# 
   738  049D                     	;# 
   739  049E                     	;# 
   740  049F                     	;# 
   741  0611                     	;# 
   742  0612                     	;# 
   743  0613                     	;# 
   744  0613                     	;# 
   745  0614                     	;# 
   746  0615                     	;# 
   747  0616                     	;# 
   748  0616                     	;# 
   749  0617                     	;# 
   750  0618                     	;# 
   751  0619                     	;# 
   752  0619                     	;# 
   753  061A                     	;# 
   754  061B                     	;# 
   755  061C                     	;# 
   756  061C                     	;# 
   757  0691                     	;# 
   758  0692                     	;# 
   759  0693                     	;# 
   760  0694                     	;# 
   761  0695                     	;# 
   762  0F0F                     	;# 
   763  0F10                     	;# 
   764  0F11                     	;# 
   765  0F12                     	;# 
   766  0F13                     	;# 
   767  0F14                     	;# 
   768  0F15                     	;# 
   769  0F16                     	;# 
   770  0F17                     	;# 
   771  0F18                     	;# 
   772  0F19                     	;# 
   773  0F1A                     	;# 
   774  0F1B                     	;# 
   775  0F1C                     	;# 
   776  0F1D                     	;# 
   777  0F1E                     	;# 
   778  0F1F                     	;# 
   779  0F20                     	;# 
   780  0F21                     	;# 
   781  0F22                     	;# 
   782  0F23                     	;# 
   783  0F24                     	;# 
   784  0F25                     	;# 
   785  0F26                     	;# 
   786  0F27                     	;# 
   787  0F28                     	;# 
   788  0F29                     	;# 
   789  0F2A                     	;# 
   790  0F2B                     	;# 
   791  0F2C                     	;# 
   792  0F2D                     	;# 
   793  0F2E                     	;# 
   794  0F2F                     	;# 
   795  0F8C                     	;# 
   796  0F8D                     	;# 
   797  0F91                     	;# 
   798  0F95                     	;# 
   799  0F96                     	;# 
   800  0F97                     	;# 
   801  0F9C                     	;# 
   802  0F9D                     	;# 
   803  0F9E                     	;# 
   804  0FE3                     	;# 
   805  0FE4                     	;# 
   806  0FE5                     	;# 
   807  0FE6                     	;# 
   808  0FE7                     	;# 
   809  0FE8                     	;# 
   810  0FE9                     	;# 
   811  0FEA                     	;# 
   812  0FEB                     	;# 
   813  0FED                     	;# 
   814  0FEE                     	;# 
   815  0FEF                     	;# 
   816  0000                     	;# 
   817  0001                     	;# 
   818  0002                     	;# 
   819  0003                     	;# 
   820  0004                     	;# 
   821  0005                     	;# 
   822  0006                     	;# 
   823  0007                     	;# 
   824  0008                     	;# 
   825  0009                     	;# 
   826  000A                     	;# 
   827  000B                     	;# 
   828  000C                     	;# 
   829  000D                     	;# 
   830  000E                     	;# 
   831  0011                     	;# 
   832  0012                     	;# 
   833  0013                     	;# 
   834  0015                     	;# 
   835  0016                     	;# 
   836  0016                     	;# 
   837  0017                     	;# 
   838  0018                     	;# 
   839  0019                     	;# 
   840  001A                     	;# 
   841  001B                     	;# 
   842  001C                     	;# 
   843  008C                     	;# 
   844  008D                     	;# 
   845  008E                     	;# 
   846  0091                     	;# 
   847  0092                     	;# 
   848  0093                     	;# 
   849  0095                     	;# 
   850  0096                     	;# 
   851  0097                     	;# 
   852  0099                     	;# 
   853  009A                     	;# 
   854  009B                     	;# 
   855  009B                     	;# 
   856  009C                     	;# 
   857  009D                     	;# 
   858  009E                     	;# 
   859  009F                     	;# 
   860  010C                     	;# 
   861  010D                     	;# 
   862  010E                     	;# 
   863  0111                     	;# 
   864  0112                     	;# 
   865  0113                     	;# 
   866  0114                     	;# 
   867  0115                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  0118                     	;# 
   871  0119                     	;# 
   872  011D                     	;# 
   873  018C                     	;# 
   874  018D                     	;# 
   875  018E                     	;# 
   876  0191                     	;# 
   877  0191                     	;# 
   878  0192                     	;# 
   879  0193                     	;# 
   880  0193                     	;# 
   881  0194                     	;# 
   882  0195                     	;# 
   883  0196                     	;# 
   884  0197                     	;# 
   885  0199                     	;# 
   886  019A                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020C                     	;# 
   894  020D                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0391                     	;# 
   911  0392                     	;# 
   912  0393                     	;# 
   913  0394                     	;# 
   914  0395                     	;# 
   915  0396                     	;# 
   916  0498                     	;# 
   917  0498                     	;# 
   918  0499                     	;# 
   919  049A                     	;# 
   920  049B                     	;# 
   921  049B                     	;# 
   922  049C                     	;# 
   923  049D                     	;# 
   924  049E                     	;# 
   925  049F                     	;# 
   926  0611                     	;# 
   927  0612                     	;# 
   928  0613                     	;# 
   929  0613                     	;# 
   930  0614                     	;# 
   931  0615                     	;# 
   932  0616                     	;# 
   933  0616                     	;# 
   934  0617                     	;# 
   935  0618                     	;# 
   936  0619                     	;# 
   937  0619                     	;# 
   938  061A                     	;# 
   939  061B                     	;# 
   940  061C                     	;# 
   941  061C                     	;# 
   942  0691                     	;# 
   943  0692                     	;# 
   944  0693                     	;# 
   945  0694                     	;# 
   946  0695                     	;# 
   947  0F0F                     	;# 
   948  0F10                     	;# 
   949  0F11                     	;# 
   950  0F12                     	;# 
   951  0F13                     	;# 
   952  0F14                     	;# 
   953  0F15                     	;# 
   954  0F16                     	;# 
   955  0F17                     	;# 
   956  0F18                     	;# 
   957  0F19                     	;# 
   958  0F1A                     	;# 
   959  0F1B                     	;# 
   960  0F1C                     	;# 
   961  0F1D                     	;# 
   962  0F1E                     	;# 
   963  0F1F                     	;# 
   964  0F20                     	;# 
   965  0F21                     	;# 
   966  0F22                     	;# 
   967  0F23                     	;# 
   968  0F24                     	;# 
   969  0F25                     	;# 
   970  0F26                     	;# 
   971  0F27                     	;# 
   972  0F28                     	;# 
   973  0F29                     	;# 
   974  0F2A                     	;# 
   975  0F2B                     	;# 
   976  0F2C                     	;# 
   977  0F2D                     	;# 
   978  0F2E                     	;# 
   979  0F2F                     	;# 
   980  0F8C                     	;# 
   981  0F8D                     	;# 
   982  0F91                     	;# 
   983  0F95                     	;# 
   984  0F96                     	;# 
   985  0F97                     	;# 
   986  0F9C                     	;# 
   987  0F9D                     	;# 
   988  0F9E                     	;# 
   989  0FE3                     	;# 
   990  0FE4                     	;# 
   991  0FE5                     	;# 
   992  0FE6                     	;# 
   993  0FE7                     	;# 
   994  0FE8                     	;# 
   995  0FE9                     	;# 
   996  0FEA                     	;# 
   997  0FEB                     	;# 
   998  0FED                     	;# 
   999  0FEE                     	;# 
  1000  0FEF                     	;# 
  1001  0000                     	;# 
  1002  0001                     	;# 
  1003  0002                     	;# 
  1004  0003                     	;# 
  1005  0004                     	;# 
  1006  0005                     	;# 
  1007  0006                     	;# 
  1008  0007                     	;# 
  1009  0008                     	;# 
  1010  0009                     	;# 
  1011  000A                     	;# 
  1012  000B                     	;# 
  1013  000C                     	;# 
  1014  000D                     	;# 
  1015  000E                     	;# 
  1016  0011                     	;# 
  1017  0012                     	;# 
  1018  0013                     	;# 
  1019  0015                     	;# 
  1020  0016                     	;# 
  1021  0016                     	;# 
  1022  0017                     	;# 
  1023  0018                     	;# 
  1024  0019                     	;# 
  1025  001A                     	;# 
  1026  001B                     	;# 
  1027  001C                     	;# 
  1028  008C                     	;# 
  1029  008D                     	;# 
  1030  008E                     	;# 
  1031  0091                     	;# 
  1032  0092                     	;# 
  1033  0093                     	;# 
  1034  0095                     	;# 
  1035  0096                     	;# 
  1036  0097                     	;# 
  1037  0099                     	;# 
  1038  009A                     	;# 
  1039  009B                     	;# 
  1040  009B                     	;# 
  1041  009C                     	;# 
  1042  009D                     	;# 
  1043  009E                     	;# 
  1044  009F                     	;# 
  1045  010C                     	;# 
  1046  010D                     	;# 
  1047  010E                     	;# 
  1048  0111                     	;# 
  1049  0112                     	;# 
  1050  0113                     	;# 
  1051  0114                     	;# 
  1052  0115                     	;# 
  1053  0116                     	;# 
  1054  0117                     	;# 
  1055  0118                     	;# 
  1056  0119                     	;# 
  1057  011D                     	;# 
  1058  018C                     	;# 
  1059  018D                     	;# 
  1060  018E                     	;# 
  1061  0191                     	;# 
  1062  0191                     	;# 
  1063  0192                     	;# 
  1064  0193                     	;# 
  1065  0193                     	;# 
  1066  0194                     	;# 
  1067  0195                     	;# 
  1068  0196                     	;# 
  1069  0197                     	;# 
  1070  0199                     	;# 
  1071  019A                     	;# 
  1072  019B                     	;# 
  1073  019B                     	;# 
  1074  019C                     	;# 
  1075  019D                     	;# 
  1076  019E                     	;# 
  1077  019F                     	;# 
  1078  020C                     	;# 
  1079  020D                     	;# 
  1080  0211                     	;# 
  1081  0211                     	;# 
  1082  0212                     	;# 
  1083  0212                     	;# 
  1084  0213                     	;# 
  1085  0213                     	;# 
  1086  0214                     	;# 
  1087  0214                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0215                     	;# 
  1091  0216                     	;# 
  1092  0216                     	;# 
  1093  0217                     	;# 
  1094  0217                     	;# 
  1095  0391                     	;# 
  1096  0392                     	;# 
  1097  0393                     	;# 
  1098  0394                     	;# 
  1099  0395                     	;# 
  1100  0396                     	;# 
  1101  0498                     	;# 
  1102  0498                     	;# 
  1103  0499                     	;# 
  1104  049A                     	;# 
  1105  049B                     	;# 
  1106  049B                     	;# 
  1107  049C                     	;# 
  1108  049D                     	;# 
  1109  049E                     	;# 
  1110  049F                     	;# 
  1111  0611                     	;# 
  1112  0612                     	;# 
  1113  0613                     	;# 
  1114  0613                     	;# 
  1115  0614                     	;# 
  1116  0615                     	;# 
  1117  0616                     	;# 
  1118  0616                     	;# 
  1119  0617                     	;# 
  1120  0618                     	;# 
  1121  0619                     	;# 
  1122  0619                     	;# 
  1123  061A                     	;# 
  1124  061B                     	;# 
  1125  061C                     	;# 
  1126  061C                     	;# 
  1127  0691                     	;# 
  1128  0692                     	;# 
  1129  0693                     	;# 
  1130  0694                     	;# 
  1131  0695                     	;# 
  1132  0F0F                     	;# 
  1133  0F10                     	;# 
  1134  0F11                     	;# 
  1135  0F12                     	;# 
  1136  0F13                     	;# 
  1137  0F14                     	;# 
  1138  0F15                     	;# 
  1139  0F16                     	;# 
  1140  0F17                     	;# 
  1141  0F18                     	;# 
  1142  0F19                     	;# 
  1143  0F1A                     	;# 
  1144  0F1B                     	;# 
  1145  0F1C                     	;# 
  1146  0F1D                     	;# 
  1147  0F1E                     	;# 
  1148  0F1F                     	;# 
  1149  0F20                     	;# 
  1150  0F21                     	;# 
  1151  0F22                     	;# 
  1152  0F23                     	;# 
  1153  0F24                     	;# 
  1154  0F25                     	;# 
  1155  0F26                     	;# 
  1156  0F27                     	;# 
  1157  0F28                     	;# 
  1158  0F29                     	;# 
  1159  0F2A                     	;# 
  1160  0F2B                     	;# 
  1161  0F2C                     	;# 
  1162  0F2D                     	;# 
  1163  0F2E                     	;# 
  1164  0F2F                     	;# 
  1165  0F8C                     	;# 
  1166  0F8D                     	;# 
  1167  0F91                     	;# 
  1168  0F95                     	;# 
  1169  0F96                     	;# 
  1170  0F97                     	;# 
  1171  0F9C                     	;# 
  1172  0F9D                     	;# 
  1173  0F9E                     	;# 
  1174  0FE3                     	;# 
  1175  0FE4                     	;# 
  1176  0FE5                     	;# 
  1177  0FE6                     	;# 
  1178  0FE7                     	;# 
  1179  0FE8                     	;# 
  1180  0FE9                     	;# 
  1181  0FEA                     	;# 
  1182  0FEB                     	;# 
  1183  0FED                     	;# 
  1184  0FEE                     	;# 
  1185  0FEF                     	;# 
  1186                           
  1187                           	psect	idataBANK2
  1188  04F2                     __pidataBANK2:	
  1189                           
  1190                           ;initializer for main@F4456
  1191  04F2  3453               	retlw	83
  1192  04F3  3455               	retlw	85
  1193  04F4  3457               	retlw	87
  1194  04F5  342C               	retlw	44
  1195  04F6  3430               	retlw	48
  1196  04F7  3431               	retlw	49
  1197  04F8  3430               	retlw	48
  1198  04F9  3432               	retlw	50
  1199  04FA  3430               	retlw	48
  1200  04FB  3433               	retlw	51
  1201  04FC  3430               	retlw	48
  1202  04FD  3434               	retlw	52
  1203  04FE  3430               	retlw	48
  1204  04FF  3435               	retlw	53
  1205  0500  3430               	retlw	48
  1206  0501  3436               	retlw	54
  1207  0502  3430               	retlw	48
  1208  0503  3437               	retlw	55
  1209  0504  3430               	retlw	48
  1210  0505  3438               	retlw	56
  1211  0506  3430               	retlw	48
  1212  0507  3439               	retlw	57
  1213  0508  3430               	retlw	48
  1214  0509  3430               	retlw	48
  1215  050A  3430               	retlw	48
  1216  050B  3441               	retlw	65
  1217  050C  3430               	retlw	48
  1218  050D  3442               	retlw	66
  1219  050E  3430               	retlw	48
  1220  050F  3443               	retlw	67
  1221  0510  3430               	retlw	48
  1222  0511  3444               	retlw	68
  1223  0512  3430               	retlw	48
  1224  0513  3445               	retlw	69
  1225  0514  3430               	retlw	48
  1226  0515  3446               	retlw	70
  1227  0516  342C               	retlw	44
  1228  0517  3400               	retlw	0
  1229  0518  3400               	retlw	0
  1230  0519  3400               	retlw	0
  1231  051A  3400               	retlw	0
  1232  051B  3400               	retlw	0
  1233  051C  3400               	retlw	0
  1234  051D  3400               	retlw	0
  1235  051E  3400               	retlw	0
  1236  051F  3400               	retlw	0
  1237  0520  3400               	retlw	0
  1238  0521  3400               	retlw	0
  1239  0522  3400               	retlw	0
  1240  0523  3400               	retlw	0
  1241  0524  3400               	retlw	0
  1242  0525  3400               	retlw	0
  1243  0526  3400               	retlw	0
  1244  0527  3400               	retlw	0
  1245  0528  3400               	retlw	0
  1246  0529  3400               	retlw	0
  1247  052A  3400               	retlw	0
  1248  052B  3400               	retlw	0
  1249  052C  3400               	retlw	0
  1250  052D  3400               	retlw	0
  1251  052E  3400               	retlw	0
  1252  052F  3400               	retlw	0
  1253  0530  3400               	retlw	0
  1254  0531  3400               	retlw	0
  1255                           
  1256                           	psect	stringtext
  1257  0275                     __pstringtext:	
  1258  0275                     _hexpowers:	
  1259  0275  3401               	retlw	1
  1260  0276  3400               	retlw	0
  1261  0277  3410               	retlw	16
  1262  0278  3400               	retlw	0
  1263  0279  3400               	retlw	0
  1264  027A  3401               	retlw	1
  1265  027B  3400               	retlw	0
  1266  027C  3410               	retlw	16
  1267  027D                     __end_of_hexpowers:	
  1268  027D                     STR_23:	
  1269  027D  3453               	retlw	83	;'S'
  1270  027E  3455               	retlw	85	;'U'
  1271  027F  3457               	retlw	87	;'W'
  1272  0280  342C               	retlw	44	;','
  1273  0281  3430               	retlw	48	;'0'
  1274  0282  3431               	retlw	49	;'1'
  1275  0283  3430               	retlw	48	;'0'
  1276  0284  3432               	retlw	50	;'2'
  1277  0285  3430               	retlw	48	;'0'
  1278  0286  3433               	retlw	51	;'3'
  1279  0287  3430               	retlw	48	;'0'
  1280  0288  3434               	retlw	52	;'4'
  1281  0289  3430               	retlw	48	;'0'
  1282  028A  3435               	retlw	53	;'5'
  1283  028B  3430               	retlw	48	;'0'
  1284  028C  3436               	retlw	54	;'6'
  1285  028D  3430               	retlw	48	;'0'
  1286  028E  3437               	retlw	55	;'7'
  1287  028F  3430               	retlw	48	;'0'
  1288  0290  3438               	retlw	56	;'8'
  1289  0291  3430               	retlw	48	;'0'
  1290  0292  3439               	retlw	57	;'9'
  1291  0293  3430               	retlw	48	;'0'
  1292  0294  3430               	retlw	48	;'0'
  1293  0295  3430               	retlw	48	;'0'
  1294  0296  3441               	retlw	65	;'A'
  1295  0297  3430               	retlw	48	;'0'
  1296  0298  3442               	retlw	66	;'B'
  1297  0299  3430               	retlw	48	;'0'
  1298  029A  3443               	retlw	67	;'C'
  1299  029B  3430               	retlw	48	;'0'
  1300  029C  3444               	retlw	68	;'D'
  1301  029D  3430               	retlw	48	;'0'
  1302  029E  3445               	retlw	69	;'E'
  1303  029F  3430               	retlw	48	;'0'
  1304  02A0  3446               	retlw	70	;'F'
  1305  02A1  342C               	retlw	44	;','
  1306  02A2  3441               	retlw	65	;'A'
  1307  02A3  3441               	retlw	65	;'A'
  1308  02A4  3442               	retlw	66	;'B'
  1309  02A5  3442               	retlw	66	;'B'
  1310  02A6  3443               	retlw	67	;'C'
  1311  02A7  3443               	retlw	67	;'C'
  1312  02A8  3444               	retlw	68	;'D'
  1313  02A9  3444               	retlw	68	;'D'
  1314  02AA  3445               	retlw	69	;'E'
  1315  02AB  3445               	retlw	69	;'E'
  1316  02AC  3400               	retlw	0
  1317  02AD                     STR_16:	
  1318  02AD  3450               	retlw	80	;'P'
  1319  02AE  3443               	retlw	67	;'C'
  1320  02AF  342C               	retlw	44	;','
  1321  02B0  3446               	retlw	70	;'F'
  1322  02B1  3446               	retlw	70	;'F'
  1323  02B2  3430               	retlw	48	;'0'
  1324  02B3  3432               	retlw	50	;'2'
  1325  02B4  3430               	retlw	48	;'0'
  1326  02B5  3433               	retlw	51	;'3'
  1327  02B6  3430               	retlw	48	;'0'
  1328  02B7  3434               	retlw	52	;'4'
  1329  02B8  3430               	retlw	48	;'0'
  1330  02B9  3435               	retlw	53	;'5'
  1331  02BA  3430               	retlw	48	;'0'
  1332  02BB  3436               	retlw	54	;'6'
  1333  02BC  3430               	retlw	48	;'0'
  1334  02BD  3437               	retlw	55	;'7'
  1335  02BE  3430               	retlw	48	;'0'
  1336  02BF  3438               	retlw	56	;'8'
  1337  02C0  3430               	retlw	48	;'0'
  1338  02C1  3439               	retlw	57	;'9'
  1339  02C2  3430               	retlw	48	;'0'
  1340  02C3  3430               	retlw	48	;'0'
  1341  02C4  3430               	retlw	48	;'0'
  1342  02C5  3441               	retlw	65	;'A'
  1343  02C6  3430               	retlw	48	;'0'
  1344  02C7  3442               	retlw	66	;'B'
  1345  02C8  3430               	retlw	48	;'0'
  1346  02C9  3443               	retlw	67	;'C'
  1347  02CA  3430               	retlw	48	;'0'
  1348  02CB  3444               	retlw	68	;'D'
  1349  02CC  3430               	retlw	48	;'0'
  1350  02CD  3445               	retlw	69	;'E'
  1351  02CE  3430               	retlw	48	;'0'
  1352  02CF  3446               	retlw	70	;'F'
  1353  02D0  342C               	retlw	44	;','
  1354  02D1  3431               	retlw	49	;'1'
  1355  02D2  3441               	retlw	65	;'A'
  1356  02D3  342C               	retlw	44	;','
  1357  02D4  3430               	retlw	48	;'0'
  1358  02D5  3433               	retlw	51	;'3'
  1359  02D6  3400               	retlw	0
  1360  02D7                     STR_14:	
  1361  02D7  3450               	retlw	80	;'P'
  1362  02D8  3443               	retlw	67	;'C'
  1363  02D9  342C               	retlw	44	;','
  1364  02DA  3430               	retlw	48	;'0'
  1365  02DB  3431               	retlw	49	;'1'
  1366  02DC  3430               	retlw	48	;'0'
  1367  02DD  3432               	retlw	50	;'2'
  1368  02DE  3430               	retlw	48	;'0'
  1369  02DF  3433               	retlw	51	;'3'
  1370  02E0  3430               	retlw	48	;'0'
  1371  02E1  3434               	retlw	52	;'4'
  1372  02E2  3430               	retlw	48	;'0'
  1373  02E3  3435               	retlw	53	;'5'
  1374  02E4  3430               	retlw	48	;'0'
  1375  02E5  3436               	retlw	54	;'6'
  1376  02E6  3430               	retlw	48	;'0'
  1377  02E7  3437               	retlw	55	;'7'
  1378  02E8  3430               	retlw	48	;'0'
  1379  02E9  3438               	retlw	56	;'8'
  1380  02EA  3430               	retlw	48	;'0'
  1381  02EB  3439               	retlw	57	;'9'
  1382  02EC  3430               	retlw	48	;'0'
  1383  02ED  3430               	retlw	48	;'0'
  1384  02EE  3430               	retlw	48	;'0'
  1385  02EF  3441               	retlw	65	;'A'
  1386  02F0  3430               	retlw	48	;'0'
  1387  02F1  3442               	retlw	66	;'B'
  1388  02F2  3430               	retlw	48	;'0'
  1389  02F3  3443               	retlw	67	;'C'
  1390  02F4  3430               	retlw	48	;'0'
  1391  02F5  3444               	retlw	68	;'D'
  1392  02F6  3430               	retlw	48	;'0'
  1393  02F7  3445               	retlw	69	;'E'
  1394  02F8  3430               	retlw	48	;'0'
  1395  02F9  3446               	retlw	70	;'F'
  1396  02FA  342C               	retlw	44	;','
  1397  02FB  3431               	retlw	49	;'1'
  1398  02FC  3432               	retlw	50	;'2'
  1399  02FD  342C               	retlw	44	;','
  1400  02FE  3430               	retlw	48	;'0'
  1401  02FF  3435               	retlw	53	;'5'
  1402  0300  3400               	retlw	0
  1403  0301                     STR_12:	
  1404  0301  3450               	retlw	80	;'P'
  1405  0302  3453               	retlw	83	;'S'
  1406  0303  342C               	retlw	44	;','
  1407  0304  3431               	retlw	49	;'1'
  1408  0305  3431               	retlw	49	;'1'
  1409  0306  3432               	retlw	50	;'2'
  1410  0307  3432               	retlw	50	;'2'
  1411  0308  3433               	retlw	51	;'3'
  1412  0309  3433               	retlw	51	;'3'
  1413  030A  3434               	retlw	52	;'4'
  1414  030B  3434               	retlw	52	;'4'
  1415  030C  3435               	retlw	53	;'5'
  1416  030D  3435               	retlw	53	;'5'
  1417  030E  3436               	retlw	54	;'6'
  1418  030F  3436               	retlw	54	;'6'
  1419  0310  3437               	retlw	55	;'7'
  1420  0311  3437               	retlw	55	;'7'
  1421  0312  3438               	retlw	56	;'8'
  1422  0313  3438               	retlw	56	;'8'
  1423  0314  3439               	retlw	57	;'9'
  1424  0315  3439               	retlw	57	;'9'
  1425  0316  3430               	retlw	48	;'0'
  1426  0317  3430               	retlw	48	;'0'
  1427  0318  3441               	retlw	65	;'A'
  1428  0319  3441               	retlw	65	;'A'
  1429  031A  3442               	retlw	66	;'B'
  1430  031B  3442               	retlw	66	;'B'
  1431  031C  3443               	retlw	67	;'C'
  1432  031D  3443               	retlw	67	;'C'
  1433  031E  3444               	retlw	68	;'D'
  1434  031F  3444               	retlw	68	;'D'
  1435  0320  3445               	retlw	69	;'E'
  1436  0321  3445               	retlw	69	;'E'
  1437  0322  3446               	retlw	70	;'F'
  1438  0323  3446               	retlw	70	;'F'
  1439  0324  3400               	retlw	0
  1440  0325                     STR_8:	
  1441  0325  3453               	retlw	83	;'S'
  1442  0326  342D               	retlw	45	;'-'
  1443  0327  342C               	retlw	44	;','
  1444  0328  3450               	retlw	80	;'P'
  1445  0329  3449               	retlw	73	;'I'
  1446  032A  3443               	retlw	67	;'C'
  1447  032B  3431               	retlw	49	;'1'
  1448  032C  3436               	retlw	54	;'6'
  1449  032D  342D               	retlw	45	;'-'
  1450  032E  3442               	retlw	66	;'B'
  1451  032F  344C               	retlw	76	;'L'
  1452  0330  3445               	retlw	69	;'E'
  1453  0331  3432               	retlw	50	;'2'
  1454  0332  342D               	retlw	45	;'-'
  1455  0333  3430               	retlw	48	;'0'
  1456  0334  3430               	retlw	48	;'0'
  1457  0335  3431               	retlw	49	;'1'
  1458  0336  3400               	retlw	0
  1459  0337                     STR_28:	
  1460  0337  3430               	retlw	48	;'0'
  1461  0338  3431               	retlw	49	;'1'
  1462  0339  3432               	retlw	50	;'2'
  1463  033A  3433               	retlw	51	;'3'
  1464  033B  3434               	retlw	52	;'4'
  1465  033C  3435               	retlw	53	;'5'
  1466  033D  3436               	retlw	54	;'6'
  1467  033E  3437               	retlw	55	;'7'
  1468  033F  3438               	retlw	56	;'8'
  1469  0340  3439               	retlw	57	;'9'
  1470  0341  3441               	retlw	65	;'A'
  1471  0342  3442               	retlw	66	;'B'
  1472  0343  3443               	retlw	67	;'C'
  1473  0344  3444               	retlw	68	;'D'
  1474  0345  3445               	retlw	69	;'E'
  1475  0346  3446               	retlw	70	;'F'
  1476  0347  3400               	retlw	0
  1477  0348                     STR_6:	
  1478  0348  3453               	retlw	83	;'S'
  1479  0349  3452               	retlw	82	;'R'
  1480  034A  342C               	retlw	44	;','
  1481  034B  3430               	retlw	48	;'0'
  1482  034C  3430               	retlw	48	;'0'
  1483  034D  3430               	retlw	48	;'0'
  1484  034E  3430               	retlw	48	;'0'
  1485  034F  3430               	retlw	48	;'0'
  1486  0350  3430               	retlw	48	;'0'
  1487  0351  3430               	retlw	48	;'0'
  1488  0352  3430               	retlw	48	;'0'
  1489  0353  3400               	retlw	0
  1490  0354                     STR_25:	
  1491  0354  3441               	retlw	65	;'A'
  1492  0355  342C               	retlw	44	;','
  1493  0356  3430               	retlw	48	;'0'
  1494  0357  3430               	retlw	48	;'0'
  1495  0358  3435               	retlw	53	;'5'
  1496  0359  3430               	retlw	48	;'0'
  1497  035A  342C               	retlw	44	;','
  1498  035B  3430               	retlw	48	;'0'
  1499  035C  3437               	retlw	55	;'7'
  1500  035D  3444               	retlw	68	;'D'
  1501  035E  3430               	retlw	48	;'0'
  1502  035F  3400               	retlw	0
  1503  0360                     STR_4:	
  1504  0360  3453               	retlw	83	;'S'
  1505  0361  3453               	retlw	83	;'S'
  1506  0362  342C               	retlw	44	;','
  1507  0363  3443               	retlw	67	;'C'
  1508  0364  3430               	retlw	48	;'0'
  1509  0365  3430               	retlw	48	;'0'
  1510  0366  3430               	retlw	48	;'0'
  1511  0367  3430               	retlw	48	;'0'
  1512  0368  3430               	retlw	48	;'0'
  1513  0369  3430               	retlw	48	;'0'
  1514  036A  3431               	retlw	49	;'1'
  1515  036B  3400               	retlw	0
  1516  036C                     STR_21:	
  1517  036C  3453               	retlw	83	;'S'
  1518  036D  3455               	retlw	85	;'U'
  1519  036E  3457               	retlw	87	;'W'
  1520  036F  342C               	retlw	44	;','
  1521  0370  3432               	retlw	50	;'2'
  1522  0371  3441               	retlw	65	;'A'
  1523  0372  3431               	retlw	49	;'1'
  1524  0373  3439               	retlw	57	;'9'
  1525  0374  342C               	retlw	44	;','
  1526  0375  3433               	retlw	51	;'3'
  1527  0376  3432               	retlw	50	;'2'
  1528  0377  3400               	retlw	0
  1529  0378                     STR_19:	
  1530  0378  3452               	retlw	82	;'R'
  1531  0379  3465               	retlw	101	;'e'
  1532  037A  3462               	retlw	98	;'b'
  1533  037B  346F               	retlw	111	;'o'
  1534  037C  346F               	retlw	111	;'o'
  1535  037D  3474               	retlw	116	;'t'
  1536  037E  3400               	retlw	0
  1537  037F                     STR_2:	
  1538  037F  3453               	retlw	83	;'S'
  1539  0380  3446               	retlw	70	;'F'
  1540  0381  342C               	retlw	44	;','
  1541  0382  3431               	retlw	49	;'1'
  1542  0383  3400               	retlw	0
  1543  0384                     STR_18:	
  1544  0384  3452               	retlw	82	;'R'
  1545  0385  342C               	retlw	44	;','
  1546  0386  3431               	retlw	49	;'1'
  1547  0387  3400               	retlw	0
  1548  0388                     STR_1:	
  1549  0388  3443               	retlw	67	;'C'
  1550  0389  344D               	retlw	77	;'M'
  1551  038A  3444               	retlw	68	;'D'
  1552  038B  3400               	retlw	0
  1553  038C                     STR_27:	
  1554  038C  3445               	retlw	69	;'E'
  1555  038D  344E               	retlw	78	;'N'
  1556  038E  3444               	retlw	68	;'D'
  1557  038F  3400               	retlw	0
  1558  0390                     STR_3:	
  1559  0390  3441               	retlw	65	;'A'
  1560  0391  344F               	retlw	79	;'O'
  1561  0392  344B               	retlw	75	;'K'
  1562  0393  3400               	retlw	0
  1563  0394                     STR_26:	
  1564  0394  3425               	retlw	37	;'%'
  1565  0395  3458               	retlw	88	;'X'
  1566  0396  3400               	retlw	0
  1567  0397                     STR_10:	
  1568  0397  3450               	retlw	80	;'P'
  1569  0398  345A               	retlw	90	;'Z'
  1570  0399  3400               	retlw	0
  1571  0388                     
  1572                           ; #config settings
  1573  0000                     
  1574                           	psect	nvBANK0
  1575  006D                     __pnvBANK0:	
  1576  006D                     _eusartTxBufferRemaining:	
  1577  006D                     	ds	1
  1578  000E                     _PORTCbits	set	14
  1579  0011                     _PIR1bits	set	17
  1580  000B                     _INTCONbits	set	11
  1581  009D                     _ADCON0bits	set	157
  1582  009C                     _ADRESH	set	156
  1583  009B                     _ADRESL	set	155
  1584  009F                     _ADCON2	set	159
  1585  009E                     _ADCON1	set	158
  1586  009D                     _ADCON0	set	157
  1587  0091                     _PIE1bits	set	145
  1588  0097                     _WDTCON	set	151
  1589  0099                     _OSCCON	set	153
  1590  0095                     _OPTION_REGbits	set	149
  1591  008E                     _TRISC	set	142
  1592  008D                     _TRISB	set	141
  1593  008C                     _TRISA	set	140
  1594  010E                     _LATCbits	set	270
  1595  010C                     _LATAbits	set	268
  1596  011D                     _APFCON	set	285
  1597  010E                     _LATC	set	270
  1598  010D                     _LATB	set	269
  1599  010C                     _LATA	set	268
  1600  0199                     _RCREG	set	409
  1601  019D                     _RCSTAbits	set	413
  1602  019A                     _TXREG	set	410
  1603  019C                     _SPBRGH	set	412
  1604  019B                     _SPBRGL	set	411
  1605  019E                     _TXSTA	set	414
  1606  019D                     _RCSTA	set	413
  1607  019F                     _BAUDCON	set	415
  1608  018C                     _ANSELA	set	396
  1609  018D                     _ANSELB	set	397
  1610  018E                     _ANSELC	set	398
  1611  020C                     _WPUA	set	524
  1612  020D                     _WPUB	set	525
  1613                           
  1614                           	psect	cinit
  1615  0026                     start_initialization:	
  1616  0026                     __initialization:	
  1617                           
  1618                           ; Initialize objects allocated to BANK2
  1619  0026  30F2               	movlw	low __pidataBANK2
  1620  0027  0084               	movwf	4
  1621  0028  3084               	movlw	(high __pidataBANK2)| (0+128)
  1622  0029  0085               	movwf	5
  1623  002A  3020               	movlw	low __pdataBANK2
  1624  002B  0086               	movwf	6
  1625  002C  3001               	movlw	high __pdataBANK2
  1626  002D  0087               	movwf	7
  1627  002E  3040               	movlw	64
  1628  002F  3186  26D7  3180   	fcall	init_ram
  1629                           
  1630                           ; Clear objects allocated to COMMON
  1631  0032  01FA               	clrf	__pbssCOMMON& (0+127)
  1632  0033  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1633                           
  1634                           ; Clear objects allocated to BANK0
  1635  0034  01EA               	clrf	__pbssBANK0& (0+127)
  1636  0035  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  1637  0036  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  1638                           
  1639                           ; Clear objects allocated to BANK1
  1640  0037  0021               	movlb	1	; select bank1
  1641  0038  01E8               	clrf	__pbssBANK1& (0+127)
  1642  0039  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  1643                           
  1644                           ; Clear objects allocated to BANK2
  1645  003A  3060               	movlw	low __pbssBANK2
  1646  003B  0084               	movwf	4
  1647  003C  3001               	movlw	high __pbssBANK2
  1648  003D  0085               	movwf	5
  1649  003E  3010               	movlw	16
  1650  003F  3186  26DD         	fcall	clear_ram0
  1651  0041                     end_of_initialization:	
  1652                           ;End of C runtime variable initialization code
  1653                           
  1654  0041                     __end_of__initialization:	
  1655  0041  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1656  0042  0020               	movlb	0
  1657  0043  3180  2845         	ljmp	_main	;jump to C main() function
  1658                           
  1659                           	psect	bssCOMMON
  1660  007A                     __pbssCOMMON:	
  1661  007A                     _eusartTxTail:	
  1662  007A                     	ds	1
  1663  007B                     _eusartTxHead:	
  1664  007B                     	ds	1
  1665                           
  1666                           	psect	bssBANK0
  1667  006A                     __pbssBANK0:	
  1668  006A                     _eusartRxCount:	
  1669  006A                     	ds	1
  1670  006B                     _eusartRxTail:	
  1671  006B                     	ds	1
  1672  006C                     _eusartRxHead:	
  1673  006C                     	ds	1
  1674                           
  1675                           	psect	bssBANK1
  1676  00E8                     __pbssBANK1:	
  1677  00E8                     _adcResult:	
  1678  00E8                     	ds	2
  1679                           
  1680                           	psect	bssBANK2
  1681  0160                     __pbssBANK2:	
  1682  0160                     _eusartRxBuffer:	
  1683  0160                     	ds	8
  1684  0168                     _eusartTxBuffer:	
  1685  0168                     	ds	8
  1686                           
  1687                           	psect	dataBANK2
  1688  0120                     __pdataBANK2:	
  1689  0120                     main@F4456:	
  1690  0120                     	ds	64
  1691                           
  1692                           	psect	inittext
  1693  06D7                     init_ram:	
  1694  06D7  00FE               	movwf	126
  1695  06D8                     initloop:	
  1696  06D8  0012               	moviw fsr0++
  1697  06D9  001E               	movwi fsr1++
  1698  06DA  0BFE               	decfsz	126,f
  1699  06DB  2ED8               	goto	initloop
  1700  06DC  3400               	retlw	0
  1701                           
  1702                           	psect	clrtext
  1703  06DD                     clear_ram0:	
  1704                           ;	Called with FSR0 containing the base address, and
  1705                           ;	WREG with the size to clear
  1706                           
  1707  06DD  0064               	clrwdt	;clear the watchdog before getting into this loop
  1708  06DE                     clrloop0:	
  1709  06DE  0180               	clrf	0	;clear RAM location pointed to by FSR
  1710  06DF  3101               	addfsr 0,1
  1711  06E0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1712  06E1  2EDE               	goto	clrloop0	;have we reached the end yet?
  1713  06E2  3400               	retlw	0	;all done for this memory range, return
  1714                           
  1715                           	psect	cstackBANK1
  1716  00A0                     __pcstackBANK1:	
  1717  00A0                     main@command:	
  1718                           
  1719                           ; 64 bytes @ 0x0
  1720  00A0                     	ds	64
  1721  00E0                     main@c:	
  1722                           
  1723                           ; 2 bytes @ 0x40
  1724  00E0                     	ds	2
  1725  00E2                     main@result:	
  1726                           
  1727                           ; 4 bytes @ 0x42
  1728  00E2                     	ds	4
  1729  00E6                     main@err:	
  1730                           
  1731                           ; 2 bytes @ 0x46
  1732  00E6                     	ds	2
  1733                           
  1734                           	psect	cstackCOMMON
  1735  0070                     __pcstackCOMMON:	
  1736  0070                     ?_OSCILLATOR_Initialize:	
  1737  0070                     ?_WDT_Initialize:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0070                     ?_ADC_Initialize:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0070                     ?_EUSART_Initialize:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0070                     ?_PIN_MANAGER_Initialize:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0070                     ?_SYSTEM_Initialize:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0070                     ?_EUSART_Read:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0070                     ?_EUSART_Write:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0070                     ?_EUSART_Transmit_ISR:	
  1759                           ; 1 bytes @ 0x0
  1760                           
  1761  0070                     ??_EUSART_Transmit_ISR:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0070                     ?_EUSART_Receive_ISR:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0070                     ??_EUSART_Receive_ISR:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0070                     ?_INTERRUPT_InterruptManager:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0070                     ?_read_line:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0070                     ?_main:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0070                     ?_set_low_leds:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782                           
  1783                           ; 2 bytes @ 0x0
  1784  0070                     	ds	1
  1785  0071                     ??_INTERRUPT_InterruptManager:	
  1786                           
  1787                           ; 1 bytes @ 0x1
  1788  0071                     	ds	1
  1789  0072                     ??_OSCILLATOR_Initialize:	
  1790  0072                     ??_WDT_Initialize:	
  1791                           ; 1 bytes @ 0x2
  1792                           
  1793  0072                     ??_ADC_Initialize:	
  1794                           ; 1 bytes @ 0x2
  1795                           
  1796  0072                     ??_EUSART_Initialize:	
  1797                           ; 1 bytes @ 0x2
  1798                           
  1799  0072                     ?_strcat:	
  1800                           ; 1 bytes @ 0x2
  1801                           
  1802  0072                     ??_PIN_MANAGER_Initialize:	
  1803                           ; 1 bytes @ 0x2
  1804                           
  1805  0072                     ??_EUSART_Read:	
  1806                           ; 1 bytes @ 0x2
  1807                           
  1808  0072                     ??_EUSART_Write:	
  1809                           ; 1 bytes @ 0x2
  1810                           
  1811  0072                     ??_set_low_leds:	
  1812                           ; 1 bytes @ 0x2
  1813                           
  1814  0072                     ?_ADC_GetConversion:	
  1815                           ; 1 bytes @ 0x2
  1816                           
  1817  0072                     ?_blink_leds:	
  1818                           ; 2 bytes @ 0x2
  1819                           
  1820  0072                     ?___lwdiv:	
  1821                           ; 2 bytes @ 0x2
  1822                           
  1823  0072                     strcat@from:	
  1824                           ; 2 bytes @ 0x2
  1825                           
  1826  0072                     blink_leds@n:	
  1827                           ; 1 bytes @ 0x2
  1828                           
  1829  0072                     ___lwdiv@divisor:	
  1830                           ; 2 bytes @ 0x2
  1831                           
  1832                           
  1833                           ; 2 bytes @ 0x2
  1834  0072                     	ds	1
  1835  0073                     ??_strcat:	
  1836  0073                     ??_SYSTEM_Initialize:	
  1837                           ; 1 bytes @ 0x3
  1838                           
  1839  0073                     EUSART_Read@readValue:	
  1840                           ; 1 bytes @ 0x3
  1841                           
  1842  0073                     EUSART_Write@txData:	
  1843                           ; 1 bytes @ 0x3
  1844                           
  1845                           
  1846                           ; 1 bytes @ 0x3
  1847  0073                     	ds	1
  1848  0074                     ??_ADC_GetConversion:	
  1849  0074                     ??_read_line:	
  1850                           ; 1 bytes @ 0x4
  1851                           
  1852  0074                     strcat@to:	
  1853                           ; 1 bytes @ 0x4
  1854                           
  1855  0074                     blink_leds@c:	
  1856                           ; 1 bytes @ 0x4
  1857                           
  1858  0074                     ___lwdiv@dividend:	
  1859                           ; 2 bytes @ 0x4
  1860                           
  1861                           
  1862                           ; 2 bytes @ 0x4
  1863  0074                     	ds	1
  1864  0075                     ?_strcmp:	
  1865  0075                     ADC_GetConversion@channel:	
  1866                           ; 2 bytes @ 0x5
  1867                           
  1868  0075                     strcat@cp:	
  1869                           ; 1 bytes @ 0x5
  1870                           
  1871  0075                     strcmp@s2:	
  1872                           ; 1 bytes @ 0x5
  1873                           
  1874                           
  1875                           ; 2 bytes @ 0x5
  1876  0075                     	ds	1
  1877  0076                     ??_blink_leds:	
  1878  0076                     ??___lwdiv:	
  1879                           ; 1 bytes @ 0x6
  1880                           
  1881  0076                     ?_write_line:	
  1882                           ; 1 bytes @ 0x6
  1883                           
  1884  0076                     write_line@line:	
  1885                           ; 2 bytes @ 0x6
  1886                           
  1887                           
  1888                           ; 2 bytes @ 0x6
  1889  0076                     	ds	1
  1890  0077                     ??_strcmp:	
  1891  0077                     ___lwdiv@quotient:	
  1892                           ; 1 bytes @ 0x7
  1893                           
  1894                           
  1895                           ; 2 bytes @ 0x7
  1896  0077                     	ds	1
  1897  0078                     ??_write_line:	
  1898  0078                     strcmp@r:	
  1899                           ; 1 bytes @ 0x8
  1900                           
  1901  0078                     blink_leds@i:	
  1902                           ; 1 bytes @ 0x8
  1903                           
  1904                           
  1905                           ; 2 bytes @ 0x8
  1906  0078                     	ds	1
  1907  0079                     ___lwdiv@counter:	
  1908  0079                     strcmp@s1:	
  1909                           ; 1 bytes @ 0x9
  1910                           
  1911                           
  1912                           ; 1 bytes @ 0x9
  1913  0079                     	ds	1
  1914                           
  1915                           	psect	cstackBANK0
  1916  0020                     __pcstackBANK0:	
  1917  0020                     ?_sprintf:	
  1918  0020                     write_line@i:	
  1919                           ; 2 bytes @ 0x0
  1920                           
  1921  0020                     sprintf@f:	
  1922                           ; 2 bytes @ 0x0
  1923                           
  1924  0020                     read_line@c:	
  1925                           ; 2 bytes @ 0x0
  1926                           
  1927                           
  1928                           ; 64 bytes @ 0x0
  1929  0020                     	ds	4
  1930  0024                     ??_sprintf:	
  1931                           
  1932                           ; 1 bytes @ 0x4
  1933  0024                     	ds	4
  1934  0028                     sprintf@flag:	
  1935                           
  1936                           ; 1 bytes @ 0x8
  1937  0028                     	ds	1
  1938  0029                     sprintf@idx:	
  1939                           
  1940                           ; 1 bytes @ 0x9
  1941  0029                     	ds	1
  1942  002A                     sprintf@ap:	
  1943                           
  1944                           ; 1 bytes @ 0xA
  1945  002A                     	ds	1
  1946  002B                     sprintf@val:	
  1947                           
  1948                           ; 2 bytes @ 0xB
  1949  002B                     	ds	2
  1950  002D                     sprintf@prec:	
  1951                           
  1952                           ; 1 bytes @ 0xD
  1953  002D                     	ds	1
  1954  002E                     sprintf@sp:	
  1955                           
  1956                           ; 1 bytes @ 0xE
  1957  002E                     	ds	1
  1958  002F                     sprintf@c:	
  1959                           
  1960                           ; 1 bytes @ 0xF
  1961  002F                     	ds	49
  1962  0060                     read_line@i:	
  1963                           
  1964                           ; 2 bytes @ 0x40
  1965  0060                     	ds	2
  1966  0062                     ?_write_and_wait:	
  1967  0062                     write_and_wait@cmd:	
  1968                           ; 2 bytes @ 0x42
  1969                           
  1970                           
  1971                           ; 2 bytes @ 0x42
  1972  0062                     	ds	2
  1973  0064                     write_and_wait@res:	
  1974                           
  1975                           ; 2 bytes @ 0x44
  1976  0064                     	ds	2
  1977  0066                     ??_write_and_wait:	
  1978                           
  1979                           ; 1 bytes @ 0x46
  1980  0066                     	ds	1
  1981  0067                     write_and_wait@line:	
  1982                           
  1983                           ; 1 bytes @ 0x47
  1984  0067                     	ds	1
  1985  0068                     ??_main:	
  1986                           
  1987                           ; 1 bytes @ 0x48
  1988  0068                     	ds	2
  1989                           
  1990                           	psect	maintext
  1991  0045                     __pmaintext:	
  1992 ;;
  1993 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1994 ;;
  1995 ;; *************** function _main *****************
  1996 ;; Defined at:
  1997 ;;		line 175 in file "main.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;		None
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;  command        64    0[BANK1 ] unsigned char [64]
  2002 ;;  result          4   66[BANK1 ] unsigned char [4]
  2003 ;;  err             2   70[BANK1 ] int 
  2004 ;;  c               2   64[BANK1 ] int 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : B1F/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2014 ;;      Params:         0       0       0       0
  2015 ;;      Locals:         0       0      72       0
  2016 ;;      Temps:          0       2       0       0
  2017 ;;      Totals:         0       2      72       0
  2018 ;;Total ram usage:       74 bytes
  2019 ;; Hardware stack levels required when called:    5
  2020 ;; This function calls:
  2021 ;;		_ADC_GetConversion
  2022 ;;		_SYSTEM_Initialize
  2023 ;;		_blink_leds
  2024 ;;		_read_line
  2025 ;;		_sprintf
  2026 ;;		_strcat
  2027 ;;		_strcmp
  2028 ;;		_write_and_wait
  2029 ;;		_write_line
  2030 ;; This function is called by:
  2031 ;;		Startup code after reset
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           
  2036                           ;psect for function _main
  2037  0045                     _main:	
  2038                           
  2039                           ;main.c: 178: SYSTEM_Initialize();
  2040                           
  2041                           ;incstack = 0
  2042                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2043  0045  3186  26C0  3180   	fcall	_SYSTEM_Initialize
  2044                           
  2045                           ;main.c: 179: (INTCONbits.GIE = 1);
  2046  0048  178B               	bsf	11,7	;volatile
  2047                           
  2048                           ;main.c: 180: (INTCONbits.PEIE = 1);
  2049  0049  170B               	bsf	11,6	;volatile
  2050                           
  2051                           ;main.c: 182: do { LATAbits.LATA4 = 1; } while(0);
  2052  004A  0022               	movlb	2	; select bank2
  2053  004B  160C               	bsf	12,4	;volatile
  2054                           
  2055                           ;main.c: 184: int err = 0;
  2056  004C  0021               	movlb	1	; select bank1
  2057  004D  01E6               	clrf	main@err^(0+128)
  2058  004E  01E7               	clrf	(main@err+1)^(0+128)
  2059                           
  2060                           ;main.c: 187: err = strcmp(read_line(), "CMD");
  2061  004F  3088               	movlw	low (STR_1| (0+32768))
  2062  0050  00F5               	movwf	strcmp@s2
  2063  0051  3083               	movlw	high (STR_1| (0+32768))
  2064  0052  00F6               	movwf	strcmp@s2+1
  2065  0053  3184  24A5  3180   	fcall	_read_line
  2066  0056  3185  2566  3180   	fcall	_strcmp
  2067  0059  0876               	movf	?_strcmp+1,w
  2068  005A  0021               	movlb	1	; select bank1
  2069  005B  00E7               	movwf	(main@err+1)^(0+128)
  2070  005C  0875               	movf	?_strcmp,w
  2071  005D  00E6               	movwf	main@err^(0+128)
  2072                           
  2073                           ;main.c: 188: if (err) blink_leds(1, 1);
  2074  005E  0866               	movf	main@err^(0+128),w
  2075  005F  0467               	iorwf	(main@err+1)^(0+128),w
  2076  0060  1903               	btfsc	3,2
  2077  0061  286D               	goto	l1753
  2078  0062  3001               	movlw	1
  2079  0063  00F2               	movwf	blink_leds@n
  2080  0064  3000               	movlw	0
  2081  0065  00F3               	movwf	blink_leds@n+1
  2082  0066  3001               	movlw	1
  2083  0067  00F4               	movwf	blink_leds@c
  2084  0068  3000               	movlw	0
  2085  0069  00F5               	movwf	blink_leds@c+1
  2086  006A  3184  244D  3180   	fcall	_blink_leds
  2087  006D                     l1753:	
  2088                           
  2089                           ;main.c: 191: err = write_and_wait("SF,1", "AOK");
  2090  006D  307F               	movlw	low (STR_2| (0+32768))
  2091  006E  0020               	movlb	0	; select bank0
  2092  006F  00E2               	movwf	write_and_wait@cmd
  2093  0070  3083               	movlw	high (STR_2| (0+32768))
  2094  0071  00E3               	movwf	write_and_wait@cmd+1
  2095  0072  3090               	movlw	low (STR_3| (0+32768))
  2096  0073  00E4               	movwf	write_and_wait@res
  2097  0074  3083               	movlw	high (STR_3| (0+32768))
  2098  0075  00E5               	movwf	write_and_wait@res+1
  2099  0076  3186  2639  3180   	fcall	_write_and_wait
  2100  0079  0020               	movlb	0	; select bank0
  2101  007A  0863               	movf	?_write_and_wait+1,w
  2102  007B  0021               	movlb	1	; select bank1
  2103  007C  00E7               	movwf	(main@err+1)^(0+128)
  2104  007D  0020               	movlb	0	; select bank0
  2105  007E  0862               	movf	?_write_and_wait,w
  2106  007F  0021               	movlb	1	; select bank1
  2107  0080  00E6               	movwf	main@err^(0+128)
  2108                           
  2109                           ;main.c: 192: if (err) blink_leds(1, 2);
  2110  0081  0866               	movf	main@err^(0+128),w
  2111  0082  0467               	iorwf	(main@err+1)^(0+128),w
  2112  0083  1903               	btfsc	3,2
  2113  0084  2890               	goto	l1759
  2114  0085  3001               	movlw	1
  2115  0086  00F2               	movwf	blink_leds@n
  2116  0087  3000               	movlw	0
  2117  0088  00F3               	movwf	blink_leds@n+1
  2118  0089  3002               	movlw	2
  2119  008A  00F4               	movwf	blink_leds@c
  2120  008B  3000               	movlw	0
  2121  008C  00F5               	movwf	blink_leds@c+1
  2122  008D  3184  244D  3180   	fcall	_blink_leds
  2123  0090                     l1759:	
  2124                           
  2125                           ;main.c: 196: err = write_and_wait("SS,C0000001", "AOK");
  2126  0090  3060               	movlw	low (STR_4| (0+32768))
  2127  0091  0020               	movlb	0	; select bank0
  2128  0092  00E2               	movwf	write_and_wait@cmd
  2129  0093  3083               	movlw	high (STR_4| (0+32768))
  2130  0094  00E3               	movwf	write_and_wait@cmd+1
  2131  0095  3090               	movlw	low (STR_3| (0+32768))
  2132  0096  00E4               	movwf	write_and_wait@res
  2133  0097  3083               	movlw	high (STR_3| (0+32768))
  2134  0098  00E5               	movwf	write_and_wait@res+1
  2135  0099  3186  2639  3180   	fcall	_write_and_wait
  2136  009C  0020               	movlb	0	; select bank0
  2137  009D  0863               	movf	?_write_and_wait+1,w
  2138  009E  0021               	movlb	1	; select bank1
  2139  009F  00E7               	movwf	(main@err+1)^(0+128)
  2140  00A0  0020               	movlb	0	; select bank0
  2141  00A1  0862               	movf	?_write_and_wait,w
  2142  00A2  0021               	movlb	1	; select bank1
  2143  00A3  00E6               	movwf	main@err^(0+128)
  2144                           
  2145                           ;main.c: 197: if (err) blink_leds(1, 4);
  2146  00A4  0866               	movf	main@err^(0+128),w
  2147  00A5  0467               	iorwf	(main@err+1)^(0+128),w
  2148  00A6  1903               	btfsc	3,2
  2149  00A7  28B3               	goto	l1765
  2150  00A8  3001               	movlw	1
  2151  00A9  00F2               	movwf	blink_leds@n
  2152  00AA  3000               	movlw	0
  2153  00AB  00F3               	movwf	blink_leds@n+1
  2154  00AC  3004               	movlw	4
  2155  00AD  00F4               	movwf	blink_leds@c
  2156  00AE  3000               	movlw	0
  2157  00AF  00F5               	movwf	blink_leds@c+1
  2158  00B0  3184  244D  3180   	fcall	_blink_leds
  2159  00B3                     l1765:	
  2160                           
  2161                           ;main.c: 200: err = write_and_wait("SR,00000000", "AOK");
  2162  00B3  3048               	movlw	low (STR_6| (0+32768))
  2163  00B4  0020               	movlb	0	; select bank0
  2164  00B5  00E2               	movwf	write_and_wait@cmd
  2165  00B6  3083               	movlw	high (STR_6| (0+32768))
  2166  00B7  00E3               	movwf	write_and_wait@cmd+1
  2167  00B8  3090               	movlw	low (STR_3| (0+32768))
  2168  00B9  00E4               	movwf	write_and_wait@res
  2169  00BA  3083               	movlw	high (STR_3| (0+32768))
  2170  00BB  00E5               	movwf	write_and_wait@res+1
  2171  00BC  3186  2639  3180   	fcall	_write_and_wait
  2172  00BF  0020               	movlb	0	; select bank0
  2173  00C0  0863               	movf	?_write_and_wait+1,w
  2174  00C1  0021               	movlb	1	; select bank1
  2175  00C2  00E7               	movwf	(main@err+1)^(0+128)
  2176  00C3  0020               	movlb	0	; select bank0
  2177  00C4  0862               	movf	?_write_and_wait,w
  2178  00C5  0021               	movlb	1	; select bank1
  2179  00C6  00E6               	movwf	main@err^(0+128)
  2180                           
  2181                           ;main.c: 201: if (err) blink_leds(2, 1);
  2182  00C7  0866               	movf	main@err^(0+128),w
  2183  00C8  0467               	iorwf	(main@err+1)^(0+128),w
  2184  00C9  1903               	btfsc	3,2
  2185  00CA  28D6               	goto	l1771
  2186  00CB  3002               	movlw	2
  2187  00CC  00F2               	movwf	blink_leds@n
  2188  00CD  3000               	movlw	0
  2189  00CE  00F3               	movwf	blink_leds@n+1
  2190  00CF  3001               	movlw	1
  2191  00D0  00F4               	movwf	blink_leds@c
  2192  00D1  3000               	movlw	0
  2193  00D2  00F5               	movwf	blink_leds@c+1
  2194  00D3  3184  244D  3180   	fcall	_blink_leds
  2195  00D6                     l1771:	
  2196                           
  2197                           ;main.c: 204: err = write_and_wait("S-,PIC16-BLE2-001", "AOK");
  2198  00D6  3025               	movlw	low (STR_8| (0+32768))
  2199  00D7  0020               	movlb	0	; select bank0
  2200  00D8  00E2               	movwf	write_and_wait@cmd
  2201  00D9  3083               	movlw	high (STR_8| (0+32768))
  2202  00DA  00E3               	movwf	write_and_wait@cmd+1
  2203  00DB  3090               	movlw	low (STR_3| (0+32768))
  2204  00DC  00E4               	movwf	write_and_wait@res
  2205  00DD  3083               	movlw	high (STR_3| (0+32768))
  2206  00DE  00E5               	movwf	write_and_wait@res+1
  2207  00DF  3186  2639  3180   	fcall	_write_and_wait
  2208  00E2  0020               	movlb	0	; select bank0
  2209  00E3  0863               	movf	?_write_and_wait+1,w
  2210  00E4  0021               	movlb	1	; select bank1
  2211  00E5  00E7               	movwf	(main@err+1)^(0+128)
  2212  00E6  0020               	movlb	0	; select bank0
  2213  00E7  0862               	movf	?_write_and_wait,w
  2214  00E8  0021               	movlb	1	; select bank1
  2215  00E9  00E6               	movwf	main@err^(0+128)
  2216                           
  2217                           ;main.c: 205: if (err) blink_leds(2, 2);
  2218  00EA  0866               	movf	main@err^(0+128),w
  2219  00EB  0467               	iorwf	(main@err+1)^(0+128),w
  2220  00EC  1903               	btfsc	3,2
  2221  00ED  28F9               	goto	l1777
  2222  00EE  3002               	movlw	2
  2223  00EF  00F2               	movwf	blink_leds@n
  2224  00F0  3000               	movlw	0
  2225  00F1  00F3               	movwf	blink_leds@n+1
  2226  00F2  3002               	movlw	2
  2227  00F3  00F4               	movwf	blink_leds@c
  2228  00F4  3000               	movlw	0
  2229  00F5  00F5               	movwf	blink_leds@c+1
  2230  00F6  3184  244D  3180   	fcall	_blink_leds
  2231  00F9                     l1777:	
  2232                           
  2233                           ;main.c: 208: err = write_and_wait("PZ", "AOK");
  2234  00F9  3097               	movlw	low (STR_10| (0+32768))
  2235  00FA  0020               	movlb	0	; select bank0
  2236  00FB  00E2               	movwf	write_and_wait@cmd
  2237  00FC  3083               	movlw	high (STR_10| (0+32768))
  2238  00FD  00E3               	movwf	write_and_wait@cmd+1
  2239  00FE  3090               	movlw	low (STR_3| (0+32768))
  2240  00FF  00E4               	movwf	write_and_wait@res
  2241  0100  3083               	movlw	high (STR_3| (0+32768))
  2242  0101  00E5               	movwf	write_and_wait@res+1
  2243  0102  3186  2639  3180   	fcall	_write_and_wait
  2244  0105  0020               	movlb	0	; select bank0
  2245  0106  0863               	movf	?_write_and_wait+1,w
  2246  0107  0021               	movlb	1	; select bank1
  2247  0108  00E7               	movwf	(main@err+1)^(0+128)
  2248  0109  0020               	movlb	0	; select bank0
  2249  010A  0862               	movf	?_write_and_wait,w
  2250  010B  0021               	movlb	1	; select bank1
  2251  010C  00E6               	movwf	main@err^(0+128)
  2252                           
  2253                           ;main.c: 209: if (err) blink_leds(2, 6);
  2254  010D  0866               	movf	main@err^(0+128),w
  2255  010E  0467               	iorwf	(main@err+1)^(0+128),w
  2256  010F  1903               	btfsc	3,2
  2257  0110  291C               	goto	l1783
  2258  0111  3002               	movlw	2
  2259  0112  00F2               	movwf	blink_leds@n
  2260  0113  3000               	movlw	0
  2261  0114  00F3               	movwf	blink_leds@n+1
  2262  0115  3006               	movlw	6
  2263  0116  00F4               	movwf	blink_leds@c
  2264  0117  3000               	movlw	0
  2265  0118  00F5               	movwf	blink_leds@c+1
  2266  0119  3184  244D  3180   	fcall	_blink_leds
  2267  011C                     l1783:	
  2268                           
  2269                           ;main.c: 212: err = write_and_wait("PS,11223344556677889900AABBCCDDEEFF", "AOK");
  2270  011C  3001               	movlw	low (STR_12| (0+32768))
  2271  011D  0020               	movlb	0	; select bank0
  2272  011E  00E2               	movwf	write_and_wait@cmd
  2273  011F  3083               	movlw	high (STR_12| (0+32768))
  2274  0120  00E3               	movwf	write_and_wait@cmd+1
  2275  0121  3090               	movlw	low (STR_3| (0+32768))
  2276  0122  00E4               	movwf	write_and_wait@res
  2277  0123  3083               	movlw	high (STR_3| (0+32768))
  2278  0124  00E5               	movwf	write_and_wait@res+1
  2279  0125  3186  2639  3180   	fcall	_write_and_wait
  2280  0128  0020               	movlb	0	; select bank0
  2281  0129  0863               	movf	?_write_and_wait+1,w
  2282  012A  0021               	movlb	1	; select bank1
  2283  012B  00E7               	movwf	(main@err+1)^(0+128)
  2284  012C  0020               	movlb	0	; select bank0
  2285  012D  0862               	movf	?_write_and_wait,w
  2286  012E  0021               	movlb	1	; select bank1
  2287  012F  00E6               	movwf	main@err^(0+128)
  2288                           
  2289                           ;main.c: 213: if (err) blink_leds(2, 7);
  2290  0130  0866               	movf	main@err^(0+128),w
  2291  0131  0467               	iorwf	(main@err+1)^(0+128),w
  2292  0132  1903               	btfsc	3,2
  2293  0133  293F               	goto	l1789
  2294  0134  3002               	movlw	2
  2295  0135  00F2               	movwf	blink_leds@n
  2296  0136  3000               	movlw	0
  2297  0137  00F3               	movwf	blink_leds@n+1
  2298  0138  3007               	movlw	7
  2299  0139  00F4               	movwf	blink_leds@c
  2300  013A  3000               	movlw	0
  2301  013B  00F5               	movwf	blink_leds@c+1
  2302  013C  3184  244D  3180   	fcall	_blink_leds
  2303  013F                     l1789:	
  2304                           
  2305                           ;main.c: 216: err = write_and_wait("PC,010203040506070809000A0B0C0D0E0F,12,05", "AOK");
  2306  013F  30D7               	movlw	low (STR_14| (0+32768))
  2307  0140  0020               	movlb	0	; select bank0
  2308  0141  00E2               	movwf	write_and_wait@cmd
  2309  0142  3082               	movlw	high (STR_14| (0+32768))
  2310  0143  00E3               	movwf	write_and_wait@cmd+1
  2311  0144  3090               	movlw	low (STR_3| (0+32768))
  2312  0145  00E4               	movwf	write_and_wait@res
  2313  0146  3083               	movlw	high (STR_3| (0+32768))
  2314  0147  00E5               	movwf	write_and_wait@res+1
  2315  0148  3186  2639  3180   	fcall	_write_and_wait
  2316  014B  0020               	movlb	0	; select bank0
  2317  014C  0863               	movf	?_write_and_wait+1,w
  2318  014D  0021               	movlb	1	; select bank1
  2319  014E  00E7               	movwf	(main@err+1)^(0+128)
  2320  014F  0020               	movlb	0	; select bank0
  2321  0150  0862               	movf	?_write_and_wait,w
  2322  0151  0021               	movlb	1	; select bank1
  2323  0152  00E6               	movwf	main@err^(0+128)
  2324                           
  2325                           ;main.c: 217: if (err) blink_leds(2, 8);
  2326  0153  0866               	movf	main@err^(0+128),w
  2327  0154  0467               	iorwf	(main@err+1)^(0+128),w
  2328  0155  1903               	btfsc	3,2
  2329  0156  2962               	goto	l1795
  2330  0157  3002               	movlw	2
  2331  0158  00F2               	movwf	blink_leds@n
  2332  0159  3000               	movlw	0
  2333  015A  00F3               	movwf	blink_leds@n+1
  2334  015B  3008               	movlw	8
  2335  015C  00F4               	movwf	blink_leds@c
  2336  015D  3000               	movlw	0
  2337  015E  00F5               	movwf	blink_leds@c+1
  2338  015F  3184  244D  3180   	fcall	_blink_leds
  2339  0162                     l1795:	
  2340                           
  2341                           ;main.c: 220: err = write_and_wait("PC,FF0203040506070809000A0B0C0D0E0F,1A,03", "AOK");
  2342  0162  30AD               	movlw	low (STR_16| (0+32768))
  2343  0163  0020               	movlb	0	; select bank0
  2344  0164  00E2               	movwf	write_and_wait@cmd
  2345  0165  3082               	movlw	high (STR_16| (0+32768))
  2346  0166  00E3               	movwf	write_and_wait@cmd+1
  2347  0167  3090               	movlw	low (STR_3| (0+32768))
  2348  0168  00E4               	movwf	write_and_wait@res
  2349  0169  3083               	movlw	high (STR_3| (0+32768))
  2350  016A  00E5               	movwf	write_and_wait@res+1
  2351  016B  3186  2639  3180   	fcall	_write_and_wait
  2352  016E  0020               	movlb	0	; select bank0
  2353  016F  0863               	movf	?_write_and_wait+1,w
  2354  0170  0021               	movlb	1	; select bank1
  2355  0171  00E7               	movwf	(main@err+1)^(0+128)
  2356  0172  0020               	movlb	0	; select bank0
  2357  0173  0862               	movf	?_write_and_wait,w
  2358  0174  0021               	movlb	1	; select bank1
  2359  0175  00E6               	movwf	main@err^(0+128)
  2360                           
  2361                           ;main.c: 221: if (err) blink_leds(2, 9);
  2362  0176  0866               	movf	main@err^(0+128),w
  2363  0177  0467               	iorwf	(main@err+1)^(0+128),w
  2364  0178  1903               	btfsc	3,2
  2365  0179  2985               	goto	l1801
  2366  017A  3002               	movlw	2
  2367  017B  00F2               	movwf	blink_leds@n
  2368  017C  3000               	movlw	0
  2369  017D  00F3               	movwf	blink_leds@n+1
  2370  017E  3009               	movlw	9
  2371  017F  00F4               	movwf	blink_leds@c
  2372  0180  3000               	movlw	0
  2373  0181  00F5               	movwf	blink_leds@c+1
  2374  0182  3184  244D  3180   	fcall	_blink_leds
  2375  0185                     l1801:	
  2376                           
  2377                           ;main.c: 224: err = write_and_wait("R,1", "Reboot");
  2378  0185  3084               	movlw	low (STR_18| (0+32768))
  2379  0186  0020               	movlb	0	; select bank0
  2380  0187  00E2               	movwf	write_and_wait@cmd
  2381  0188  3083               	movlw	high (STR_18| (0+32768))
  2382  0189  00E3               	movwf	write_and_wait@cmd+1
  2383  018A  3078               	movlw	low (STR_19| (0+32768))
  2384  018B  00E4               	movwf	write_and_wait@res
  2385  018C  3083               	movlw	high (STR_19| (0+32768))
  2386  018D  00E5               	movwf	write_and_wait@res+1
  2387  018E  3186  2639  3180   	fcall	_write_and_wait
  2388  0191  0020               	movlb	0	; select bank0
  2389  0192  0863               	movf	?_write_and_wait+1,w
  2390  0193  0021               	movlb	1	; select bank1
  2391  0194  00E7               	movwf	(main@err+1)^(0+128)
  2392  0195  0020               	movlb	0	; select bank0
  2393  0196  0862               	movf	?_write_and_wait,w
  2394  0197  0021               	movlb	1	; select bank1
  2395  0198  00E6               	movwf	main@err^(0+128)
  2396                           
  2397                           ;main.c: 225: if (err) blink_leds(2, 3);
  2398  0199  0866               	movf	main@err^(0+128),w
  2399  019A  0467               	iorwf	(main@err+1)^(0+128),w
  2400  019B  1903               	btfsc	3,2
  2401  019C  29A8               	goto	l1807
  2402  019D  3002               	movlw	2
  2403  019E  00F2               	movwf	blink_leds@n
  2404  019F  3000               	movlw	0
  2405  01A0  00F3               	movwf	blink_leds@n+1
  2406  01A1  3003               	movlw	3
  2407  01A2  00F4               	movwf	blink_leds@c
  2408  01A3  3000               	movlw	0
  2409  01A4  00F5               	movwf	blink_leds@c+1
  2410  01A5  3184  244D  3180   	fcall	_blink_leds
  2411  01A8                     l1807:	
  2412                           
  2413                           ;main.c: 228: err = strcmp(read_line(), "CMD");
  2414  01A8  3088               	movlw	low (STR_1| (0+32768))
  2415  01A9  00F5               	movwf	strcmp@s2
  2416  01AA  3083               	movlw	high (STR_1| (0+32768))
  2417  01AB  00F6               	movwf	strcmp@s2+1
  2418  01AC  3184  24A5  3180   	fcall	_read_line
  2419  01AF  3185  2566  3180   	fcall	_strcmp
  2420  01B2  0876               	movf	?_strcmp+1,w
  2421  01B3  0021               	movlb	1	; select bank1
  2422  01B4  00E7               	movwf	(main@err+1)^(0+128)
  2423  01B5  0875               	movf	?_strcmp,w
  2424  01B6  00E6               	movwf	main@err^(0+128)
  2425                           
  2426                           ;main.c: 229: if (err) blink_leds(2, 4);
  2427  01B7  0866               	movf	main@err^(0+128),w
  2428  01B8  0467               	iorwf	(main@err+1)^(0+128),w
  2429  01B9  1903               	btfsc	3,2
  2430  01BA  29C6               	goto	l1813
  2431  01BB  3002               	movlw	2
  2432  01BC  00F2               	movwf	blink_leds@n
  2433  01BD  3000               	movlw	0
  2434  01BE  00F3               	movwf	blink_leds@n+1
  2435  01BF  3004               	movlw	4
  2436  01C0  00F4               	movwf	blink_leds@c
  2437  01C1  3000               	movlw	0
  2438  01C2  00F5               	movwf	blink_leds@c+1
  2439  01C3  3184  244D  3180   	fcall	_blink_leds
  2440  01C6                     l1813:	
  2441                           
  2442                           ;main.c: 232: err = write_and_wait("SUW,2A19,32", "AOK");
  2443  01C6  306C               	movlw	low (STR_21| (0+32768))
  2444  01C7  0020               	movlb	0	; select bank0
  2445  01C8  00E2               	movwf	write_and_wait@cmd
  2446  01C9  3083               	movlw	high (STR_21| (0+32768))
  2447  01CA  00E3               	movwf	write_and_wait@cmd+1
  2448  01CB  3090               	movlw	low (STR_3| (0+32768))
  2449  01CC  00E4               	movwf	write_and_wait@res
  2450  01CD  3083               	movlw	high (STR_3| (0+32768))
  2451  01CE  00E5               	movwf	write_and_wait@res+1
  2452  01CF  3186  2639  3180   	fcall	_write_and_wait
  2453  01D2  0020               	movlb	0	; select bank0
  2454  01D3  0863               	movf	?_write_and_wait+1,w
  2455  01D4  0021               	movlb	1	; select bank1
  2456  01D5  00E7               	movwf	(main@err+1)^(0+128)
  2457  01D6  0020               	movlb	0	; select bank0
  2458  01D7  0862               	movf	?_write_and_wait,w
  2459  01D8  0021               	movlb	1	; select bank1
  2460  01D9  00E6               	movwf	main@err^(0+128)
  2461                           
  2462                           ;main.c: 233: if (err) blink_leds(2, 5);
  2463  01DA  0866               	movf	main@err^(0+128),w
  2464  01DB  0467               	iorwf	(main@err+1)^(0+128),w
  2465  01DC  1903               	btfsc	3,2
  2466  01DD  29E9               	goto	l1819
  2467  01DE  3002               	movlw	2
  2468  01DF  00F2               	movwf	blink_leds@n
  2469  01E0  3000               	movlw	0
  2470  01E1  00F3               	movwf	blink_leds@n+1
  2471  01E2  3005               	movlw	5
  2472  01E3  00F4               	movwf	blink_leds@c
  2473  01E4  3000               	movlw	0
  2474  01E5  00F5               	movwf	blink_leds@c+1
  2475  01E6  3184  244D  3180   	fcall	_blink_leds
  2476  01E9                     l1819:	
  2477                           
  2478                           ;main.c: 236: err = write_and_wait("SUW,010203040506070809000A0B0C0D0E0F,AABBCCDDEE", "A
      +                          OK");
  2479  01E9  307D               	movlw	low (STR_23| (0+32768))
  2480  01EA  0020               	movlb	0	; select bank0
  2481  01EB  00E2               	movwf	write_and_wait@cmd
  2482  01EC  3082               	movlw	high (STR_23| (0+32768))
  2483  01ED  00E3               	movwf	write_and_wait@cmd+1
  2484  01EE  3090               	movlw	low (STR_3| (0+32768))
  2485  01EF  00E4               	movwf	write_and_wait@res
  2486  01F0  3083               	movlw	high (STR_3| (0+32768))
  2487  01F1  00E5               	movwf	write_and_wait@res+1
  2488  01F2  3186  2639  3180   	fcall	_write_and_wait
  2489  01F5  0020               	movlb	0	; select bank0
  2490  01F6  0863               	movf	?_write_and_wait+1,w
  2491  01F7  0021               	movlb	1	; select bank1
  2492  01F8  00E7               	movwf	(main@err+1)^(0+128)
  2493  01F9  0020               	movlb	0	; select bank0
  2494  01FA  0862               	movf	?_write_and_wait,w
  2495  01FB  0021               	movlb	1	; select bank1
  2496  01FC  00E6               	movwf	main@err^(0+128)
  2497                           
  2498                           ;main.c: 237: if (err) blink_leds(2, 10);
  2499  01FD  0866               	movf	main@err^(0+128),w
  2500  01FE  0467               	iorwf	(main@err+1)^(0+128),w
  2501  01FF  1903               	btfsc	3,2
  2502  0200  2A0C               	goto	l1825
  2503  0201  3002               	movlw	2
  2504  0202  00F2               	movwf	blink_leds@n
  2505  0203  3000               	movlw	0
  2506  0204  00F3               	movwf	blink_leds@n+1
  2507  0205  300A               	movlw	10
  2508  0206  00F4               	movwf	blink_leds@c
  2509  0207  3000               	movlw	0
  2510  0208  00F5               	movwf	blink_leds@c+1
  2511  0209  3184  244D  3180   	fcall	_blink_leds
  2512  020C                     l1825:	
  2513                           
  2514                           ;main.c: 253: int c = 0;
  2515  020C  0021               	movlb	1	; select bank1
  2516  020D  01E0               	clrf	main@c^(0+128)
  2517  020E  01E1               	clrf	(main@c+1)^(0+128)
  2518  020F                     l1827:	
  2519                           ;main.c: 254: while(1) {
  2520                           
  2521                           
  2522                           ;main.c: 264: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2523  020F  300B               	movlw	11
  2524  0210  0020               	movlb	0	; select bank0
  2525  0211  00E9               	movwf	??_main+1
  2526  0212  3026               	movlw	38
  2527  0213  00E8               	movwf	??_main
  2528  0214  305D               	movlw	93
  2529  0215                     u1717:	
  2530  0215  0B89               	decfsz	9,f
  2531  0216  2A15               	goto	u1717
  2532  0217  0BE8               	decfsz	??_main,f
  2533  0218  2A15               	goto	u1717
  2534  0219  0BE9               	decfsz	??_main+1,f
  2535  021A  2A15               	goto	u1717
  2536  021B  3200               	nop2
  2537                           
  2538                           ;main.c: 265: err = write_line("A,0050,07D0");
  2539  021C  3054               	movlw	low (STR_25| (0+32768))
  2540  021D  00F6               	movwf	write_line@line
  2541  021E  3083               	movlw	high (STR_25| (0+32768))
  2542  021F  00F7               	movwf	write_line@line+1
  2543  0220  3185  258D  3180   	fcall	_write_line
  2544  0223  0877               	movf	?_write_line+1,w
  2545  0224  0021               	movlb	1	; select bank1
  2546  0225  00E7               	movwf	(main@err+1)^(0+128)
  2547  0226  0876               	movf	?_write_line,w
  2548  0227  00E6               	movwf	main@err^(0+128)
  2549                           
  2550                           ;main.c: 266: if (err) blink_leds(2, 14);
  2551  0228  0866               	movf	main@err^(0+128),w
  2552  0229  0467               	iorwf	(main@err+1)^(0+128),w
  2553  022A  1903               	btfsc	3,2
  2554  022B  2A37               	goto	l329
  2555  022C  3002               	movlw	2
  2556  022D  00F2               	movwf	blink_leds@n
  2557  022E  3000               	movlw	0
  2558  022F  00F3               	movwf	blink_leds@n+1
  2559  0230  300E               	movlw	14
  2560  0231  00F4               	movwf	blink_leds@c
  2561  0232  3000               	movlw	0
  2562  0233  00F5               	movwf	blink_leds@c+1
  2563  0234  3184  244D  3180   	fcall	_blink_leds
  2564  0237                     l329:	
  2565                           
  2566                           ;main.c: 267: adcResult = ADC_GetConversion(0x4);
  2567  0237  3004               	movlw	4
  2568  0238  3186  26A7  3180   	fcall	_ADC_GetConversion
  2569  023B  0873               	movf	?_ADC_GetConversion+1,w
  2570  023C  0021               	movlb	1	; select bank1
  2571  023D  00E9               	movwf	(_adcResult+1)^(0+128)
  2572  023E  0872               	movf	?_ADC_GetConversion,w
  2573  023F  00E8               	movwf	_adcResult^(0+128)
  2574                           
  2575                           ;main.c: 268: char result[4];
  2576                           ;main.c: 269: char command[64]="SUW,010203040506070809000A0B0C0D0E0F,";
  2577  0240  3020               	movlw	low main@F4456
  2578  0241  0086               	movwf	6
  2579  0242  3001               	movlw	high main@F4456
  2580  0243  0087               	movwf	7
  2581  0244  30A0               	movlw	low main@command
  2582  0245  0084               	movwf	4
  2583  0246  3000               	movlw	high main@command
  2584  0247  0085               	movwf	5
  2585  0248  3040               	movlw	64
  2586  0249  0020               	movlb	0	; select bank0
  2587  024A  00E8               	movwf	??_main
  2588  024B                     u1690:	
  2589  024B  0016               	moviw fsr1++
  2590  024C  001A               	movwi fsr0++
  2591  024D  0BE8               	decfsz	??_main,f
  2592  024E  2A4B               	goto	u1690
  2593                           
  2594                           ;main.c: 273: sprintf(result, "%X", adcResult);
  2595  024F  3094               	movlw	low (STR_26| (0+32768))
  2596  0250  00A0               	movwf	sprintf@f
  2597  0251  3083               	movlw	high (STR_26| (0+32768))
  2598  0252  00A1               	movwf	sprintf@f+1
  2599  0253  0021               	movlb	1	; select bank1
  2600  0254  0869               	movf	(_adcResult+1)^(0+128),w
  2601  0255  0020               	movlb	0	; select bank0
  2602  0256  00A3               	movwf	?_sprintf+3
  2603  0257  0021               	movlb	1	; select bank1
  2604  0258  0868               	movf	_adcResult^(0+128),w
  2605  0259  0020               	movlb	0	; select bank0
  2606  025A  00A2               	movwf	?_sprintf+2
  2607  025B  30E2               	movlw	(low (main@result| 0))& (0+255)
  2608  025C  3183  239A  3180   	fcall	_sprintf
  2609                           
  2610                           ;main.c: 274: err=write_line(strcat(command,result));
  2611  025F  30E2               	movlw	(low (main@result| 0))& (0+255)
  2612  0260  0020               	movlb	0	; select bank0
  2613  0261  00E8               	movwf	??_main
  2614  0262  0868               	movf	??_main,w
  2615  0263  00F2               	movwf	strcat@from
  2616  0264  30A0               	movlw	(low (main@command| 0))& (0+255)
  2617  0265  3185  25B3  3180   	fcall	_strcat
  2618  0268  00F6               	movwf	write_line@line
  2619  0269  3000               	movlw	0
  2620  026A  00F7               	movwf	write_line@line+1
  2621  026B  3185  258D  3180   	fcall	_write_line
  2622  026E  0877               	movf	?_write_line+1,w
  2623  026F  0021               	movlb	1	; select bank1
  2624  0270  00E7               	movwf	(main@err+1)^(0+128)
  2625  0271  0876               	movf	?_write_line,w
  2626  0272  00E6               	movwf	main@err^(0+128)
  2627  0273  2A0F               	goto	l1827
  2628  0274                     l338:	
  2629                           ;main.c: 285: while(1);
  2630                           
  2631                           ;main.c: 282: if (err) blink_leds(3,9);
  2632                           
  2633                           ;main.c: 281: err = strcmp(read_line(), "END");
  2634                           
  2635                           ;main.c: 275: }
  2636                           ;main.c: 278: do { LATAbits.LATA4 = 0; } while(0);
  2637                           
  2638  0274  2A74               	goto	l338
  2639  0275                     __end_of_main:	
  2640                           
  2641                           	psect	text1
  2642  0639                     __ptext1:	
  2643 ;; *************** function _write_and_wait *****************
  2644 ;; Defined at:
  2645 ;;		line 167 in file "main.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  cmd             2   66[BANK0 ] PTR unsigned char 
  2648 ;;		 -> STR_23(48), STR_21(12), STR_18(4), STR_16(42), 
  2649 ;;		 -> STR_14(42), STR_12(36), STR_10(3), STR_8(18), 
  2650 ;;		 -> STR_6(12), STR_4(12), STR_2(5), 
  2651 ;;  res             2   68[BANK0 ] PTR unsigned char 
  2652 ;;		 -> STR_24(4), STR_22(4), STR_19(7), STR_17(4), 
  2653 ;;		 -> STR_15(4), STR_13(4), STR_11(4), STR_9(4), 
  2654 ;;		 -> STR_7(4), STR_5(4), STR_3(4), 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  line            1   71[BANK0 ] PTR unsigned char 
  2657 ;;		 -> read_line@c(64), 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  2   66[BANK0 ] int 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2667 ;;      Params:         0       4       0       0
  2668 ;;      Locals:         0       1       0       0
  2669 ;;      Temps:          0       1       0       0
  2670 ;;      Totals:         0       6       0       0
  2671 ;;Total ram usage:        6 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    4
  2674 ;; This function calls:
  2675 ;;		_read_line
  2676 ;;		_strcmp
  2677 ;;		_write_line
  2678 ;; This function is called by:
  2679 ;;		_main
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function _write_and_wait
  2685  0639                     _write_and_wait:	
  2686                           
  2687                           ;main.c: 168: write_line(cmd);
  2688                           
  2689                           ;incstack = 0
  2690                           ; Regs used in _write_and_wait: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2691  0639  0020               	movlb	0	; select bank0
  2692  063A  0863               	movf	write_and_wait@cmd+1,w
  2693  063B  00F7               	movwf	write_line@line+1
  2694  063C  0862               	movf	write_and_wait@cmd,w
  2695  063D  00F6               	movwf	write_line@line
  2696  063E  3185  258D  3186   	fcall	_write_line
  2697                           
  2698                           ;main.c: 169: char * line = read_line();
  2699  0641  3184  24A5  3186   	fcall	_read_line
  2700  0644  0020               	movlb	0	; select bank0
  2701  0645  00E6               	movwf	??_write_and_wait
  2702  0646  0866               	movf	??_write_and_wait,w
  2703  0647  00E7               	movwf	write_and_wait@line
  2704                           
  2705                           ;main.c: 170: return strcmp(line, res);
  2706  0648  0865               	movf	write_and_wait@res+1,w
  2707  0649  00F6               	movwf	strcmp@s2+1
  2708  064A  0864               	movf	write_and_wait@res,w
  2709  064B  00F5               	movwf	strcmp@s2
  2710  064C  0867               	movf	write_and_wait@line,w
  2711  064D  3185  2566         	fcall	_strcmp
  2712  064F  0876               	movf	?_strcmp+1,w
  2713  0650  0020               	movlb	0	; select bank0
  2714  0651  00E3               	movwf	?_write_and_wait+1
  2715  0652  0875               	movf	?_strcmp,w
  2716  0653  00E2               	movwf	?_write_and_wait
  2717  0654  0008               	return
  2718  0655                     __end_of_write_and_wait:	
  2719                           
  2720                           	psect	text2
  2721  058D                     __ptext2:	
  2722 ;; *************** function _write_line *****************
  2723 ;; Defined at:
  2724 ;;		line 153 in file "main.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  line            2    6[COMMON] PTR unsigned char 
  2727 ;;		 -> main@command(64), STR_25(12), STR_23(48), STR_21(12), 
  2728 ;;		 -> STR_18(4), STR_16(42), STR_14(42), STR_12(36), 
  2729 ;;		 -> STR_10(3), STR_8(18), STR_6(12), STR_4(12), 
  2730 ;;		 -> STR_2(5), 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  i               2    0[BANK0 ] int 
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  2    6[COMMON] int 
  2735 ;; Registers used:
  2736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2742 ;;      Params:         2       0       0       0
  2743 ;;      Locals:         0       2       0       0
  2744 ;;      Temps:          1       0       0       0
  2745 ;;      Totals:         3       2       0       0
  2746 ;;Total ram usage:        5 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; Hardware stack levels required when called:    3
  2749 ;; This function calls:
  2750 ;;		_EUSART_Write
  2751 ;; This function is called by:
  2752 ;;		_write_and_wait
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           
  2758                           ;psect for function _write_line
  2759  058D                     _write_line:	
  2760                           
  2761                           ;main.c: 154: int i = 0;
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in _write_line: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2765  058D  0020               	movlb	0	; select bank0
  2766  058E  01A0               	clrf	write_line@i
  2767  058F  01A1               	clrf	write_line@i+1
  2768  0590                     l1721:	
  2769                           ;main.c: 155: while(line[i] != '\0') {
  2770                           
  2771  0590  0876               	movf	write_line@line,w
  2772  0591  0720               	addwf	write_line@i,w
  2773  0592  0084               	movwf	4
  2774  0593  0877               	movf	write_line@line+1,w
  2775  0594  3D21               	addwfc	write_line@i+1,w
  2776  0595  0085               	movwf	5
  2777  0596  0012               	moviw fsr0++
  2778  0597  1903               	btfsc	3,2
  2779  0598  2DA9               	goto	l1723
  2780                           
  2781                           ;main.c: 156: EUSART_Write(line[i++]);
  2782  0599  0876               	movf	write_line@line,w
  2783  059A  0720               	addwf	write_line@i,w
  2784  059B  0084               	movwf	4
  2785  059C  0877               	movf	write_line@line+1,w
  2786  059D  3D21               	addwfc	write_line@i+1,w
  2787  059E  0085               	movwf	5
  2788  059F  0800               	movf	0,w	;code access
  2789  05A0  3185  25D8  3185   	fcall	_EUSART_Write
  2790  05A3  3001               	movlw	1
  2791  05A4  0020               	movlb	0	; select bank0
  2792  05A5  07A0               	addwf	write_line@i,f
  2793  05A6  3000               	movlw	0
  2794  05A7  3DA1               	addwfc	write_line@i+1,f
  2795  05A8  2D90               	goto	l1721
  2796  05A9                     l1723:	
  2797                           
  2798                           ;main.c: 157: }
  2799                           ;main.c: 158: EUSART_Write('\r');
  2800  05A9  300D               	movlw	13
  2801  05AA  3185  25D8  3185   	fcall	_EUSART_Write
  2802                           
  2803                           ;main.c: 159: EUSART_Write('\n');
  2804  05AD  300A               	movlw	10
  2805  05AE  3185  25D8         	fcall	_EUSART_Write
  2806                           
  2807                           ;main.c: 160: return (0);
  2808  05B0  01F6               	clrf	?_write_line
  2809  05B1  01F7               	clrf	?_write_line+1
  2810  05B2  0008               	return
  2811  05B3                     __end_of_write_line:	
  2812                           
  2813                           	psect	text3
  2814  05D8                     __ptext3:	
  2815 ;; *************** function _EUSART_Write *****************
  2816 ;; Defined at:
  2817 ;;		line 132 in file "mcc_generated_files/eusart.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  txData          1    wreg     unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  txData          1    3[COMMON] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2831 ;;      Params:         0       0       0       0
  2832 ;;      Locals:         1       0       0       0
  2833 ;;      Temps:          1       0       0       0
  2834 ;;      Totals:         2       0       0       0
  2835 ;;Total ram usage:        2 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    2
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_write_line
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           
  2846                           ;psect for function _EUSART_Write
  2847  05D8                     _EUSART_Write:	
  2848                           
  2849                           ;incstack = 0
  2850                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  2851                           ;EUSART_Write@txData stored from wreg
  2852  05D8  00F3               	movwf	EUSART_Write@txData
  2853  05D9                     l1699:	
  2854                           ;eusart.c: 135: {
  2855                           
  2856                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  2857                           
  2858  05D9  0020               	movlb	0	; select bank0
  2859  05DA  086D               	movf	_eusartTxBufferRemaining,w	;volatile
  2860  05DB  1903               	btfsc	3,2
  2861  05DC  2DD9               	goto	l1699
  2862                           
  2863                           ;eusart.c: 136: }
  2864                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  2865  05DD  0021               	movlb	1	; select bank1
  2866  05DE  1A11               	btfsc	17,4	;volatile
  2867  05DF  2DE4               	goto	l105
  2868                           
  2869                           ;eusart.c: 139: {
  2870                           ;eusart.c: 140: TXREG = txData;
  2871  05E0  0873               	movf	EUSART_Write@txData,w
  2872  05E1  0023               	movlb	3	; select bank3
  2873  05E2  009A               	movwf	26	;volatile
  2874                           
  2875                           ;eusart.c: 141: }
  2876  05E3  2DF9               	goto	l1713
  2877  05E4                     l105:	
  2878                           
  2879                           ;eusart.c: 142: else
  2880                           ;eusart.c: 143: {
  2881                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  2882  05E4  1211               	bcf	17,4	;volatile
  2883                           
  2884                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  2885  05E5  0873               	movf	EUSART_Write@txData,w
  2886  05E6  00F2               	movwf	??_EUSART_Write
  2887  05E7  087B               	movf	_eusartTxHead,w
  2888  05E8  3E68               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  2889  05E9  0086               	movwf	6
  2890  05EA  3001               	movlw	1	; select bank2/3
  2891  05EB  0087               	movwf	7
  2892  05EC  0872               	movf	??_EUSART_Write,w
  2893  05ED  0081               	movwf	1
  2894  05EE  3001               	movlw	1
  2895  05EF  00F2               	movwf	??_EUSART_Write
  2896  05F0  0872               	movf	??_EUSART_Write,w
  2897  05F1  07FB               	addwf	_eusartTxHead,f	;volatile
  2898                           
  2899                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2900  05F2  3008               	movlw	8
  2901  05F3  027B               	subwf	_eusartTxHead,w	;volatile
  2902  05F4  1803               	btfsc	3,0
  2903                           
  2904                           ;eusart.c: 147: {
  2905                           ;eusart.c: 148: eusartTxHead = 0;
  2906  05F5  01FB               	clrf	_eusartTxHead	;volatile
  2907                           
  2908                           ;eusart.c: 149: }
  2909                           ;eusart.c: 150: eusartTxBufferRemaining--;
  2910  05F6  3001               	movlw	1
  2911  05F7  0020               	movlb	0	; select bank0
  2912  05F8  02ED               	subwf	_eusartTxBufferRemaining,f	;volatile
  2913  05F9                     l1713:	
  2914                           
  2915                           ;eusart.c: 151: }
  2916                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  2917  05F9  0021               	movlb	1	; select bank1
  2918  05FA  1611               	bsf	17,4	;volatile
  2919  05FB  0008               	return
  2920  05FC                     __end_of_EUSART_Write:	
  2921                           
  2922                           	psect	text4
  2923  0566                     __ptext4:	
  2924 ;; *************** function _strcmp *****************
  2925 ;; Defined at:
  2926 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcmp.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  s1              1    wreg     PTR const unsigned char 
  2929 ;;		 -> read_line@c(64), 
  2930 ;;  s2              2    5[COMMON] PTR const unsigned char 
  2931 ;;		 -> STR_27(4), STR_24(4), STR_22(4), STR_20(4), 
  2932 ;;		 -> STR_19(7), STR_17(4), STR_15(4), STR_13(4), 
  2933 ;;		 -> STR_11(4), STR_9(4), STR_7(4), STR_5(4), 
  2934 ;;		 -> STR_3(4), STR_1(4), 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  s1              1    9[COMMON] PTR const unsigned char 
  2937 ;;		 -> read_line@c(64), 
  2938 ;;  r               1    8[COMMON] char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  2    5[COMMON] int 
  2941 ;; Registers used:
  2942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2948 ;;      Params:         2       0       0       0
  2949 ;;      Locals:         2       0       0       0
  2950 ;;      Temps:          1       0       0       0
  2951 ;;      Totals:         5       0       0       0
  2952 ;;Total ram usage:        5 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    2
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_write_and_wait
  2959 ;;		_main
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           
  2964                           ;psect for function _strcmp
  2965  0566                     _strcmp:	
  2966                           
  2967                           ;incstack = 0
  2968                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  2969                           ;strcmp@s1 stored from wreg
  2970  0566  00F9               	movwf	strcmp@s1
  2971  0567  2D70               	goto	l1369
  2972  0568                     l1367:	
  2973  0568  3001               	movlw	1
  2974  0569  00F7               	movwf	??_strcmp
  2975  056A  0877               	movf	??_strcmp,w
  2976  056B  07F9               	addwf	strcmp@s1,f
  2977  056C  3001               	movlw	1
  2978  056D  07F5               	addwf	strcmp@s2,f
  2979  056E  3000               	movlw	0
  2980  056F  3DF6               	addwfc	strcmp@s2+1,f
  2981  0570                     l1369:	
  2982  0570  0879               	movf	strcmp@s1,w
  2983  0571  0086               	movwf	6
  2984  0572  0187               	clrf	7
  2985  0573  0875               	movf	strcmp@s2,w
  2986  0574  0084               	movwf	4
  2987  0575  0876               	movf	strcmp@s2+1,w
  2988  0576  0085               	movwf	5
  2989  0577  0800               	movf	0,w	;code access
  2990  0578  3AFF               	xorlw	255
  2991  0579  3E01               	addlw	1
  2992  057A  0701               	addwf	1,w
  2993  057B  00F7               	movwf	??_strcmp
  2994  057C  0877               	movf	??_strcmp,w
  2995  057D  00F8               	movwf	strcmp@r
  2996  057E  0878               	movf	strcmp@r,w
  2997  057F  1D03               	btfss	3,2
  2998  0580  2D87               	goto	l1373
  2999  0581  0879               	movf	strcmp@s1,w
  3000  0582  0086               	movwf	6
  3001  0583  0187               	clrf	7
  3002  0584  0801               	movf	1,w
  3003  0585  1D03               	btfss	3,2
  3004  0586  2D68               	goto	l1367
  3005  0587                     l1373:	
  3006  0587  0878               	movf	strcmp@r,w
  3007  0588  00F5               	movwf	?_strcmp
  3008  0589  01F6               	clrf	?_strcmp+1
  3009  058A  1BF5               	btfsc	?_strcmp,7
  3010  058B  03F6               	decf	?_strcmp+1,f
  3011  058C  0008               	return
  3012  058D                     __end_of_strcmp:	
  3013                           
  3014                           	psect	text5
  3015  04A5                     __ptext5:	
  3016 ;; *************** function _read_line *****************
  3017 ;; Defined at:
  3018 ;;		line 132 in file "main.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  c              64    0[BANK0 ] unsigned char [64]
  3023 ;;  i               2   64[BANK0 ] int 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      PTR unsigned char 
  3026 ;; Registers used:
  3027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3033 ;;      Params:         0       0       0       0
  3034 ;;      Locals:         0      66       0       0
  3035 ;;      Temps:          1       0       0       0
  3036 ;;      Totals:         1      66       0       0
  3037 ;;Total ram usage:       67 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; Hardware stack levels required when called:    3
  3040 ;; This function calls:
  3041 ;;		_EUSART_Read
  3042 ;; This function is called by:
  3043 ;;		_write_and_wait
  3044 ;;		_main
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           
  3049                           ;psect for function _read_line
  3050  04A5                     _read_line:	
  3051  04A5                     l293:	
  3052                           ;incstack = 0
  3053                           ; Regs used in _read_line: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3054                           ;main.c: 133: char c[64];
  3055                           ;main.c: 135: do {
  3056                           
  3057                           
  3058                           ;main.c: 136: c[0] = EUSART_Read();
  3059  04A5  3185  25FC  3184   	fcall	_EUSART_Read
  3060  04A8  00F4               	movwf	??_read_line
  3061  04A9  0874               	movf	??_read_line,w
  3062  04AA  0020               	movlb	0	; select bank0
  3063  04AB  00A0               	movwf	read_line@c
  3064                           
  3065                           ;main.c: 137: } while (c[0] == '\0');
  3066  04AC  0820               	movf	read_line@c,w
  3067  04AD  1903               	btfsc	3,2
  3068  04AE  2CA5               	goto	l293
  3069                           
  3070                           ;main.c: 139: int i = 0;
  3071  04AF  01E0               	clrf	read_line@i
  3072  04B0  01E1               	clrf	read_line@i+1
  3073  04B1                     l1335:	
  3074                           ;main.c: 140: do {
  3075                           
  3076                           
  3077                           ;main.c: 141: c[++i] = EUSART_Read();
  3078  04B1  3185  25FC  3184   	fcall	_EUSART_Read
  3079  04B4  00F4               	movwf	??_read_line
  3080  04B5  3001               	movlw	1
  3081  04B6  0020               	movlb	0	; select bank0
  3082  04B7  07E0               	addwf	read_line@i,f
  3083  04B8  3000               	movlw	0
  3084  04B9  3DE1               	addwfc	read_line@i+1,f
  3085  04BA  0860               	movf	read_line@i,w
  3086  04BB  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3087  04BC  0086               	movwf	6
  3088  04BD  0187               	clrf	7
  3089  04BE  0874               	movf	??_read_line,w
  3090  04BF  0081               	movwf	1
  3091                           
  3092                           ;main.c: 142: } while (c[i] != '\n' && i < 64);
  3093  04C0  0860               	movf	read_line@i,w
  3094  04C1  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3095  04C2  0086               	movwf	6
  3096  04C3  0187               	clrf	7
  3097  04C4  300A               	movlw	10
  3098  04C5  0601               	xorwf	1,w
  3099  04C6  1903               	btfsc	3,2
  3100  04C7  2CD3               	goto	l1341
  3101  04C8  0861               	movf	read_line@i+1,w
  3102  04C9  3A80               	xorlw	128
  3103  04CA  00F4               	movwf	??_read_line
  3104  04CB  3080               	movlw	128
  3105  04CC  0274               	subwf	??_read_line,w
  3106  04CD  1D03               	skipz
  3107  04CE  2CD1               	goto	u875
  3108  04CF  3040               	movlw	64
  3109  04D0  0260               	subwf	read_line@i,w
  3110  04D1                     u875:	
  3111  04D1  1C03               	skipc
  3112  04D2  2CB1               	goto	l1335
  3113  04D3                     l1341:	
  3114                           
  3115                           ;main.c: 144: if (c[i] == '\n') c[i] = '\0';
  3116  04D3  0020               	movlb	0	; select bank0
  3117  04D4  0860               	movf	read_line@i,w
  3118  04D5  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3119  04D6  0086               	movwf	6
  3120  04D7  0187               	clrf	7
  3121  04D8  300A               	movlw	10
  3122  04D9  0601               	xorwf	1,w
  3123  04DA  1D03               	btfss	3,2
  3124  04DB  2CE1               	goto	l299
  3125  04DC  0860               	movf	read_line@i,w
  3126  04DD  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3127  04DE  0086               	movwf	6
  3128  04DF  0187               	clrf	7
  3129  04E0  0181               	clrf	1
  3130  04E1                     l299:	
  3131                           
  3132                           ;main.c: 145: if (c[i-1] == '\r') c[i-1] = '\0';
  3133  04E1  0860               	movf	read_line@i,w
  3134  04E2  3EFF               	addlw	255
  3135  04E3  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3136  04E4  0086               	movwf	6
  3137  04E5  0187               	clrf	7
  3138  04E6  300D               	movlw	13
  3139  04E7  0601               	xorwf	1,w
  3140  04E8  1D03               	btfss	3,2
  3141  04E9  2CF0               	goto	l1347
  3142  04EA  0860               	movf	read_line@i,w
  3143  04EB  3EFF               	addlw	255
  3144  04EC  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3145  04ED  0086               	movwf	6
  3146  04EE  0187               	clrf	7
  3147  04EF  0181               	clrf	1
  3148  04F0                     l1347:	
  3149                           
  3150                           ;main.c: 146: return c;
  3151  04F0  3020               	movlw	(low (read_line@c| 0))& (0+255)
  3152  04F1  0008               	return
  3153  04F2                     __end_of_read_line:	
  3154                           
  3155                           	psect	text6
  3156  05FC                     __ptext6:	
  3157 ;; *************** function _EUSART_Read *****************
  3158 ;; Defined at:
  3159 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;		None
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  readValue       1    3[COMMON] unsigned char 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      unsigned char 
  3166 ;; Registers used:
  3167 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3173 ;;      Params:         0       0       0       0
  3174 ;;      Locals:         1       0       0       0
  3175 ;;      Temps:          1       0       0       0
  3176 ;;      Totals:         2       0       0       0
  3177 ;;Total ram usage:        2 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    2
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_read_line
  3184 ;;		_show_input_leds
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           
  3189                           ;psect for function _EUSART_Read
  3190  05FC                     _EUSART_Read:	
  3191                           
  3192                           ;eusart.c: 114: uint8_t readValue = 0;
  3193                           
  3194                           ;incstack = 0
  3195                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3196  05FC  01F3               	clrf	EUSART_Read@readValue
  3197  05FD                     l1243:	
  3198                           ;eusart.c: 117: {
  3199                           
  3200                           ;eusart.c: 116: while(0 == eusartRxCount)
  3201                           
  3202  05FD  0020               	movlb	0	; select bank0
  3203  05FE  086A               	movf	_eusartRxCount,w	;volatile
  3204  05FF  1903               	btfsc	3,2
  3205  0600  2DFD               	goto	l1243
  3206                           
  3207                           ;eusart.c: 118: }
  3208                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  3209  0601  086B               	movf	_eusartRxTail,w
  3210  0602  3E60               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3211  0603  0086               	movwf	6
  3212  0604  3001               	movlw	1	; select bank2/3
  3213  0605  0087               	movwf	7
  3214  0606  0801               	movf	1,w
  3215  0607  00F2               	movwf	??_EUSART_Read
  3216  0608  0872               	movf	??_EUSART_Read,w
  3217  0609  00F3               	movwf	EUSART_Read@readValue
  3218  060A  3001               	movlw	1
  3219  060B  00F2               	movwf	??_EUSART_Read
  3220  060C  0872               	movf	??_EUSART_Read,w
  3221  060D  07EB               	addwf	_eusartRxTail,f	;volatile
  3222                           
  3223                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3224  060E  3008               	movlw	8
  3225  060F  026B               	subwf	_eusartRxTail,w	;volatile
  3226  0610  1803               	btfsc	3,0
  3227                           
  3228                           ;eusart.c: 122: {
  3229                           ;eusart.c: 123: eusartRxTail = 0;
  3230  0611  01EB               	clrf	_eusartRxTail	;volatile
  3231                           
  3232                           ;eusart.c: 124: }
  3233                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  3234  0612  0021               	movlb	1	; select bank1
  3235  0613  1291               	bcf	17,5	;volatile
  3236                           
  3237                           ;eusart.c: 126: eusartRxCount--;
  3238  0614  3001               	movlw	1
  3239  0615  0020               	movlb	0	; select bank0
  3240  0616  02EA               	subwf	_eusartRxCount,f	;volatile
  3241                           
  3242                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  3243  0617  0021               	movlb	1	; select bank1
  3244  0618  1691               	bsf	17,5	;volatile
  3245                           
  3246                           ;eusart.c: 129: return readValue;
  3247  0619  0873               	movf	EUSART_Read@readValue,w
  3248  061A  0008               	return
  3249  061B                     __end_of_EUSART_Read:	
  3250                           
  3251                           	psect	text7
  3252  05B3                     __ptext7:	
  3253 ;; *************** function _strcat *****************
  3254 ;; Defined at:
  3255 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcat.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  to              1    wreg     PTR unsigned char 
  3258 ;;		 -> main@command(64), 
  3259 ;;  from            1    2[COMMON] PTR const unsigned char 
  3260 ;;		 -> main@result(4), 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  to              1    4[COMMON] PTR unsigned char 
  3263 ;;		 -> main@command(64), 
  3264 ;;  cp              1    5[COMMON] PTR unsigned char 
  3265 ;;		 -> main@command(64), 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      PTR unsigned char 
  3268 ;; Registers used:
  3269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3275 ;;      Params:         1       0       0       0
  3276 ;;      Locals:         2       0       0       0
  3277 ;;      Temps:          1       0       0       0
  3278 ;;      Totals:         4       0       0       0
  3279 ;;Total ram usage:        4 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    2
  3282 ;; This function calls:
  3283 ;;		Nothing
  3284 ;; This function is called by:
  3285 ;;		_main
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           
  3290                           ;psect for function _strcat
  3291  05B3                     _strcat:	
  3292                           
  3293                           ;incstack = 0
  3294                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0]
  3295                           ;strcat@to stored from wreg
  3296  05B3  00F4               	movwf	strcat@to
  3297  05B4  0874               	movf	strcat@to,w
  3298  05B5  00F3               	movwf	??_strcat
  3299  05B6  0873               	movf	??_strcat,w
  3300  05B7  00F5               	movwf	strcat@cp
  3301  05B8                     l1555:	
  3302  05B8  0875               	movf	strcat@cp,w
  3303  05B9  0086               	movwf	6
  3304  05BA  0187               	clrf	7
  3305  05BB  0801               	movf	1,w
  3306  05BC  1903               	btfsc	3,2
  3307  05BD  2DCB               	goto	l1559
  3308  05BE  3001               	movlw	1
  3309  05BF  00F3               	movwf	??_strcat
  3310  05C0  0873               	movf	??_strcat,w
  3311  05C1  07F5               	addwf	strcat@cp,f
  3312  05C2  2DB8               	goto	l1555
  3313  05C3                     l1557:	
  3314  05C3  3001               	movlw	1
  3315  05C4  00F3               	movwf	??_strcat
  3316  05C5  0873               	movf	??_strcat,w
  3317  05C6  07F5               	addwf	strcat@cp,f
  3318  05C7  3001               	movlw	1
  3319  05C8  00F3               	movwf	??_strcat
  3320  05C9  0873               	movf	??_strcat,w
  3321  05CA  07F2               	addwf	strcat@from,f
  3322  05CB                     l1559:	
  3323  05CB  0875               	movf	strcat@cp,w
  3324  05CC  0086               	movwf	6
  3325  05CD  0187               	clrf	7
  3326  05CE  0872               	movf	strcat@from,w
  3327  05CF  0084               	movwf	4
  3328  05D0  0185               	clrf	5
  3329  05D1  0800               	movf	0,w
  3330  05D2  3FC0               	movwi [0]fsr1
  3331  05D3  0889               	movf	9,f
  3332  05D4  1D03               	btfss	3,2
  3333  05D5  2DC3               	goto	l1557
  3334  05D6  0874               	movf	strcat@to,w
  3335  05D7  0008               	return
  3336  05D8                     __end_of_strcat:	
  3337                           
  3338                           	psect	text8
  3339  039A                     __ptext8:	
  3340 ;; *************** function _sprintf *****************
  3341 ;; Defined at:
  3342 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  sp              1    wreg     PTR unsigned char 
  3345 ;;		 -> main@result(4), 
  3346 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  3347 ;;		 -> STR_26(3), 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  3350 ;;		 -> main@result(4), 
  3351 ;;  idx             1    9[BANK0 ] unsigned char 
  3352 ;;  tmpval          4    0        struct .
  3353 ;;  val             2   11[BANK0 ] unsigned int 
  3354 ;;  cp              2    0        PTR const unsigned char 
  3355 ;;  len             2    0        unsigned int 
  3356 ;;  c               1   15[BANK0 ] char 
  3357 ;;  prec            1   13[BANK0 ] char 
  3358 ;;  ap              1   10[BANK0 ] PTR void [1]
  3359 ;;		 -> ?_sprintf(2), 
  3360 ;;  flag            1    8[BANK0 ] unsigned char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  2    0[BANK0 ] int 
  3363 ;; Registers used:
  3364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3370 ;;      Params:         0       4       0       0
  3371 ;;      Locals:         0       8       0       0
  3372 ;;      Temps:          0       4       0       0
  3373 ;;      Totals:         0      16       0       0
  3374 ;;Total ram usage:       16 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    3
  3377 ;; This function calls:
  3378 ;;		___lwdiv
  3379 ;; This function is called by:
  3380 ;;		_main
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           
  3385                           ;psect for function _sprintf
  3386  039A                     _sprintf:	
  3387                           
  3388                           ;incstack = 0
  3389                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3390                           ;sprintf@sp stored from wreg
  3391  039A  0020               	movlb	0	; select bank0
  3392  039B  00AE               	movwf	sprintf@sp
  3393                           
  3394                           ;doprnt.c: 494: va_list ap;
  3395                           ;doprnt.c: 499: signed char c;
  3396                           ;doprnt.c: 506: signed char prec;
  3397                           ;doprnt.c: 508: unsigned char flag;
  3398                           ;doprnt.c: 523: union {
  3399                           ;doprnt.c: 524: unsigned long vd;
  3400                           ;doprnt.c: 525: double integ;
  3401                           ;doprnt.c: 526: } tmpval;
  3402                           ;doprnt.c: 528: unsigned int val;
  3403                           ;doprnt.c: 529: unsigned len;
  3404                           ;doprnt.c: 530: const char * cp;
  3405                           ;doprnt.c: 533: *ap = __va_start();
  3406  039C  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3407  039D  00A4               	movwf	??_sprintf
  3408  039E  0824               	movf	??_sprintf,w
  3409  039F  00AA               	movwf	sprintf@ap
  3410  03A0                     l1545:	
  3411                           ;doprnt.c: 536: while(c = *f++) {
  3412                           
  3413  03A0  0821               	movf	sprintf@f+1,w
  3414  03A1  00A5               	movwf	??_sprintf+1
  3415  03A2  0820               	movf	sprintf@f,w
  3416  03A3  00A4               	movwf	??_sprintf
  3417  03A4  0AA0               	incf	sprintf@f,f
  3418  03A5  1903               	skipnz
  3419  03A6  0AA1               	incf	sprintf@f+1,f
  3420  03A7  0824               	movf	??_sprintf,w
  3421  03A8  0084               	movwf	4
  3422  03A9  0825               	movf	??_sprintf+1,w
  3423  03AA  0085               	movwf	5
  3424  03AB  0800               	movf	0,w	;code access
  3425  03AC  00A6               	movwf	??_sprintf+2
  3426  03AD  0826               	movf	??_sprintf+2,w
  3427  03AE  00AF               	movwf	sprintf@c
  3428  03AF  082F               	movf	sprintf@c,w
  3429  03B0  1903               	btfsc	3,2
  3430  03B1  2C48               	goto	l1547
  3431                           
  3432                           ;doprnt.c: 538: if(c != '%')
  3433  03B2  3025               	movlw	37
  3434  03B3  062F               	xorwf	sprintf@c,w
  3435  03B4  1903               	btfsc	3,2
  3436  03B5  2BC2               	goto	l1511
  3437                           
  3438                           ;doprnt.c: 540: {
  3439                           ;doprnt.c: 541: ((*sp++ = (c)));
  3440  03B6  082F               	movf	sprintf@c,w
  3441  03B7  00A4               	movwf	??_sprintf
  3442  03B8  082E               	movf	sprintf@sp,w
  3443  03B9  0086               	movwf	6
  3444  03BA  0187               	clrf	7
  3445  03BB  0824               	movf	??_sprintf,w
  3446  03BC  0081               	movwf	1
  3447  03BD  3001               	movlw	1
  3448  03BE  00A4               	movwf	??_sprintf
  3449  03BF  0824               	movf	??_sprintf,w
  3450  03C0  07AE               	addwf	sprintf@sp,f
  3451                           
  3452                           ;doprnt.c: 542: continue;
  3453  03C1  2BA0               	goto	l1545
  3454  03C2                     l1511:	
  3455                           
  3456                           ;doprnt.c: 543: }
  3457                           ;doprnt.c: 548: flag = 0;
  3458  03C2  01A8               	clrf	sprintf@flag
  3459                           
  3460                           ;doprnt.c: 822: }
  3461                           
  3462                           ;doprnt.c: 813: continue;
  3463                           
  3464                           ;doprnt.c: 802: default:
  3465                           
  3466                           ;doprnt.c: 718: case 'x':
  3467                           ;doprnt.c: 723: break;
  3468                           
  3469                           ;doprnt.c: 712: case 'X':
  3470                           
  3471                           ;doprnt.c: 638: goto alldone;
  3472                           
  3473                           ;doprnt.c: 637: case 0:
  3474                           
  3475                           ;doprnt.c: 635: switch(c = *f++) {
  3476  03C3  0821               	movf	sprintf@f+1,w
  3477  03C4  00A5               	movwf	??_sprintf+1
  3478  03C5  0820               	movf	sprintf@f,w
  3479  03C6  00A4               	movwf	??_sprintf
  3480  03C7  0AA0               	incf	sprintf@f,f
  3481  03C8  1903               	skipnz
  3482  03C9  0AA1               	incf	sprintf@f+1,f
  3483  03CA  0824               	movf	??_sprintf,w
  3484  03CB  0084               	movwf	4
  3485  03CC  0825               	movf	??_sprintf+1,w
  3486  03CD  0085               	movwf	5
  3487  03CE  0800               	movf	0,w	;code access
  3488  03CF  00AF               	movwf	sprintf@c
  3489                           
  3490                           ; Switch size 1, requested type "space"
  3491                           ; Number of cases is 3, Range of values is 0 to 120
  3492                           ; switch strategies available:
  3493                           ; Name         Instructions Cycles
  3494                           ; simple_byte           10     6 (average)
  3495                           ; direct_byte          248     6 (fixed)
  3496                           ; jumptable            260     6 (fixed)
  3497                           ;	Chosen strategy is simple_byte
  3498  03D0  3A00               	xorlw	0	; case 0
  3499  03D1  1903               	skipnz
  3500  03D2  2C48               	goto	l1547
  3501  03D3  3A58               	xorlw	88	; case 88
  3502  03D4  1903               	skipnz
  3503  03D5  2BDA               	goto	l1517
  3504  03D6  3A20               	xorlw	32	; case 120
  3505  03D7  1903               	skipnz
  3506  03D8  2BDA               	goto	l1517
  3507  03D9  2BA0               	goto	l1545
  3508  03DA                     l1517:	
  3509                           
  3510                           ;doprnt.c: 1273: {
  3511                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3512  03DA  082A               	movf	sprintf@ap,w
  3513  03DB  0086               	movwf	6
  3514  03DC  0187               	clrf	7
  3515  03DD  3F40               	moviw [0]fsr1
  3516  03DE  00AB               	movwf	sprintf@val
  3517  03DF  3F41               	moviw [1]fsr1
  3518  03E0  00AC               	movwf	sprintf@val+1
  3519  03E1  3002               	movlw	2
  3520  03E2  00A4               	movwf	??_sprintf
  3521  03E3  0824               	movf	??_sprintf,w
  3522  03E4  07AA               	addwf	sprintf@ap,f
  3523                           
  3524                           ;doprnt.c: 1287: }
  3525                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3526  03E5  01AF               	clrf	sprintf@c
  3527  03E6  0AAF               	incf	sprintf@c,f
  3528  03E7  3004               	movlw	4
  3529  03E8  062F               	xorwf	sprintf@c,w
  3530  03E9  1903               	btfsc	3,2
  3531  03EA  2C0A               	goto	l1533
  3532  03EB                     l1527:	
  3533                           
  3534                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3535  03EB  082F               	movf	sprintf@c,w
  3536  03EC  00A4               	movwf	??_sprintf
  3537  03ED  01A5               	clrf	??_sprintf+1
  3538  03EE  35A4               	lslf	??_sprintf,f
  3539  03EF  0DA5               	rlf	??_sprintf+1,f
  3540  03F0  3075               	movlw	low (_hexpowers| (0+32768))
  3541  03F1  0724               	addwf	??_sprintf,w
  3542  03F2  0084               	movwf	4
  3543  03F3  3082               	movlw	high (_hexpowers| (0+32768))
  3544  03F4  3D25               	addwfc	??_sprintf+1,w
  3545  03F5  0085               	movwf	5
  3546  03F6  3F00               	moviw [0]fsr0
  3547  03F7  00A6               	movwf	??_sprintf+2
  3548  03F8  3F01               	moviw [1]fsr0
  3549  03F9  00A7               	movwf	??_sprintf+3
  3550  03FA  0827               	movf	??_sprintf+3,w
  3551  03FB  022C               	subwf	sprintf@val+1,w
  3552  03FC  1D03               	skipz
  3553  03FD  2C00               	goto	u1225
  3554  03FE  0826               	movf	??_sprintf+2,w
  3555  03FF  022B               	subwf	sprintf@val,w
  3556  0400                     u1225:	
  3557  0400  1C03               	btfss	3,0
  3558  0401  2C0A               	goto	l1533
  3559                           
  3560                           ;doprnt.c: 1318: break;
  3561  0402  3001               	movlw	1
  3562  0403  00A4               	movwf	??_sprintf
  3563  0404  0824               	movf	??_sprintf,w
  3564  0405  07AF               	addwf	sprintf@c,f
  3565  0406  3004               	movlw	4
  3566  0407  062F               	xorwf	sprintf@c,w
  3567  0408  1D03               	btfss	3,2
  3568  0409  2BEB               	goto	l1527
  3569  040A                     l1533:	
  3570                           
  3571                           ;doprnt.c: 1422: {
  3572                           ;doprnt.c: 1469: }
  3573                           ;doprnt.c: 1472: prec = c;
  3574  040A  082F               	movf	sprintf@c,w
  3575  040B  00A4               	movwf	??_sprintf
  3576  040C  0824               	movf	??_sprintf,w
  3577  040D  00AD               	movwf	sprintf@prec
  3578  040E                     l1543:	
  3579                           ;doprnt.c: 1474: while(prec--) {
  3580                           
  3581  040E  30FF               	movlw	255
  3582  040F  00A4               	movwf	??_sprintf
  3583  0410  0824               	movf	??_sprintf,w
  3584  0411  07AD               	addwf	sprintf@prec,f
  3585  0412  0A2D               	incf	sprintf@prec,w
  3586  0413  1903               	btfsc	3,2
  3587  0414  2BA0               	goto	l1545
  3588                           
  3589                           ;doprnt.c: 1478: {
  3590                           ;doprnt.c: 1499: {
  3591                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3592  0415  082D               	movf	sprintf@prec,w
  3593  0416  00A4               	movwf	??_sprintf
  3594  0417  01A5               	clrf	??_sprintf+1
  3595  0418  35A4               	lslf	??_sprintf,f
  3596  0419  0DA5               	rlf	??_sprintf+1,f
  3597  041A  3075               	movlw	low (_hexpowers| (0+32768))
  3598  041B  0724               	addwf	??_sprintf,w
  3599  041C  0084               	movwf	4
  3600  041D  3082               	movlw	high (_hexpowers| (0+32768))
  3601  041E  3D25               	addwfc	??_sprintf+1,w
  3602  041F  0085               	movwf	5
  3603  0420  3F00               	moviw [0]fsr0
  3604  0421  00F2               	movwf	___lwdiv@divisor
  3605  0422  3F01               	moviw [1]fsr0
  3606  0423  00F3               	movwf	___lwdiv@divisor+1
  3607  0424  082C               	movf	sprintf@val+1,w
  3608  0425  00F5               	movwf	___lwdiv@dividend+1
  3609  0426  082B               	movf	sprintf@val,w
  3610  0427  00F4               	movwf	___lwdiv@dividend
  3611  0428  3185  2532  3183   	fcall	___lwdiv
  3612  042B  0872               	movf	?___lwdiv,w
  3613  042C  390F               	andlw	15
  3614  042D  0020               	movlb	0	; select bank0
  3615  042E  00A6               	movwf	??_sprintf+2
  3616  042F  0826               	movf	??_sprintf+2,w
  3617  0430  00A9               	movwf	sprintf@idx
  3618                           
  3619                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  3620  0431  0829               	movf	sprintf@idx,w
  3621  0432  3E37               	addlw	low (STR_28| (0+32768))
  3622  0433  0084               	movwf	4
  3623  0434  3083               	movlw	high (STR_28| (0+32768))
  3624  0435  1803               	skipnc
  3625  0436  3E01               	addlw	1
  3626  0437  0085               	movwf	5
  3627  0438  0800               	movf	0,w	;code access
  3628  0439  00A4               	movwf	??_sprintf
  3629  043A  0824               	movf	??_sprintf,w
  3630  043B  00AF               	movwf	sprintf@c
  3631                           
  3632                           ;doprnt.c: 1508: }
  3633                           ;doprnt.c: 1523: }
  3634                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3635  043C  082F               	movf	sprintf@c,w
  3636  043D  00A4               	movwf	??_sprintf
  3637  043E  082E               	movf	sprintf@sp,w
  3638  043F  0086               	movwf	6
  3639  0440  0187               	clrf	7
  3640  0441  0824               	movf	??_sprintf,w
  3641  0442  0081               	movwf	1
  3642  0443  3001               	movlw	1
  3643  0444  00A4               	movwf	??_sprintf
  3644  0445  0824               	movf	??_sprintf,w
  3645  0446  07AE               	addwf	sprintf@sp,f
  3646  0447  2C0E               	goto	l1543
  3647  0448                     l1547:	
  3648                           ;doprnt.c: 1525: }
  3649                           ;doprnt.c: 1533: }
  3650                           ;doprnt.c: 1535: alldone:
  3651                           
  3652                           
  3653                           ;doprnt.c: 1538: *sp = 0;
  3654  0448  082E               	movf	sprintf@sp,w
  3655  0449  0086               	movwf	6
  3656  044A  0187               	clrf	7
  3657  044B  0181               	clrf	1
  3658  044C  0008               	return
  3659  044D                     __end_of_sprintf:	
  3660                           ;doprnt.c: 1540: return 0;
  3661                           ;	Return value of _sprintf is never used
  3662                           
  3663                           
  3664                           	psect	text9
  3665  0532                     __ptext9:	
  3666 ;; *************** function ___lwdiv *****************
  3667 ;; Defined at:
  3668 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;  divisor         2    2[COMMON] unsigned int 
  3671 ;;  dividend        2    4[COMMON] unsigned int 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;  quotient        2    7[COMMON] unsigned int 
  3674 ;;  counter         1    9[COMMON] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  2    2[COMMON] unsigned int 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3684 ;;      Params:         4       0       0       0
  3685 ;;      Locals:         3       0       0       0
  3686 ;;      Temps:          1       0       0       0
  3687 ;;      Totals:         8       0       0       0
  3688 ;;Total ram usage:        8 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    2
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_sprintf
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           
  3699                           ;psect for function ___lwdiv
  3700  0532                     ___lwdiv:	
  3701                           
  3702                           ;incstack = 0
  3703                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3704  0532  01F7               	clrf	___lwdiv@quotient
  3705  0533  01F8               	clrf	___lwdiv@quotient+1
  3706  0534  0872               	movf	___lwdiv@divisor,w
  3707  0535  0473               	iorwf	___lwdiv@divisor+1,w
  3708  0536  1903               	btfsc	3,2
  3709  0537  2D61               	goto	l1399
  3710  0538  01F9               	clrf	___lwdiv@counter
  3711  0539  0AF9               	incf	___lwdiv@counter,f
  3712  053A                     l1387:	
  3713  053A  1BF3               	btfsc	___lwdiv@divisor+1,7
  3714  053B  2D46               	goto	l1389
  3715  053C  3001               	movlw	1
  3716  053D                     u945:	
  3717  053D  35F2               	lslf	___lwdiv@divisor,f
  3718  053E  0DF3               	rlf	___lwdiv@divisor+1,f
  3719  053F  0B89               	decfsz	9,f
  3720  0540  2D3D               	goto	u945
  3721  0541  3001               	movlw	1
  3722  0542  00F6               	movwf	??___lwdiv
  3723  0543  0876               	movf	??___lwdiv,w
  3724  0544  07F9               	addwf	___lwdiv@counter,f
  3725  0545  2D3A               	goto	l1387
  3726  0546                     l1389:	
  3727  0546  3001               	movlw	1
  3728  0547                     u965:	
  3729  0547  35F7               	lslf	___lwdiv@quotient,f
  3730  0548  0DF8               	rlf	___lwdiv@quotient+1,f
  3731  0549  0B89               	decfsz	9,f
  3732  054A  2D47               	goto	u965
  3733  054B  0873               	movf	___lwdiv@divisor+1,w
  3734  054C  0275               	subwf	___lwdiv@dividend+1,w
  3735  054D  1D03               	skipz
  3736  054E  2D51               	goto	u975
  3737  054F  0872               	movf	___lwdiv@divisor,w
  3738  0550  0274               	subwf	___lwdiv@dividend,w
  3739  0551                     u975:	
  3740  0551  1C03               	skipc
  3741  0552  2D58               	goto	l1395
  3742  0553  0872               	movf	___lwdiv@divisor,w
  3743  0554  02F4               	subwf	___lwdiv@dividend,f
  3744  0555  0873               	movf	___lwdiv@divisor+1,w
  3745  0556  3BF5               	subwfb	___lwdiv@dividend+1,f
  3746  0557  1477               	bsf	___lwdiv@quotient,0
  3747  0558                     l1395:	
  3748  0558  3001               	movlw	1
  3749  0559                     u985:	
  3750  0559  36F3               	lsrf	___lwdiv@divisor+1,f
  3751  055A  0CF2               	rrf	___lwdiv@divisor,f
  3752  055B  0B89               	decfsz	9,f
  3753  055C  2D59               	goto	u985
  3754  055D  3001               	movlw	1
  3755  055E  02F9               	subwf	___lwdiv@counter,f
  3756  055F  1D03               	btfss	3,2
  3757  0560  2D46               	goto	l1389
  3758  0561                     l1399:	
  3759  0561  0878               	movf	___lwdiv@quotient+1,w
  3760  0562  00F3               	movwf	?___lwdiv+1
  3761  0563  0877               	movf	___lwdiv@quotient,w
  3762  0564  00F2               	movwf	?___lwdiv
  3763  0565  0008               	return
  3764  0566                     __end_of___lwdiv:	
  3765                           
  3766                           	psect	text10
  3767  044D                     __ptext10:	
  3768 ;; *************** function _blink_leds *****************
  3769 ;; Defined at:
  3770 ;;		line 44 in file "main.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  n               2    2[COMMON] int 
  3773 ;;  c               2    4[COMMON] int 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  i               2    8[COMMON] int 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  2    2[COMMON] int 
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0, pclath, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3785 ;;      Params:         4       0       0       0
  3786 ;;      Locals:         2       0       0       0
  3787 ;;      Temps:          2       0       0       0
  3788 ;;      Totals:         8       0       0       0
  3789 ;;Total ram usage:        8 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    3
  3792 ;; This function calls:
  3793 ;;		_set_low_leds
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _blink_leds
  3801  044D                     _blink_leds:	
  3802                           
  3803                           ;main.c: 45: _delay((unsigned long)((640)*(8000000/4000.0)));
  3804                           
  3805                           ;incstack = 0
  3806                           ; Regs used in _blink_leds: [wreg+status,2+status,0+pclath+cstack]
  3807  044D  3007               	movlw	7
  3808  044E  00F7               	movwf	??_blink_leds+1
  3809  044F  307F               	movlw	127
  3810  0450  00F6               	movwf	??_blink_leds
  3811  0451  3050               	movlw	80
  3812  0452                     u1727:	
  3813  0452  0B89               	decfsz	9,f
  3814  0453  2C52               	goto	u1727
  3815  0454  0BF6               	decfsz	??_blink_leds,f
  3816  0455  2C52               	goto	u1727
  3817  0456  0BF7               	decfsz	??_blink_leds+1,f
  3818  0457  2C52               	goto	u1727
  3819                           
  3820                           ;main.c: 46: for (int i = 0; i < n; ++i) {
  3821  0458  01F8               	clrf	blink_leds@i
  3822  0459  01F9               	clrf	blink_leds@i+1
  3823  045A                     l233:	
  3824  045A  0879               	movf	blink_leds@i+1,w
  3825  045B  3A80               	xorlw	128
  3826  045C  00F6               	movwf	??_blink_leds
  3827  045D  0873               	movf	blink_leds@n+1,w
  3828  045E  3A80               	xorlw	128
  3829  045F  0276               	subwf	??_blink_leds,w
  3830  0460  1D03               	skipz
  3831  0461  2C64               	goto	u1095
  3832  0462  0872               	movf	blink_leds@n,w
  3833  0463  0278               	subwf	blink_leds@i,w
  3834  0464                     u1095:	
  3835  0464  1803               	btfsc	3,0
  3836  0465  2C96               	goto	l1455
  3837                           
  3838                           ;main.c: 47: set_low_leds();
  3839  0466  3186  26E3  3184   	fcall	_set_low_leds
  3840                           
  3841                           ;main.c: 48: _delay((unsigned long)((128)*(8000000/4000.0)));
  3842  0469  3002               	movlw	2
  3843  046A  00F7               	movwf	??_blink_leds+1
  3844  046B  304D               	movlw	77
  3845  046C  00F6               	movwf	??_blink_leds
  3846  046D  3074               	movlw	116
  3847  046E                     u1737:	
  3848  046E  0B89               	decfsz	9,f
  3849  046F  2C6E               	goto	u1737
  3850  0470  0BF6               	decfsz	??_blink_leds,f
  3851  0471  2C6E               	goto	u1737
  3852  0472  0BF7               	decfsz	??_blink_leds+1,f
  3853  0473  2C6E               	goto	u1737
  3854  0474  3200               	nop2
  3855                           
  3856                           ;main.c: 49: if (c & 0b00000001) do { LATAbits.LATA5 = 1; } while(0);
  3857  0475  1C74               	btfss	blink_leds@c,0
  3858  0476  2C79               	goto	l235
  3859  0477  0022               	movlb	2	; select bank2
  3860  0478  168C               	bsf	12,5	;volatile
  3861  0479                     l235:	
  3862                           
  3863                           ;main.c: 50: if (c & 0b00000010) do { LATAbits.LATA1 = 1; } while(0);
  3864  0479  1CF4               	btfss	blink_leds@c,1
  3865  047A  2C7D               	goto	l238
  3866  047B  0022               	movlb	2	; select bank2
  3867  047C  148C               	bsf	12,1	;volatile
  3868  047D                     l238:	
  3869                           
  3870                           ;main.c: 51: if (c & 0b00000100) do { LATAbits.LATA2 = 1; } while(0);
  3871  047D  1D74               	btfss	blink_leds@c,2
  3872  047E  2C81               	goto	l241
  3873  047F  0022               	movlb	2	; select bank2
  3874  0480  150C               	bsf	12,2	;volatile
  3875  0481                     l241:	
  3876                           
  3877                           ;main.c: 52: if (c & 0b00001000) do { LATCbits.LATC5 = 1; } while(0);
  3878  0481  1DF4               	btfss	blink_leds@c,3
  3879  0482  2C85               	goto	l1453
  3880  0483  0022               	movlb	2	; select bank2
  3881  0484  168E               	bsf	14,5	;volatile
  3882  0485                     l1453:	
  3883                           
  3884                           ;main.c: 53: _delay((unsigned long)((128)*(8000000/4000.0)));
  3885  0485  3002               	movlw	2
  3886  0486  00F7               	movwf	??_blink_leds+1
  3887  0487  304D               	movlw	77
  3888  0488  00F6               	movwf	??_blink_leds
  3889  0489  3074               	movlw	116
  3890  048A                     u1747:	
  3891  048A  0B89               	decfsz	9,f
  3892  048B  2C8A               	goto	u1747
  3893  048C  0BF6               	decfsz	??_blink_leds,f
  3894  048D  2C8A               	goto	u1747
  3895  048E  0BF7               	decfsz	??_blink_leds+1,f
  3896  048F  2C8A               	goto	u1747
  3897  0490  3200               	nop2
  3898  0491  3001               	movlw	1
  3899  0492  07F8               	addwf	blink_leds@i,f
  3900  0493  3000               	movlw	0
  3901  0494  3DF9               	addwfc	blink_leds@i+1,f
  3902  0495  2C5A               	goto	l233
  3903  0496                     l1455:	
  3904                           
  3905                           ;main.c: 54: }
  3906                           ;main.c: 55: set_low_leds();
  3907  0496  3186  26E3  3184   	fcall	_set_low_leds
  3908                           
  3909                           ;main.c: 56: _delay((unsigned long)((640)*(8000000/4000.0)));
  3910  0499  3007               	movlw	7
  3911  049A  00F7               	movwf	??_blink_leds+1
  3912  049B  307F               	movlw	127
  3913  049C  00F6               	movwf	??_blink_leds
  3914  049D  3050               	movlw	80
  3915  049E                     u1757:	
  3916  049E  0B89               	decfsz	9,f
  3917  049F  2C9E               	goto	u1757
  3918  04A0  0BF6               	decfsz	??_blink_leds,f
  3919  04A1  2C9E               	goto	u1757
  3920  04A2  0BF7               	decfsz	??_blink_leds+1,f
  3921  04A3  2C9E               	goto	u1757
  3922  04A4  0008               	return
  3923  04A5                     __end_of_blink_leds:	
  3924                           ;main.c: 57: return (0);
  3925                           ;	Return value of _blink_leds is never used
  3926                           
  3927                           
  3928                           	psect	text11
  3929  06E3                     __ptext11:	
  3930 ;; *************** function _set_low_leds *****************
  3931 ;; Defined at:
  3932 ;;		line 32 in file "main.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;		None
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;		None
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  2  221[None  ] int 
  3939 ;; Registers used:
  3940 ;;		None
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3946 ;;      Params:         0       0       0       0
  3947 ;;      Locals:         0       0       0       0
  3948 ;;      Temps:          0       0       0       0
  3949 ;;      Totals:         0       0       0       0
  3950 ;;Total ram usage:        0 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    2
  3953 ;; This function calls:
  3954 ;;		Nothing
  3955 ;; This function is called by:
  3956 ;;		_blink_leds
  3957 ;;		_show_char_leds
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _set_low_leds
  3963  06E3                     _set_low_leds:	
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _set_low_leds: []
  3967                           ;main.c: 33: do { LATAbits.LATA5 = 0; } while(0);
  3968  06E3  0022               	movlb	2	; select bank2
  3969  06E4  128C               	bcf	12,5	;volatile
  3970                           
  3971                           ;main.c: 34: do { LATAbits.LATA1 = 0; } while(0);
  3972  06E5  108C               	bcf	12,1	;volatile
  3973                           
  3974                           ;main.c: 35: do { LATAbits.LATA2 = 0; } while(0);
  3975  06E6  110C               	bcf	12,2	;volatile
  3976                           
  3977                           ;main.c: 36: do { LATCbits.LATC5 = 0; } while(0);
  3978  06E7  128E               	bcf	14,5	;volatile
  3979  06E8  0008               	return
  3980  06E9                     __end_of_set_low_leds:	
  3981                           ;main.c: 37: return (0);
  3982                           ;	Return value of _set_low_leds is never used
  3983                           
  3984                           
  3985                           	psect	text12
  3986  06C0                     __ptext12:	
  3987 ;; *************** function _SYSTEM_Initialize *****************
  3988 ;; Defined at:
  3989 ;;		line 68 in file "mcc_generated_files/mcc.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;		None
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;		None
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  1    wreg      void 
  3996 ;; Registers used:
  3997 ;;		wreg, status,2, status,0, pclath, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4003 ;;      Params:         0       0       0       0
  4004 ;;      Locals:         0       0       0       0
  4005 ;;      Temps:          0       0       0       0
  4006 ;;      Totals:         0       0       0       0
  4007 ;;Total ram usage:        0 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    3
  4010 ;; This function calls:
  4011 ;;		_ADC_Initialize
  4012 ;;		_EUSART_Initialize
  4013 ;;		_OSCILLATOR_Initialize
  4014 ;;		_PIN_MANAGER_Initialize
  4015 ;;		_WDT_Initialize
  4016 ;; This function is called by:
  4017 ;;		_main
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _SYSTEM_Initialize
  4023  06C0                     _SYSTEM_Initialize:	
  4024                           
  4025                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4029  06C0  3186  2655  3186   	fcall	_PIN_MANAGER_Initialize
  4030                           
  4031                           ;mcc.c: 72: OSCILLATOR_Initialize();
  4032  06C3  3186  26ED  3186   	fcall	_OSCILLATOR_Initialize
  4033                           
  4034                           ;mcc.c: 73: WDT_Initialize();
  4035  06C6  3186  26E9  3186   	fcall	_WDT_Initialize
  4036                           
  4037                           ;mcc.c: 74: ADC_Initialize();
  4038  06C9  3186  26CF  3186   	fcall	_ADC_Initialize
  4039                           
  4040                           ;mcc.c: 75: EUSART_Initialize();
  4041  06CC  3186  268D         	fcall	_EUSART_Initialize
  4042  06CE  0008               	return
  4043  06CF                     __end_of_SYSTEM_Initialize:	
  4044                           
  4045                           	psect	text13
  4046  06E9                     __ptext13:	
  4047 ;; *************** function _WDT_Initialize *****************
  4048 ;; Defined at:
  4049 ;;		line 84 in file "mcc_generated_files/mcc.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;		None
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;		None
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  1    wreg      void 
  4056 ;; Registers used:
  4057 ;;		wreg
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4063 ;;      Params:         0       0       0       0
  4064 ;;      Locals:         0       0       0       0
  4065 ;;      Temps:          0       0       0       0
  4066 ;;      Totals:         0       0       0       0
  4067 ;;Total ram usage:        0 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; Hardware stack levels required when called:    2
  4070 ;; This function calls:
  4071 ;;		Nothing
  4072 ;; This function is called by:
  4073 ;;		_SYSTEM_Initialize
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           
  4078                           ;psect for function _WDT_Initialize
  4079  06E9                     _WDT_Initialize:	
  4080                           
  4081                           ;mcc.c: 87: WDTCON = 0x16;
  4082                           
  4083                           ;incstack = 0
  4084                           ; Regs used in _WDT_Initialize: [wreg]
  4085  06E9  3016               	movlw	22
  4086  06EA  0021               	movlb	1	; select bank1
  4087  06EB  0097               	movwf	23	;volatile
  4088  06EC  0008               	return
  4089  06ED                     __end_of_WDT_Initialize:	
  4090                           
  4091                           	psect	text14
  4092  0655                     __ptext14:	
  4093 ;; *************** function _PIN_MANAGER_Initialize *****************
  4094 ;; Defined at:
  4095 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;		None
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;		None
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  1    wreg      void 
  4102 ;; Registers used:
  4103 ;;		wreg, status,2
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4109 ;;      Params:         0       0       0       0
  4110 ;;      Locals:         0       0       0       0
  4111 ;;      Temps:          0       0       0       0
  4112 ;;      Totals:         0       0       0       0
  4113 ;;Total ram usage:        0 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    2
  4116 ;; This function calls:
  4117 ;;		Nothing
  4118 ;; This function is called by:
  4119 ;;		_SYSTEM_Initialize
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           
  4124                           ;psect for function _PIN_MANAGER_Initialize
  4125  0655                     _PIN_MANAGER_Initialize:	
  4126                           
  4127                           ;pin_manager.c: 56: LATA = 0x00;
  4128                           
  4129                           ;incstack = 0
  4130                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4131  0655  0022               	movlb	2	; select bank2
  4132  0656  018C               	clrf	12	;volatile
  4133                           
  4134                           ;pin_manager.c: 57: LATB = 0x00;
  4135  0657  018D               	clrf	13	;volatile
  4136                           
  4137                           ;pin_manager.c: 58: LATC = 0x00;
  4138  0658  018E               	clrf	14	;volatile
  4139                           
  4140                           ;pin_manager.c: 63: TRISA = 0x09;
  4141  0659  3009               	movlw	9
  4142  065A  0021               	movlb	1	; select bank1
  4143  065B  008C               	movwf	12	;volatile
  4144                           
  4145                           ;pin_manager.c: 64: TRISB = 0x70;
  4146  065C  3070               	movlw	112
  4147  065D  008D               	movwf	13	;volatile
  4148                           
  4149                           ;pin_manager.c: 65: TRISC = 0xCF;
  4150  065E  30CF               	movlw	207
  4151  065F  008E               	movwf	14	;volatile
  4152                           
  4153                           ;pin_manager.c: 70: ANSELC = 0xCE;
  4154  0660  30CE               	movlw	206
  4155  0661  0023               	movlb	3	; select bank3
  4156  0662  008E               	movwf	14	;volatile
  4157                           
  4158                           ;pin_manager.c: 71: ANSELB = 0x10;
  4159  0663  3010               	movlw	16
  4160  0664  008D               	movwf	13	;volatile
  4161                           
  4162                           ;pin_manager.c: 72: ANSELA = 0x17;
  4163  0665  3017               	movlw	23
  4164  0666  008C               	movwf	12	;volatile
  4165                           
  4166                           ;pin_manager.c: 77: WPUB = 0xF0;
  4167  0667  30F0               	movlw	240
  4168  0668  0024               	movlb	4	; select bank4
  4169  0669  008D               	movwf	13	;volatile
  4170                           
  4171                           ;pin_manager.c: 78: WPUA = 0x3F;
  4172  066A  303F               	movlw	63
  4173  066B  008C               	movwf	12	;volatile
  4174                           
  4175                           ;pin_manager.c: 79: OPTION_REGbits.nWPUEN = 0;
  4176  066C  0021               	movlb	1	; select bank1
  4177  066D  1395               	bcf	21,7	;volatile
  4178                           
  4179                           ;pin_manager.c: 85: APFCON = 0x00;
  4180  066E  0022               	movlb	2	; select bank2
  4181  066F  019D               	clrf	29	;volatile
  4182  0670  0008               	return
  4183  0671                     __end_of_PIN_MANAGER_Initialize:	
  4184                           
  4185                           	psect	text15
  4186  06ED                     __ptext15:	
  4187 ;; *************** function _OSCILLATOR_Initialize *****************
  4188 ;; Defined at:
  4189 ;;		line 78 in file "mcc_generated_files/mcc.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;		None
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;		None
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4203 ;;      Params:         0       0       0       0
  4204 ;;      Locals:         0       0       0       0
  4205 ;;      Temps:          0       0       0       0
  4206 ;;      Totals:         0       0       0       0
  4207 ;;Total ram usage:        0 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    2
  4210 ;; This function calls:
  4211 ;;		Nothing
  4212 ;; This function is called by:
  4213 ;;		_SYSTEM_Initialize
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           
  4218                           ;psect for function _OSCILLATOR_Initialize
  4219  06ED                     _OSCILLATOR_Initialize:	
  4220                           
  4221                           ;mcc.c: 81: OSCCON = 0x70;
  4222                           
  4223                           ;incstack = 0
  4224                           ; Regs used in _OSCILLATOR_Initialize: [wreg]
  4225  06ED  3070               	movlw	112
  4226  06EE  0021               	movlb	1	; select bank1
  4227  06EF  0099               	movwf	25	;volatile
  4228  06F0  0008               	return
  4229  06F1                     __end_of_OSCILLATOR_Initialize:	
  4230                           
  4231                           	psect	text16
  4232  068D                     __ptext16:	
  4233 ;; *************** function _EUSART_Initialize *****************
  4234 ;; Defined at:
  4235 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;		None
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      void 
  4242 ;; Registers used:
  4243 ;;		wreg, status,2
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4249 ;;      Params:         0       0       0       0
  4250 ;;      Locals:         0       0       0       0
  4251 ;;      Temps:          1       0       0       0
  4252 ;;      Totals:         1       0       0       0
  4253 ;;Total ram usage:        1 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    2
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_SYSTEM_Initialize
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           
  4264                           ;psect for function _EUSART_Initialize
  4265  068D                     _EUSART_Initialize:	
  4266                           
  4267                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4268                           
  4269                           ;incstack = 0
  4270                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4271  068D  0021               	movlb	1	; select bank1
  4272  068E  1291               	bcf	17,5	;volatile
  4273                           
  4274                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4275  068F  1211               	bcf	17,4	;volatile
  4276                           
  4277                           ;eusart.c: 84: BAUDCON = 0x09;
  4278  0690  3009               	movlw	9
  4279  0691  0023               	movlb	3	; select bank3
  4280  0692  009F               	movwf	31	;volatile
  4281                           
  4282                           ;eusart.c: 87: RCSTA = 0x90;
  4283  0693  3090               	movlw	144
  4284  0694  009D               	movwf	29	;volatile
  4285                           
  4286                           ;eusart.c: 90: TXSTA = 0x24;
  4287  0695  3024               	movlw	36
  4288  0696  009E               	movwf	30	;volatile
  4289                           
  4290                           ;eusart.c: 93: SPBRGL = 0x10;
  4291  0697  3010               	movlw	16
  4292  0698  009B               	movwf	27	;volatile
  4293                           
  4294                           ;eusart.c: 96: SPBRGH = 0x00;
  4295  0699  019C               	clrf	28	;volatile
  4296                           
  4297                           ;eusart.c: 100: eusartTxHead = 0;
  4298  069A  01FB               	clrf	_eusartTxHead	;volatile
  4299                           
  4300                           ;eusart.c: 101: eusartTxTail = 0;
  4301  069B  01FA               	clrf	_eusartTxTail	;volatile
  4302                           
  4303                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4304  069C  3008               	movlw	8
  4305  069D  00F2               	movwf	??_EUSART_Initialize
  4306  069E  0872               	movf	??_EUSART_Initialize,w
  4307  069F  0020               	movlb	0	; select bank0
  4308  06A0  00ED               	movwf	_eusartTxBufferRemaining	;volatile
  4309                           
  4310                           ;eusart.c: 104: eusartRxHead = 0;
  4311  06A1  01EC               	clrf	_eusartRxHead	;volatile
  4312                           
  4313                           ;eusart.c: 105: eusartRxTail = 0;
  4314  06A2  01EB               	clrf	_eusartRxTail	;volatile
  4315                           
  4316                           ;eusart.c: 106: eusartRxCount = 0;
  4317  06A3  01EA               	clrf	_eusartRxCount	;volatile
  4318                           
  4319                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4320  06A4  0021               	movlb	1	; select bank1
  4321  06A5  1691               	bsf	17,5	;volatile
  4322  06A6  0008               	return
  4323  06A7                     __end_of_EUSART_Initialize:	
  4324                           
  4325                           	psect	text17
  4326  06CF                     __ptext17:	
  4327 ;; *************** function _ADC_Initialize *****************
  4328 ;; Defined at:
  4329 ;;		line 64 in file "mcc_generated_files/adc.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;		None
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;		None
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, status,2
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4343 ;;      Params:         0       0       0       0
  4344 ;;      Locals:         0       0       0       0
  4345 ;;      Temps:          0       0       0       0
  4346 ;;      Totals:         0       0       0       0
  4347 ;;Total ram usage:        0 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    2
  4350 ;; This function calls:
  4351 ;;		Nothing
  4352 ;; This function is called by:
  4353 ;;		_SYSTEM_Initialize
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           
  4358                           ;psect for function _ADC_Initialize
  4359  06CF                     _ADC_Initialize:	
  4360                           
  4361                           ;adc.c: 69: ADCON0 = 0x01;
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4365  06CF  3001               	movlw	1
  4366  06D0  0021               	movlb	1	; select bank1
  4367  06D1  009D               	movwf	29	;volatile
  4368                           
  4369                           ;adc.c: 72: ADCON1 = 0x00;
  4370  06D2  019E               	clrf	30	;volatile
  4371                           
  4372                           ;adc.c: 75: ADCON2 = 0x00;
  4373  06D3  019F               	clrf	31	;volatile
  4374                           
  4375                           ;adc.c: 78: ADRESL = 0x00;
  4376  06D4  019B               	clrf	27	;volatile
  4377                           
  4378                           ;adc.c: 81: ADRESH = 0x00;
  4379  06D5  019C               	clrf	28	;volatile
  4380  06D6  0008               	return
  4381  06D7                     __end_of_ADC_Initialize:	
  4382                           
  4383                           	psect	text18
  4384  06A7                     __ptext18:	
  4385 ;; *************** function _ADC_GetConversion *****************
  4386 ;; Defined at:
  4387 ;;		line 112 in file "mcc_generated_files/adc.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  channel         1    wreg     enum E4101
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  channel         1    5[COMMON] enum E4101
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  2    2[COMMON] unsigned int 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4401 ;;      Params:         2       0       0       0
  4402 ;;      Locals:         1       0       0       0
  4403 ;;      Temps:          1       0       0       0
  4404 ;;      Totals:         4       0       0       0
  4405 ;;Total ram usage:        4 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    2
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_main
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           
  4416                           ;psect for function _ADC_GetConversion
  4417  06A7                     _ADC_GetConversion:	
  4418                           
  4419                           ;incstack = 0
  4420                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4421                           ;ADC_GetConversion@channel stored from wreg
  4422  06A7  00F5               	movwf	ADC_GetConversion@channel
  4423                           
  4424                           ;adc.c: 115: ADCON0bits.CHS = channel;
  4425  06A8  0875               	movf	ADC_GetConversion@channel,w
  4426  06A9  00F4               	movwf	??_ADC_GetConversion
  4427  06AA  0DF4               	rlf	??_ADC_GetConversion,f
  4428  06AB  0DF4               	rlf	??_ADC_GetConversion,f
  4429  06AC  0021               	movlb	1	; select bank1
  4430  06AD  081D               	movf	29,w	;volatile
  4431  06AE  0674               	xorwf	??_ADC_GetConversion,w
  4432  06AF  3983               	andlw	-125
  4433  06B0  0674               	xorwf	??_ADC_GetConversion,w
  4434  06B1  009D               	movwf	29	;volatile
  4435                           
  4436                           ;adc.c: 118: ADCON0bits.ADON = 1;
  4437  06B2  141D               	bsf	29,0	;volatile
  4438                           
  4439                           ;adc.c: 120: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4440  06B3  3003               	movlw	3
  4441  06B4                     u1767:	
  4442  06B4  0B89               	decfsz	9,f
  4443  06B5  2EB4               	goto	u1767
  4444  06B6  0000               	nop
  4445                           
  4446                           ;adc.c: 123: ADCON0bits.GO_nDONE = 1;
  4447  06B7  0021               	movlb	1	; select bank1
  4448  06B8  149D               	bsf	29,1	;volatile
  4449  06B9                     l151:	
  4450                           ;adc.c: 127: {
  4451                           
  4452                           ;adc.c: 126: while (ADCON0bits.GO_nDONE)
  4453                           
  4454  06B9  189D               	btfsc	29,1	;volatile
  4455  06BA  2EB9               	goto	l151
  4456                           
  4457                           ;adc.c: 128: }
  4458                           ;adc.c: 130: return ((ADRESH << 8) + ADRESL);
  4459  06BB  081C               	movf	28,w	;volatile
  4460  06BC  00F3               	movwf	?_ADC_GetConversion+1
  4461  06BD  081B               	movf	27,w	;volatile
  4462  06BE  00F2               	movwf	?_ADC_GetConversion
  4463  06BF  0008               	return
  4464  06C0                     __end_of_ADC_GetConversion:	
  4465                           
  4466                           	psect	intentry
  4467  0004                     __pintentry:	
  4468 ;; *************** function _INTERRUPT_InterruptManager *****************
  4469 ;; Defined at:
  4470 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;		None
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;		None
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4484 ;;      Params:         0       0       0       0
  4485 ;;      Locals:         0       0       0       0
  4486 ;;      Temps:          1       0       0       0
  4487 ;;      Totals:         1       0       0       0
  4488 ;;Total ram usage:        1 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    1
  4491 ;; This function calls:
  4492 ;;		_EUSART_Receive_ISR
  4493 ;;		_EUSART_Transmit_ISR
  4494 ;; This function is called by:
  4495 ;;		Interrupt level 1
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499  0004                     _INTERRUPT_InterruptManager:	
  4500                           
  4501                           ;incstack = 0
  4502  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4503                           
  4504                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4505  0005  3180               	pagesel	$
  4506  0006  0020               	movlb	0	; select bank0
  4507  0007  087F               	movf	127,w
  4508  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  4509                           
  4510                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4511  0009  1F0B               	btfss	11,6	;volatile
  4512  000A  2815               	goto	i1l167
  4513  000B  0021               	movlb	1	; select bank1
  4514  000C  1E11               	btfss	17,4	;volatile
  4515  000D  2815               	goto	i1l167
  4516  000E  0020               	movlb	0	; select bank0
  4517  000F  1E11               	btfss	17,4	;volatile
  4518  0010  2815               	goto	i1l167
  4519                           
  4520                           ;interrupt_manager.c: 55: {
  4521                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  4522  0011  3186  261B  3180   	fcall	_EUSART_Transmit_ISR
  4523                           
  4524                           ;interrupt_manager.c: 57: }
  4525  0014  281F               	goto	i1l171
  4526  0015                     i1l167:	
  4527                           
  4528                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  4529  0015  1F0B               	btfss	11,6	;volatile
  4530  0016  281F               	goto	i1l171
  4531  0017  0021               	movlb	1	; select bank1
  4532  0018  1E91               	btfss	17,5	;volatile
  4533  0019  281F               	goto	i1l171
  4534  001A  0020               	movlb	0	; select bank0
  4535  001B  1E91               	btfss	17,5	;volatile
  4536  001C  281F               	goto	i1l171
  4537                           
  4538                           ;interrupt_manager.c: 59: {
  4539                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  4540  001D  3186  2671         	fcall	_EUSART_Receive_ISR
  4541  001F                     i1l171:	
  4542                           ;interrupt_manager.c: 62: else
  4543                           ;interrupt_manager.c: 63: {
  4544                           
  4545                           ;interrupt_manager.c: 61: }
  4546                           
  4547  001F  0871               	movf	??_INTERRUPT_InterruptManager,w
  4548  0020  0020               	movlb	0	; select bank0
  4549  0021  00FF               	movwf	127
  4550  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4551  0023  0009               	retfie
  4552  0024                     __end_of_INTERRUPT_InterruptManager:	
  4553                           
  4554                           	psect	text20
  4555  061B                     __ptext20:	
  4556 ;; *************** function _EUSART_Transmit_ISR *****************
  4557 ;; Defined at:
  4558 ;;		line 155 in file "mcc_generated_files/eusart.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4572 ;;      Params:         0       0       0       0
  4573 ;;      Locals:         0       0       0       0
  4574 ;;      Temps:          1       0       0       0
  4575 ;;      Totals:         1       0       0       0
  4576 ;;Total ram usage:        1 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; This function calls:
  4579 ;;		Nothing
  4580 ;; This function is called by:
  4581 ;;		_INTERRUPT_InterruptManager
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           
  4586                           ;psect for function _EUSART_Transmit_ISR
  4587  061B                     _EUSART_Transmit_ISR:	
  4588                           
  4589                           ;eusart.c: 159: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4593  061B  3008               	movlw	8
  4594  061C  0020               	movlb	0	; select bank0
  4595  061D  026D               	subwf	_eusartTxBufferRemaining,w	;volatile
  4596  061E  1803               	skipnc
  4597  061F  2E36               	goto	i1l111
  4598                           
  4599                           ;eusart.c: 160: {
  4600                           ;eusart.c: 161: TXREG = eusartTxBuffer[eusartTxTail++];
  4601  0620  087A               	movf	_eusartTxTail,w
  4602  0621  3E68               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  4603  0622  0086               	movwf	6
  4604  0623  3001               	movlw	1	; select bank2/3
  4605  0624  0087               	movwf	7
  4606  0625  0801               	movf	1,w
  4607  0626  0023               	movlb	3	; select bank3
  4608  0627  009A               	movwf	26	;volatile
  4609  0628  3001               	movlw	1
  4610  0629  00F0               	movwf	??_EUSART_Transmit_ISR
  4611  062A  0870               	movf	??_EUSART_Transmit_ISR,w
  4612  062B  07FA               	addwf	_eusartTxTail,f	;volatile
  4613                           
  4614                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4615  062C  3008               	movlw	8
  4616  062D  027A               	subwf	_eusartTxTail,w	;volatile
  4617  062E  1803               	btfsc	3,0
  4618                           
  4619                           ;eusart.c: 163: {
  4620                           ;eusart.c: 164: eusartTxTail = 0;
  4621  062F  01FA               	clrf	_eusartTxTail	;volatile
  4622                           
  4623                           ;eusart.c: 165: }
  4624                           ;eusart.c: 166: eusartTxBufferRemaining++;
  4625  0630  3001               	movlw	1
  4626  0631  00F0               	movwf	??_EUSART_Transmit_ISR
  4627  0632  0870               	movf	??_EUSART_Transmit_ISR,w
  4628  0633  0020               	movlb	0	; select bank0
  4629  0634  07ED               	addwf	_eusartTxBufferRemaining,f	;volatile
  4630                           
  4631                           ;eusart.c: 167: }
  4632  0635  0008               	return
  4633  0636                     i1l111:	
  4634                           
  4635                           ;eusart.c: 168: else
  4636                           ;eusart.c: 169: {
  4637                           ;eusart.c: 170: PIE1bits.TXIE = 0;
  4638  0636  0021               	movlb	1	; select bank1
  4639  0637  1211               	bcf	17,4	;volatile
  4640  0638  0008               	return
  4641  0639                     __end_of_EUSART_Transmit_ISR:	
  4642                           
  4643                           	psect	text21
  4644  0671                     __ptext21:	
  4645 ;; *************** function _EUSART_Receive_ISR *****************
  4646 ;; Defined at:
  4647 ;;		line 174 in file "mcc_generated_files/eusart.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;		None
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;		None
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  1    wreg      void 
  4654 ;; Registers used:
  4655 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4661 ;;      Params:         0       0       0       0
  4662 ;;      Locals:         0       0       0       0
  4663 ;;      Temps:          1       0       0       0
  4664 ;;      Totals:         1       0       0       0
  4665 ;;Total ram usage:        1 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_INTERRUPT_InterruptManager
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           
  4675                           ;psect for function _EUSART_Receive_ISR
  4676  0671                     _EUSART_Receive_ISR:	
  4677                           
  4678                           ;eusart.c: 177: if(1 == RCSTAbits.OERR)
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4682  0671  0023               	movlb	3	; select bank3
  4683  0672  1C9D               	btfss	29,1	;volatile
  4684  0673  2E76               	goto	i1l1421
  4685                           
  4686                           ;eusart.c: 178: {
  4687                           ;eusart.c: 181: RCSTAbits.CREN = 0;
  4688  0674  121D               	bcf	29,4	;volatile
  4689                           
  4690                           ;eusart.c: 182: RCSTAbits.CREN = 1;
  4691  0675  161D               	bsf	29,4	;volatile
  4692  0676                     i1l1421:	
  4693                           
  4694                           ;eusart.c: 183: }
  4695                           ;eusart.c: 186: eusartRxBuffer[eusartRxHead++] = RCREG;
  4696  0676  0819               	movf	25,w	;volatile
  4697  0677  00F0               	movwf	??_EUSART_Receive_ISR
  4698  0678  0020               	movlb	0	; select bank0
  4699  0679  086C               	movf	_eusartRxHead,w
  4700  067A  3E60               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  4701  067B  0086               	movwf	6
  4702  067C  3001               	movlw	1	; select bank2/3
  4703  067D  0087               	movwf	7
  4704  067E  0870               	movf	??_EUSART_Receive_ISR,w
  4705  067F  0081               	movwf	1
  4706  0680  3001               	movlw	1
  4707  0681  00F0               	movwf	??_EUSART_Receive_ISR
  4708  0682  0870               	movf	??_EUSART_Receive_ISR,w
  4709  0683  07EC               	addwf	_eusartRxHead,f	;volatile
  4710                           
  4711                           ;eusart.c: 187: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4712  0684  3008               	movlw	8
  4713  0685  026C               	subwf	_eusartRxHead,w	;volatile
  4714  0686  1803               	btfsc	3,0
  4715                           
  4716                           ;eusart.c: 188: {
  4717                           ;eusart.c: 189: eusartRxHead = 0;
  4718  0687  01EC               	clrf	_eusartRxHead	;volatile
  4719                           
  4720                           ;eusart.c: 190: }
  4721                           ;eusart.c: 191: eusartRxCount++;
  4722  0688  3001               	movlw	1
  4723  0689  00F0               	movwf	??_EUSART_Receive_ISR
  4724  068A  0870               	movf	??_EUSART_Receive_ISR,w
  4725  068B  07EA               	addwf	_eusartRxCount,f	;volatile
  4726  068C  0008               	return
  4727  068D                     __end_of_EUSART_Receive_ISR:	
  4728  007E                     btemp	set	126	;btemp
  4729  007E                     int$flags	set	126
  4730  007E                     wtemp0	set	126


Data Sizes:
    Strings     285
    Constant    8
    Data        64
    BSS         23
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     74      78
    BANK1            80     72      74
    BANK2            80      0      80

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_27(CODE[4]), STR_24(CODE[4]), STR_22(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[7]), STR_17(CODE[4]), STR_15(CODE[4]), STR_13(CODE[4]), 
		 -> STR_11(CODE[4]), STR_9(CODE[4]), STR_7(CODE[4]), STR_5(CODE[4]), 
		 -> STR_3(CODE[4]), STR_1(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 4
		 -> main@result(BANK1[4]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_26(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> main@result(BANK1[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    write_and_wait@res	PTR unsigned char  size(2) Largest target is 7
		 -> STR_24(CODE[4]), STR_22(CODE[4]), STR_19(CODE[7]), STR_17(CODE[4]), 
		 -> STR_15(CODE[4]), STR_13(CODE[4]), STR_11(CODE[4]), STR_9(CODE[4]), 
		 -> STR_7(CODE[4]), STR_5(CODE[4]), STR_3(CODE[4]), 

    write_and_wait@line	PTR unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 

    write_and_wait@cmd	PTR unsigned char  size(2) Largest target is 48
		 -> STR_23(CODE[48]), STR_21(CODE[12]), STR_18(CODE[4]), STR_16(CODE[42]), 
		 -> STR_14(CODE[42]), STR_12(CODE[36]), STR_10(CODE[3]), STR_8(CODE[18]), 
		 -> STR_6(CODE[12]), STR_4(CODE[12]), STR_2(CODE[5]), 

    write_line@line	PTR unsigned char  size(2) Largest target is 64
		 -> main@command(BANK1[64]), STR_25(CODE[12]), STR_23(CODE[48]), STR_21(CODE[12]), 
		 -> STR_18(CODE[4]), STR_16(CODE[42]), STR_14(CODE[42]), STR_12(CODE[36]), 
		 -> STR_10(CODE[3]), STR_8(CODE[18]), STR_6(CODE[12]), STR_4(CODE[12]), 
		 -> STR_2(CODE[5]), 

    sp__read_line	PTR unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 


Critical Paths under _main in COMMON

    _main->_blink_leds
    _main->_strcmp
    _write_and_wait->_strcmp
    _write_line->_strcat
    _strcmp->_read_line
    _read_line->_EUSART_Read
    _sprintf->___lwdiv
    _SYSTEM_Initialize->_EUSART_Initialize

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _main->_write_and_wait
    _write_and_wait->_read_line
    _strcmp->_read_line

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                74    74      0    8032
                                             72 BANK0      2     2      0
                                              0 BANK1     72    72      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                         _blink_leds
                          _read_line
                            _sprintf
                             _strcat
                             _strcmp
                     _write_and_wait
                         _write_line
 ---------------------------------------------------------------------------------
 (1) _write_and_wait                                       6     2      4    3047
                                             66 BANK0      6     2      4
                          _read_line
                             _strcmp
                         _write_line
 ---------------------------------------------------------------------------------
 (1) _write_line                                           5     3      2     423
                                              6 COMMON     3     1      2
                                              0 BANK0      2     2      0
                       _EUSART_Write
                             _strcat (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               5     3      2     467
                                              5 COMMON     5     3      2
                          _read_line (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_line                                           67    67      0     367
                                              4 COMMON     1     1      0
                                              0 BANK0     66    66      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _strcat                                               4     3      1     208
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             24    20      4     793
                                              0 BANK0     16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _blink_leds                                           8     4      4    2054
                                              2 COMMON     8     4      4
                       _set_low_leds
 ---------------------------------------------------------------------------------
 (2) _set_low_leds                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _blink_leds
     _set_low_leds
   _read_line
     _EUSART_Read
   _sprintf
     ___lwdiv
   _strcat
   _strcmp
     _read_line (ARG)
       _EUSART_Read
   _write_and_wait
     _read_line
       _EUSART_Read
     _strcmp
       _read_line (ARG)
         _EUSART_Read
     _write_line
       _EUSART_Write
       _strcat (ARG)
   _write_line
     _EUSART_Write
     _strcat (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      F4       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4A      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     48      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      F4      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jun 02 16:32:39 2017

                        __CFG_CP$OFF 0000                          __CFG_LVP$ON 0000  
                                l105 05E4                                  l151 06B9  
                                l241 0481                                  l233 045A  
                                l235 0479                                  l238 047D  
                                l329 0237                                  l338 0274  
                                l293 04A5                                  l299 04E1  
                                u945 053D                                  u875 04D1  
                                u965 0547                                  u975 0551  
                                u985 0559                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       ?_EUSART_Read 0070                          main@command 00A0  
                               l1243 05FD                                 l1341 04D3  
                               l1511 03C2                                 l1335 04B1  
                               l1347 04F0                                 l1453 0485  
                               l1533 040A                                 l1517 03DA  
                               l1373 0587                                 l1455 0496  
                               l1543 040E                                 l1527 03EB  
                               l1367 0568                                 l1545 03A0  
                               l1369 0570                                 l1713 05F9  
                               l1721 0590                                 l1801 0185  
                               l1395 0558                                 l1387 053A  
                               l1547 0448                                 l1555 05B8  
                               l1723 05A9                                 l1389 0546  
                               l1557 05C3                                 l1813 01C6  
                               l1399 0561                                 l1559 05CB  
                               l1807 01A8                                 l1825 020C  
                               l1753 006D                                 l1827 020F  
                               l1819 01E9                                 l1771 00D6  
                               l1765 00B3                                 l1783 011C  
                               l1759 0090                                 l1777 00F9  
                               l1699 05D9                                 l1795 0162  
                               l1789 013F                                 STR_1 0388  
                               STR_2 037F                                 STR_3 0390  
                               STR_4 0360                                 STR_5 0390  
                               STR_6 0348                                 STR_7 0390  
                               STR_8 0325                                 STR_9 0390  
                               u1225 0400                                 _LATA 010C  
                               _LATB 010D                                 u1095 0464  
                               _LATC 010E                                 u1717 0215  
                               u1727 0452                                 u1737 046E  
                               u1690 024B                                 u1747 048A  
                               u1757 049E                                 u1767 06B4  
                               _WPUA 020C                                 _WPUB 020D  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _main 0045                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 start 0024  
                      __CFG_MCLRE$ON 0000                        ?_EUSART_Write 0070  
     __size_of_OSCILLATOR_Initialize 0004        __end_of_OSCILLATOR_Initialize 06F1  
                              ?_main 0070                                STR_10 0397  
                              STR_11 0390                                STR_20 0388  
                              STR_12 0301                                STR_13 0390  
                              STR_21 036C                                STR_22 0390  
                              STR_14 02D7                                STR_15 0390  
                              STR_23 027D                                STR_24 0390  
                              STR_16 02AD                                STR_17 0390  
                              STR_25 0354                        __CFG_WDTE$OFF 0000  
                              STR_26 0394                                STR_18 0384  
                              STR_27 038C                                STR_19 0378  
                              STR_28 0337                      __end_of___lwdiv 0566  
                              i1l111 0636                                i1l171 001F  
                              i1l167 0015                                _RCREG 0199  
                              _RCSTA 019D                                _TRISA 008C  
                              _TRISB 008D                                _TRISC 008E  
                              _TXREG 019A                                _TXSTA 019E  
                     _WDT_Initialize 06E9                                main@c 00E0  
                     write_line@line 0076                                status 0003  
                              wtemp0 007E                      __end_of_sprintf 044D  
                    __initialization 0026                         __end_of_main 0275  
                     ??_EUSART_Write 0072                     ??_write_and_wait 0066  
                     __CFG_LPBOR$OFF 0000          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 0068               __end_of_WDT_Initialize 06ED  
                             _ADCON0 009D                               _ADCON1 009E  
                             _ADCON2 009F                               _ADRESH 009C  
                             _ADRESL 009B                               _APFCON 011D  
                             _ANSELA 018C                               _ANSELB 018D  
                             _ANSELC 018E                               i1l1421 0676  
                             _OSCCON 0099                               _SPBRGH 019C  
                             _SPBRGL 019B                               _WDTCON 0097  
                     __CFG_PWRTE$OFF 0000                       __CFG_STVREN$ON 0000  
                          ??___lwdiv 0076                  _EUSART_Transmit_ISR 061B  
                 write_and_wait@line 0067                               _strcat 05B3  
                             _strcmp 0566                      ?_WDT_Initialize 0070  
           ADC_GetConversion@channel 0075                            ??_sprintf 0024  
               ?_EUSART_Transmit_ISR 0070                 __size_of_EUSART_Read 001F  
                  _SYSTEM_Initialize 06C0              __end_of__initialization 0041  
                 ?_SYSTEM_Initialize 0070                       __pcstackCOMMON 0070  
                       __pidataBANK2 04F2                  ??_SYSTEM_Initialize 0073  
                     _OPTION_REGbits 0095            __end_of_SYSTEM_Initialize 06CF  
              ??_EUSART_Transmit_ISR 0070                           __pbssBANK0 006A  
                         __pbssBANK1 00E8                           __pbssBANK2 0160  
               __end_of_EUSART_Write 05FC          __size_of_EUSART_Receive_ISR 001C  
                 __size_of_read_line 004D                           __pmaintext 0045  
                         __pintentry 0004                           _blink_leds 044D  
                            _BAUDCON 019F              __size_of_ADC_Initialize 0008  
                            ?_strcat 0072                              ?_strcmp 0075  
                      _eusartRxCount 006A                              ___lwdiv 0532  
                      ?_set_low_leds 0070                              __ptext1 0639  
                            __ptext2 058D                              __ptext3 05D8  
                            __ptext4 0566                              __ptext5 04A5  
                            __ptext6 05FC                              __ptext7 05B3  
                            __ptext8 039A                              __ptext9 0532  
                    __size_of_strcat 0025                      __size_of_strcmp 0027  
                  __end_of_hexpowers 027D                _OSCILLATOR_Initialize 06ED  
                  __end_of_read_line 04F2             ??_PIN_MANAGER_Initialize 0072  
         __size_of_SYSTEM_Initialize 000F                              main@err 00E6  
                            _sprintf 039A                              clrloop0 06DE  
               end_of_initialization 0041                              init_ram 06D7  
                            initloop 06D8                    _EUSART_Initialize 068D  
                 ?_EUSART_Initialize 0070                            _RCSTAbits 019D  
                        ?_blink_leds 0072                       ??_set_low_leds 0072  
                       __pstringtext 0275                              strcmp@r 0078  
                ??_EUSART_Initialize 0072                     ??_WDT_Initialize 0072  
                          _PORTCbits 000E                     __CFG_FOSC$INTOSC 0000  
              __size_of_EUSART_Write 0024            __end_of_EUSART_Initialize 06A7  
                         main@result 00E2                           _write_line 058D  
                       _EUSART_Write 05D8                       _ADC_Initialize 06CF  
             ?_OSCILLATOR_Initialize 0070                       __end_of_strcat 05D8  
                     __end_of_strcmp 058D                  start_initialization 0026  
    __size_of_PIN_MANAGER_Initialize 001C                        ??_EUSART_Read 0072  
            __size_of_write_and_wait 001C                  __size_of_blink_leds 0058  
                  write_and_wait@cmd 0062                    write_and_wait@res 0064  
             __end_of_ADC_Initialize 06D7                          __pdataBANK2 0120  
                         read_line@c 0020                           read_line@i 0060  
                           ??_strcat 0073                             ??_strcmp 0077  
        __end_of_EUSART_Transmit_ISR 0639                          __pbssCOMMON 007A  
                          ___latbits 0001                            _adcResult 00E8  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
               __end_of_set_low_leds 06E9           __end_of_EUSART_Receive_ISR 068D  
         __size_of_EUSART_Initialize 001A                          sprintf@flag 0028  
                        sprintf@prec 002D                  __end_of_EUSART_Read 061B  
                          __pnvBANK0 006D                     ___lwdiv@dividend 0074  
             _PIN_MANAGER_Initialize 0655                 EUSART_Read@readValue 0073  
                           ?___lwdiv 0072                      ?_ADC_Initialize 0070  
                       _eusartRxHead 006C                         _eusartTxHead 007B  
                       _eusartRxTail 006B                         _eusartTxTail 007A  
                        ?_write_line 0076         ??_INTERRUPT_InterruptManager 0071  
            _eusartTxBufferRemaining 006D                            _hexpowers 0275  
                   ___lwdiv@quotient 0077                             ?_sprintf 0020  
                          _read_line 04A5                       _eusartRxBuffer 0160  
                     _eusartTxBuffer 0168                             _LATAbits 010C  
                           _LATCbits 010E                            clear_ram0 06DD  
                           _PIE1bits 0091  __size_of_INTERRUPT_InterruptManager 0020  
                           _PIR1bits 0011                            main@F4456 0120  
                       ??_blink_leds 0076                           _ADCON0bits 009D  
                        write_line@i 0020                       _write_and_wait 0639  
                        _EUSART_Read 05FC                           ?_read_line 0070  
                 __end_of_blink_leds 04A5                  __size_of_write_line 0026  
                  _ADC_GetConversion 06A7              ??_OSCILLATOR_Initialize 0072  
                 ?_ADC_GetConversion 0072                     __size_of___lwdiv 0034  
                ??_ADC_GetConversion 0074                           sprintf@idx 0029  
             __end_of_write_and_wait 0655                           sprintf@val 002B  
                         strcat@from 0072                __size_of_set_low_leds 0006  
                    ___lwdiv@divisor 0072                      ___lwdiv@counter 0079  
                           __ptext10 044D                             __ptext11 06E3  
                           __ptext20 061B                             __ptext12 06C0  
                           __ptext21 0671                             __ptext13 06E9  
                           __ptext14 0655                             __ptext15 06ED  
                           __ptext16 068D                             __ptext17 06CF  
                           __ptext18 06A7                     __size_of_sprintf 00B3  
                      __size_of_main 0230            __end_of_ADC_GetConversion 06C0  
                           int$flags 007E   __end_of_INTERRUPT_InterruptManager 0024  
         _INTERRUPT_InterruptManager 0004                         _set_low_leds 06E3  
                    ?_write_and_wait 0062                           _INTCONbits 000B  
                        ??_read_line 0074              __size_of_WDT_Initialize 0004  
                           intlevel1 0000                            sprintf@ap 002A  
                          sprintf@sp 002E              ?_PIN_MANAGER_Initialize 0070  
                  __CFG_CLKOUTEN$OFF 0000                     ??_ADC_Initialize 0072  
                        blink_leds@c 0074                          blink_leds@i 0078  
                        blink_leds@n 0072                   _EUSART_Receive_ISR 0671  
                       ??_write_line 0078                             sprintf@c 002F  
                           sprintf@f 0020                  ?_EUSART_Receive_ISR 0070  
                           strcat@cp 0075                             strcat@to 0074  
                           strcmp@s1 0079                             strcmp@s2 0075  
                 EUSART_Write@txData 0073         __size_of_EUSART_Transmit_ISR 001E  
     __end_of_PIN_MANAGER_Initialize 0671                 ??_EUSART_Receive_ISR 0070  
                 __end_of_write_line 05B3           __size_of_ADC_GetConversion 0019  
