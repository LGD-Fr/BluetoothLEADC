

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Jun 01 20:21:12 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F1508 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0113                     	;# 
   127  0114                     	;# 
   128  0115                     	;# 
   129  0116                     	;# 
   130  0117                     	;# 
   131  0118                     	;# 
   132  0119                     	;# 
   133  011D                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  018E                     	;# 
   137  0191                     	;# 
   138  0191                     	;# 
   139  0192                     	;# 
   140  0193                     	;# 
   141  0193                     	;# 
   142  0194                     	;# 
   143  0195                     	;# 
   144  0196                     	;# 
   145  0197                     	;# 
   146  0199                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019C                     	;# 
   151  019D                     	;# 
   152  019E                     	;# 
   153  019F                     	;# 
   154  020C                     	;# 
   155  020D                     	;# 
   156  0211                     	;# 
   157  0211                     	;# 
   158  0212                     	;# 
   159  0212                     	;# 
   160  0213                     	;# 
   161  0213                     	;# 
   162  0214                     	;# 
   163  0214                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0215                     	;# 
   167  0216                     	;# 
   168  0216                     	;# 
   169  0217                     	;# 
   170  0217                     	;# 
   171  0391                     	;# 
   172  0392                     	;# 
   173  0393                     	;# 
   174  0394                     	;# 
   175  0395                     	;# 
   176  0396                     	;# 
   177  0498                     	;# 
   178  0498                     	;# 
   179  0499                     	;# 
   180  049A                     	;# 
   181  049B                     	;# 
   182  049B                     	;# 
   183  049C                     	;# 
   184  049D                     	;# 
   185  049E                     	;# 
   186  049F                     	;# 
   187  0611                     	;# 
   188  0612                     	;# 
   189  0613                     	;# 
   190  0613                     	;# 
   191  0614                     	;# 
   192  0615                     	;# 
   193  0616                     	;# 
   194  0616                     	;# 
   195  0617                     	;# 
   196  0618                     	;# 
   197  0619                     	;# 
   198  0619                     	;# 
   199  061A                     	;# 
   200  061B                     	;# 
   201  061C                     	;# 
   202  061C                     	;# 
   203  0691                     	;# 
   204  0692                     	;# 
   205  0693                     	;# 
   206  0694                     	;# 
   207  0695                     	;# 
   208  0F0F                     	;# 
   209  0F10                     	;# 
   210  0F11                     	;# 
   211  0F12                     	;# 
   212  0F13                     	;# 
   213  0F14                     	;# 
   214  0F15                     	;# 
   215  0F16                     	;# 
   216  0F17                     	;# 
   217  0F18                     	;# 
   218  0F19                     	;# 
   219  0F1A                     	;# 
   220  0F1B                     	;# 
   221  0F1C                     	;# 
   222  0F1D                     	;# 
   223  0F1E                     	;# 
   224  0F1F                     	;# 
   225  0F20                     	;# 
   226  0F21                     	;# 
   227  0F22                     	;# 
   228  0F23                     	;# 
   229  0F24                     	;# 
   230  0F25                     	;# 
   231  0F26                     	;# 
   232  0F27                     	;# 
   233  0F28                     	;# 
   234  0F29                     	;# 
   235  0F2A                     	;# 
   236  0F2B                     	;# 
   237  0F2C                     	;# 
   238  0F2D                     	;# 
   239  0F2E                     	;# 
   240  0F2F                     	;# 
   241  0F8C                     	;# 
   242  0F8D                     	;# 
   243  0F91                     	;# 
   244  0F95                     	;# 
   245  0F96                     	;# 
   246  0F97                     	;# 
   247  0F9C                     	;# 
   248  0F9D                     	;# 
   249  0F9E                     	;# 
   250  0FE3                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  008C                     	;# 
   290  008D                     	;# 
   291  008E                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0093                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  010C                     	;# 
   307  010D                     	;# 
   308  010E                     	;# 
   309  0111                     	;# 
   310  0112                     	;# 
   311  0113                     	;# 
   312  0114                     	;# 
   313  0115                     	;# 
   314  0116                     	;# 
   315  0117                     	;# 
   316  0118                     	;# 
   317  0119                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020C                     	;# 
   340  020D                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0391                     	;# 
   357  0392                     	;# 
   358  0393                     	;# 
   359  0394                     	;# 
   360  0395                     	;# 
   361  0396                     	;# 
   362  0498                     	;# 
   363  0498                     	;# 
   364  0499                     	;# 
   365  049A                     	;# 
   366  049B                     	;# 
   367  049B                     	;# 
   368  049C                     	;# 
   369  049D                     	;# 
   370  049E                     	;# 
   371  049F                     	;# 
   372  0611                     	;# 
   373  0612                     	;# 
   374  0613                     	;# 
   375  0613                     	;# 
   376  0614                     	;# 
   377  0615                     	;# 
   378  0616                     	;# 
   379  0616                     	;# 
   380  0617                     	;# 
   381  0618                     	;# 
   382  0619                     	;# 
   383  0619                     	;# 
   384  061A                     	;# 
   385  061B                     	;# 
   386  061C                     	;# 
   387  061C                     	;# 
   388  0691                     	;# 
   389  0692                     	;# 
   390  0693                     	;# 
   391  0694                     	;# 
   392  0695                     	;# 
   393  0F0F                     	;# 
   394  0F10                     	;# 
   395  0F11                     	;# 
   396  0F12                     	;# 
   397  0F13                     	;# 
   398  0F14                     	;# 
   399  0F15                     	;# 
   400  0F16                     	;# 
   401  0F17                     	;# 
   402  0F18                     	;# 
   403  0F19                     	;# 
   404  0F1A                     	;# 
   405  0F1B                     	;# 
   406  0F1C                     	;# 
   407  0F1D                     	;# 
   408  0F1E                     	;# 
   409  0F1F                     	;# 
   410  0F20                     	;# 
   411  0F21                     	;# 
   412  0F22                     	;# 
   413  0F23                     	;# 
   414  0F24                     	;# 
   415  0F25                     	;# 
   416  0F26                     	;# 
   417  0F27                     	;# 
   418  0F28                     	;# 
   419  0F29                     	;# 
   420  0F2A                     	;# 
   421  0F2B                     	;# 
   422  0F2C                     	;# 
   423  0F2D                     	;# 
   424  0F2E                     	;# 
   425  0F2F                     	;# 
   426  0F8C                     	;# 
   427  0F8D                     	;# 
   428  0F91                     	;# 
   429  0F95                     	;# 
   430  0F96                     	;# 
   431  0F97                     	;# 
   432  0F9C                     	;# 
   433  0F9D                     	;# 
   434  0F9E                     	;# 
   435  0FE3                     	;# 
   436  0FE4                     	;# 
   437  0FE5                     	;# 
   438  0FE6                     	;# 
   439  0FE7                     	;# 
   440  0FE8                     	;# 
   441  0FE9                     	;# 
   442  0FEA                     	;# 
   443  0FEB                     	;# 
   444  0FED                     	;# 
   445  0FEE                     	;# 
   446  0FEF                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000D                     	;# 
   461  000E                     	;# 
   462  0011                     	;# 
   463  0012                     	;# 
   464  0013                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  008C                     	;# 
   475  008D                     	;# 
   476  008E                     	;# 
   477  0091                     	;# 
   478  0092                     	;# 
   479  0093                     	;# 
   480  0095                     	;# 
   481  0096                     	;# 
   482  0097                     	;# 
   483  0099                     	;# 
   484  009A                     	;# 
   485  009B                     	;# 
   486  009B                     	;# 
   487  009C                     	;# 
   488  009D                     	;# 
   489  009E                     	;# 
   490  009F                     	;# 
   491  010C                     	;# 
   492  010D                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  011D                     	;# 
   504  018C                     	;# 
   505  018D                     	;# 
   506  018E                     	;# 
   507  0191                     	;# 
   508  0191                     	;# 
   509  0192                     	;# 
   510  0193                     	;# 
   511  0193                     	;# 
   512  0194                     	;# 
   513  0195                     	;# 
   514  0196                     	;# 
   515  0197                     	;# 
   516  0199                     	;# 
   517  019A                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019D                     	;# 
   522  019E                     	;# 
   523  019F                     	;# 
   524  020C                     	;# 
   525  020D                     	;# 
   526  0211                     	;# 
   527  0211                     	;# 
   528  0212                     	;# 
   529  0212                     	;# 
   530  0213                     	;# 
   531  0213                     	;# 
   532  0214                     	;# 
   533  0214                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0215                     	;# 
   537  0216                     	;# 
   538  0216                     	;# 
   539  0217                     	;# 
   540  0217                     	;# 
   541  0391                     	;# 
   542  0392                     	;# 
   543  0393                     	;# 
   544  0394                     	;# 
   545  0395                     	;# 
   546  0396                     	;# 
   547  0498                     	;# 
   548  0498                     	;# 
   549  0499                     	;# 
   550  049A                     	;# 
   551  049B                     	;# 
   552  049B                     	;# 
   553  049C                     	;# 
   554  049D                     	;# 
   555  049E                     	;# 
   556  049F                     	;# 
   557  0611                     	;# 
   558  0612                     	;# 
   559  0613                     	;# 
   560  0613                     	;# 
   561  0614                     	;# 
   562  0615                     	;# 
   563  0616                     	;# 
   564  0616                     	;# 
   565  0617                     	;# 
   566  0618                     	;# 
   567  0619                     	;# 
   568  0619                     	;# 
   569  061A                     	;# 
   570  061B                     	;# 
   571  061C                     	;# 
   572  061C                     	;# 
   573  0691                     	;# 
   574  0692                     	;# 
   575  0693                     	;# 
   576  0694                     	;# 
   577  0695                     	;# 
   578  0F0F                     	;# 
   579  0F10                     	;# 
   580  0F11                     	;# 
   581  0F12                     	;# 
   582  0F13                     	;# 
   583  0F14                     	;# 
   584  0F15                     	;# 
   585  0F16                     	;# 
   586  0F17                     	;# 
   587  0F18                     	;# 
   588  0F19                     	;# 
   589  0F1A                     	;# 
   590  0F1B                     	;# 
   591  0F1C                     	;# 
   592  0F1D                     	;# 
   593  0F1E                     	;# 
   594  0F1F                     	;# 
   595  0F20                     	;# 
   596  0F21                     	;# 
   597  0F22                     	;# 
   598  0F23                     	;# 
   599  0F24                     	;# 
   600  0F25                     	;# 
   601  0F26                     	;# 
   602  0F27                     	;# 
   603  0F28                     	;# 
   604  0F29                     	;# 
   605  0F2A                     	;# 
   606  0F2B                     	;# 
   607  0F2C                     	;# 
   608  0F2D                     	;# 
   609  0F2E                     	;# 
   610  0F2F                     	;# 
   611  0F8C                     	;# 
   612  0F8D                     	;# 
   613  0F91                     	;# 
   614  0F95                     	;# 
   615  0F96                     	;# 
   616  0F97                     	;# 
   617  0F9C                     	;# 
   618  0F9D                     	;# 
   619  0F9E                     	;# 
   620  0FE3                     	;# 
   621  0FE4                     	;# 
   622  0FE5                     	;# 
   623  0FE6                     	;# 
   624  0FE7                     	;# 
   625  0FE8                     	;# 
   626  0FE9                     	;# 
   627  0FEA                     	;# 
   628  0FEB                     	;# 
   629  0FED                     	;# 
   630  0FEE                     	;# 
   631  0FEF                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0008                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0016                     	;# 
   653  0017                     	;# 
   654  0018                     	;# 
   655  0019                     	;# 
   656  001A                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  008C                     	;# 
   660  008D                     	;# 
   661  008E                     	;# 
   662  0091                     	;# 
   663  0092                     	;# 
   664  0093                     	;# 
   665  0095                     	;# 
   666  0096                     	;# 
   667  0097                     	;# 
   668  0099                     	;# 
   669  009A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  009F                     	;# 
   676  010C                     	;# 
   677  010D                     	;# 
   678  010E                     	;# 
   679  0111                     	;# 
   680  0112                     	;# 
   681  0113                     	;# 
   682  0114                     	;# 
   683  0115                     	;# 
   684  0116                     	;# 
   685  0117                     	;# 
   686  0118                     	;# 
   687  0119                     	;# 
   688  011D                     	;# 
   689  018C                     	;# 
   690  018D                     	;# 
   691  018E                     	;# 
   692  0191                     	;# 
   693  0191                     	;# 
   694  0192                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0197                     	;# 
   701  0199                     	;# 
   702  019A                     	;# 
   703  019B                     	;# 
   704  019B                     	;# 
   705  019C                     	;# 
   706  019D                     	;# 
   707  019E                     	;# 
   708  019F                     	;# 
   709  020C                     	;# 
   710  020D                     	;# 
   711  0211                     	;# 
   712  0211                     	;# 
   713  0212                     	;# 
   714  0212                     	;# 
   715  0213                     	;# 
   716  0213                     	;# 
   717  0214                     	;# 
   718  0214                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0215                     	;# 
   722  0216                     	;# 
   723  0216                     	;# 
   724  0217                     	;# 
   725  0217                     	;# 
   726  0391                     	;# 
   727  0392                     	;# 
   728  0393                     	;# 
   729  0394                     	;# 
   730  0395                     	;# 
   731  0396                     	;# 
   732  0498                     	;# 
   733  0498                     	;# 
   734  0499                     	;# 
   735  049A                     	;# 
   736  049B                     	;# 
   737  049B                     	;# 
   738  049C                     	;# 
   739  049D                     	;# 
   740  049E                     	;# 
   741  049F                     	;# 
   742  0611                     	;# 
   743  0612                     	;# 
   744  0613                     	;# 
   745  0613                     	;# 
   746  0614                     	;# 
   747  0615                     	;# 
   748  0616                     	;# 
   749  0616                     	;# 
   750  0617                     	;# 
   751  0618                     	;# 
   752  0619                     	;# 
   753  0619                     	;# 
   754  061A                     	;# 
   755  061B                     	;# 
   756  061C                     	;# 
   757  061C                     	;# 
   758  0691                     	;# 
   759  0692                     	;# 
   760  0693                     	;# 
   761  0694                     	;# 
   762  0695                     	;# 
   763  0F0F                     	;# 
   764  0F10                     	;# 
   765  0F11                     	;# 
   766  0F12                     	;# 
   767  0F13                     	;# 
   768  0F14                     	;# 
   769  0F15                     	;# 
   770  0F16                     	;# 
   771  0F17                     	;# 
   772  0F18                     	;# 
   773  0F19                     	;# 
   774  0F1A                     	;# 
   775  0F1B                     	;# 
   776  0F1C                     	;# 
   777  0F1D                     	;# 
   778  0F1E                     	;# 
   779  0F1F                     	;# 
   780  0F20                     	;# 
   781  0F21                     	;# 
   782  0F22                     	;# 
   783  0F23                     	;# 
   784  0F24                     	;# 
   785  0F25                     	;# 
   786  0F26                     	;# 
   787  0F27                     	;# 
   788  0F28                     	;# 
   789  0F29                     	;# 
   790  0F2A                     	;# 
   791  0F2B                     	;# 
   792  0F2C                     	;# 
   793  0F2D                     	;# 
   794  0F2E                     	;# 
   795  0F2F                     	;# 
   796  0F8C                     	;# 
   797  0F8D                     	;# 
   798  0F91                     	;# 
   799  0F95                     	;# 
   800  0F96                     	;# 
   801  0F97                     	;# 
   802  0F9C                     	;# 
   803  0F9D                     	;# 
   804  0F9E                     	;# 
   805  0FE3                     	;# 
   806  0FE4                     	;# 
   807  0FE5                     	;# 
   808  0FE6                     	;# 
   809  0FE7                     	;# 
   810  0FE8                     	;# 
   811  0FE9                     	;# 
   812  0FEA                     	;# 
   813  0FEB                     	;# 
   814  0FED                     	;# 
   815  0FEE                     	;# 
   816  0FEF                     	;# 
   817  0000                     	;# 
   818  0001                     	;# 
   819  0002                     	;# 
   820  0003                     	;# 
   821  0004                     	;# 
   822  0005                     	;# 
   823  0006                     	;# 
   824  0007                     	;# 
   825  0008                     	;# 
   826  0009                     	;# 
   827  000A                     	;# 
   828  000B                     	;# 
   829  000C                     	;# 
   830  000D                     	;# 
   831  000E                     	;# 
   832  0011                     	;# 
   833  0012                     	;# 
   834  0013                     	;# 
   835  0015                     	;# 
   836  0016                     	;# 
   837  0016                     	;# 
   838  0017                     	;# 
   839  0018                     	;# 
   840  0019                     	;# 
   841  001A                     	;# 
   842  001B                     	;# 
   843  001C                     	;# 
   844  008C                     	;# 
   845  008D                     	;# 
   846  008E                     	;# 
   847  0091                     	;# 
   848  0092                     	;# 
   849  0093                     	;# 
   850  0095                     	;# 
   851  0096                     	;# 
   852  0097                     	;# 
   853  0099                     	;# 
   854  009A                     	;# 
   855  009B                     	;# 
   856  009B                     	;# 
   857  009C                     	;# 
   858  009D                     	;# 
   859  009E                     	;# 
   860  009F                     	;# 
   861  010C                     	;# 
   862  010D                     	;# 
   863  010E                     	;# 
   864  0111                     	;# 
   865  0112                     	;# 
   866  0113                     	;# 
   867  0114                     	;# 
   868  0115                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  0118                     	;# 
   872  0119                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020C                     	;# 
   895  020D                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0391                     	;# 
   912  0392                     	;# 
   913  0393                     	;# 
   914  0394                     	;# 
   915  0395                     	;# 
   916  0396                     	;# 
   917  0498                     	;# 
   918  0498                     	;# 
   919  0499                     	;# 
   920  049A                     	;# 
   921  049B                     	;# 
   922  049B                     	;# 
   923  049C                     	;# 
   924  049D                     	;# 
   925  049E                     	;# 
   926  049F                     	;# 
   927  0611                     	;# 
   928  0612                     	;# 
   929  0613                     	;# 
   930  0613                     	;# 
   931  0614                     	;# 
   932  0615                     	;# 
   933  0616                     	;# 
   934  0616                     	;# 
   935  0617                     	;# 
   936  0618                     	;# 
   937  0619                     	;# 
   938  0619                     	;# 
   939  061A                     	;# 
   940  061B                     	;# 
   941  061C                     	;# 
   942  061C                     	;# 
   943  0691                     	;# 
   944  0692                     	;# 
   945  0693                     	;# 
   946  0694                     	;# 
   947  0695                     	;# 
   948  0F0F                     	;# 
   949  0F10                     	;# 
   950  0F11                     	;# 
   951  0F12                     	;# 
   952  0F13                     	;# 
   953  0F14                     	;# 
   954  0F15                     	;# 
   955  0F16                     	;# 
   956  0F17                     	;# 
   957  0F18                     	;# 
   958  0F19                     	;# 
   959  0F1A                     	;# 
   960  0F1B                     	;# 
   961  0F1C                     	;# 
   962  0F1D                     	;# 
   963  0F1E                     	;# 
   964  0F1F                     	;# 
   965  0F20                     	;# 
   966  0F21                     	;# 
   967  0F22                     	;# 
   968  0F23                     	;# 
   969  0F24                     	;# 
   970  0F25                     	;# 
   971  0F26                     	;# 
   972  0F27                     	;# 
   973  0F28                     	;# 
   974  0F29                     	;# 
   975  0F2A                     	;# 
   976  0F2B                     	;# 
   977  0F2C                     	;# 
   978  0F2D                     	;# 
   979  0F2E                     	;# 
   980  0F2F                     	;# 
   981  0F8C                     	;# 
   982  0F8D                     	;# 
   983  0F91                     	;# 
   984  0F95                     	;# 
   985  0F96                     	;# 
   986  0F97                     	;# 
   987  0F9C                     	;# 
   988  0F9D                     	;# 
   989  0F9E                     	;# 
   990  0FE3                     	;# 
   991  0FE4                     	;# 
   992  0FE5                     	;# 
   993  0FE6                     	;# 
   994  0FE7                     	;# 
   995  0FE8                     	;# 
   996  0FE9                     	;# 
   997  0FEA                     	;# 
   998  0FEB                     	;# 
   999  0FED                     	;# 
  1000  0FEE                     	;# 
  1001  0FEF                     	;# 
  1002  0000                     	;# 
  1003  0001                     	;# 
  1004  0002                     	;# 
  1005  0003                     	;# 
  1006  0004                     	;# 
  1007  0005                     	;# 
  1008  0006                     	;# 
  1009  0007                     	;# 
  1010  0008                     	;# 
  1011  0009                     	;# 
  1012  000A                     	;# 
  1013  000B                     	;# 
  1014  000C                     	;# 
  1015  000D                     	;# 
  1016  000E                     	;# 
  1017  0011                     	;# 
  1018  0012                     	;# 
  1019  0013                     	;# 
  1020  0015                     	;# 
  1021  0016                     	;# 
  1022  0016                     	;# 
  1023  0017                     	;# 
  1024  0018                     	;# 
  1025  0019                     	;# 
  1026  001A                     	;# 
  1027  001B                     	;# 
  1028  001C                     	;# 
  1029  008C                     	;# 
  1030  008D                     	;# 
  1031  008E                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0095                     	;# 
  1036  0096                     	;# 
  1037  0097                     	;# 
  1038  0099                     	;# 
  1039  009A                     	;# 
  1040  009B                     	;# 
  1041  009B                     	;# 
  1042  009C                     	;# 
  1043  009D                     	;# 
  1044  009E                     	;# 
  1045  009F                     	;# 
  1046  010C                     	;# 
  1047  010D                     	;# 
  1048  010E                     	;# 
  1049  0111                     	;# 
  1050  0112                     	;# 
  1051  0113                     	;# 
  1052  0114                     	;# 
  1053  0115                     	;# 
  1054  0116                     	;# 
  1055  0117                     	;# 
  1056  0118                     	;# 
  1057  0119                     	;# 
  1058  011D                     	;# 
  1059  018C                     	;# 
  1060  018D                     	;# 
  1061  018E                     	;# 
  1062  0191                     	;# 
  1063  0191                     	;# 
  1064  0192                     	;# 
  1065  0193                     	;# 
  1066  0193                     	;# 
  1067  0194                     	;# 
  1068  0195                     	;# 
  1069  0196                     	;# 
  1070  0197                     	;# 
  1071  0199                     	;# 
  1072  019A                     	;# 
  1073  019B                     	;# 
  1074  019B                     	;# 
  1075  019C                     	;# 
  1076  019D                     	;# 
  1077  019E                     	;# 
  1078  019F                     	;# 
  1079  020C                     	;# 
  1080  020D                     	;# 
  1081  0211                     	;# 
  1082  0211                     	;# 
  1083  0212                     	;# 
  1084  0212                     	;# 
  1085  0213                     	;# 
  1086  0213                     	;# 
  1087  0214                     	;# 
  1088  0214                     	;# 
  1089  0215                     	;# 
  1090  0215                     	;# 
  1091  0215                     	;# 
  1092  0216                     	;# 
  1093  0216                     	;# 
  1094  0217                     	;# 
  1095  0217                     	;# 
  1096  0391                     	;# 
  1097  0392                     	;# 
  1098  0393                     	;# 
  1099  0394                     	;# 
  1100  0395                     	;# 
  1101  0396                     	;# 
  1102  0498                     	;# 
  1103  0498                     	;# 
  1104  0499                     	;# 
  1105  049A                     	;# 
  1106  049B                     	;# 
  1107  049B                     	;# 
  1108  049C                     	;# 
  1109  049D                     	;# 
  1110  049E                     	;# 
  1111  049F                     	;# 
  1112  0611                     	;# 
  1113  0612                     	;# 
  1114  0613                     	;# 
  1115  0613                     	;# 
  1116  0614                     	;# 
  1117  0615                     	;# 
  1118  0616                     	;# 
  1119  0616                     	;# 
  1120  0617                     	;# 
  1121  0618                     	;# 
  1122  0619                     	;# 
  1123  0619                     	;# 
  1124  061A                     	;# 
  1125  061B                     	;# 
  1126  061C                     	;# 
  1127  061C                     	;# 
  1128  0691                     	;# 
  1129  0692                     	;# 
  1130  0693                     	;# 
  1131  0694                     	;# 
  1132  0695                     	;# 
  1133  0F0F                     	;# 
  1134  0F10                     	;# 
  1135  0F11                     	;# 
  1136  0F12                     	;# 
  1137  0F13                     	;# 
  1138  0F14                     	;# 
  1139  0F15                     	;# 
  1140  0F16                     	;# 
  1141  0F17                     	;# 
  1142  0F18                     	;# 
  1143  0F19                     	;# 
  1144  0F1A                     	;# 
  1145  0F1B                     	;# 
  1146  0F1C                     	;# 
  1147  0F1D                     	;# 
  1148  0F1E                     	;# 
  1149  0F1F                     	;# 
  1150  0F20                     	;# 
  1151  0F21                     	;# 
  1152  0F22                     	;# 
  1153  0F23                     	;# 
  1154  0F24                     	;# 
  1155  0F25                     	;# 
  1156  0F26                     	;# 
  1157  0F27                     	;# 
  1158  0F28                     	;# 
  1159  0F29                     	;# 
  1160  0F2A                     	;# 
  1161  0F2B                     	;# 
  1162  0F2C                     	;# 
  1163  0F2D                     	;# 
  1164  0F2E                     	;# 
  1165  0F2F                     	;# 
  1166  0F8C                     	;# 
  1167  0F8D                     	;# 
  1168  0F91                     	;# 
  1169  0F95                     	;# 
  1170  0F96                     	;# 
  1171  0F97                     	;# 
  1172  0F9C                     	;# 
  1173  0F9D                     	;# 
  1174  0F9E                     	;# 
  1175  0FE3                     	;# 
  1176  0FE4                     	;# 
  1177  0FE5                     	;# 
  1178  0FE6                     	;# 
  1179  0FE7                     	;# 
  1180  0FE8                     	;# 
  1181  0FE9                     	;# 
  1182  0FEA                     	;# 
  1183  0FEB                     	;# 
  1184  0FED                     	;# 
  1185  0FEE                     	;# 
  1186  0FEF                     	;# 
  1187                           
  1188                           	psect	idataBANK2
  1189  054A                     __pidataBANK2:	
  1190                           
  1191                           ;initializer for main@F4456
  1192  054A  3453               	retlw	83
  1193  054B  3455               	retlw	85
  1194  054C  3457               	retlw	87
  1195  054D  342C               	retlw	44
  1196  054E  3430               	retlw	48
  1197  054F  3431               	retlw	49
  1198  0550  3430               	retlw	48
  1199  0551  3432               	retlw	50
  1200  0552  3430               	retlw	48
  1201  0553  3433               	retlw	51
  1202  0554  3430               	retlw	48
  1203  0555  3434               	retlw	52
  1204  0556  3430               	retlw	48
  1205  0557  3435               	retlw	53
  1206  0558  3430               	retlw	48
  1207  0559  3436               	retlw	54
  1208  055A  3430               	retlw	48
  1209  055B  3437               	retlw	55
  1210  055C  3430               	retlw	48
  1211  055D  3438               	retlw	56
  1212  055E  3430               	retlw	48
  1213  055F  3439               	retlw	57
  1214  0560  3430               	retlw	48
  1215  0561  3430               	retlw	48
  1216  0562  3430               	retlw	48
  1217  0563  3441               	retlw	65
  1218  0564  3430               	retlw	48
  1219  0565  3442               	retlw	66
  1220  0566  3430               	retlw	48
  1221  0567  3443               	retlw	67
  1222  0568  3430               	retlw	48
  1223  0569  3444               	retlw	68
  1224  056A  3430               	retlw	48
  1225  056B  3445               	retlw	69
  1226  056C  3430               	retlw	48
  1227  056D  3446               	retlw	70
  1228  056E  342C               	retlw	44
  1229  056F  3400               	retlw	0
  1230  0570  3400               	retlw	0
  1231  0571  3400               	retlw	0
  1232  0572  3400               	retlw	0
  1233  0573  3400               	retlw	0
  1234  0574  3400               	retlw	0
  1235  0575  3400               	retlw	0
  1236  0576  3400               	retlw	0
  1237  0577  3400               	retlw	0
  1238  0578  3400               	retlw	0
  1239  0579  3400               	retlw	0
  1240  057A  3400               	retlw	0
  1241  057B  3400               	retlw	0
  1242  057C  3400               	retlw	0
  1243  057D  3400               	retlw	0
  1244  057E  3400               	retlw	0
  1245  057F  3400               	retlw	0
  1246  0580  3400               	retlw	0
  1247  0581  3400               	retlw	0
  1248  0582  3400               	retlw	0
  1249  0583  3400               	retlw	0
  1250  0584  3400               	retlw	0
  1251  0585  3400               	retlw	0
  1252  0586  3400               	retlw	0
  1253  0587  3400               	retlw	0
  1254  0588  3400               	retlw	0
  1255  0589  3400               	retlw	0
  1256                           
  1257                           	psect	stringtext
  1258  0288                     __pstringtext:	
  1259  0288                     _hexpowers:	
  1260  0288  3401               	retlw	1
  1261  0289  3400               	retlw	0
  1262  028A  3410               	retlw	16
  1263  028B  3400               	retlw	0
  1264  028C  3400               	retlw	0
  1265  028D  3401               	retlw	1
  1266  028E  3400               	retlw	0
  1267  028F  3410               	retlw	16
  1268  0290                     __end_of_hexpowers:	
  1269  0290                     STR_23:	
  1270  0290  3453               	retlw	83	;'S'
  1271  0291  3455               	retlw	85	;'U'
  1272  0292  3457               	retlw	87	;'W'
  1273  0293  342C               	retlw	44	;','
  1274  0294  3430               	retlw	48	;'0'
  1275  0295  3431               	retlw	49	;'1'
  1276  0296  3430               	retlw	48	;'0'
  1277  0297  3432               	retlw	50	;'2'
  1278  0298  3430               	retlw	48	;'0'
  1279  0299  3433               	retlw	51	;'3'
  1280  029A  3430               	retlw	48	;'0'
  1281  029B  3434               	retlw	52	;'4'
  1282  029C  3430               	retlw	48	;'0'
  1283  029D  3435               	retlw	53	;'5'
  1284  029E  3430               	retlw	48	;'0'
  1285  029F  3436               	retlw	54	;'6'
  1286  02A0  3430               	retlw	48	;'0'
  1287  02A1  3437               	retlw	55	;'7'
  1288  02A2  3430               	retlw	48	;'0'
  1289  02A3  3438               	retlw	56	;'8'
  1290  02A4  3430               	retlw	48	;'0'
  1291  02A5  3439               	retlw	57	;'9'
  1292  02A6  3430               	retlw	48	;'0'
  1293  02A7  3430               	retlw	48	;'0'
  1294  02A8  3430               	retlw	48	;'0'
  1295  02A9  3441               	retlw	65	;'A'
  1296  02AA  3430               	retlw	48	;'0'
  1297  02AB  3442               	retlw	66	;'B'
  1298  02AC  3430               	retlw	48	;'0'
  1299  02AD  3443               	retlw	67	;'C'
  1300  02AE  3430               	retlw	48	;'0'
  1301  02AF  3444               	retlw	68	;'D'
  1302  02B0  3430               	retlw	48	;'0'
  1303  02B1  3445               	retlw	69	;'E'
  1304  02B2  3430               	retlw	48	;'0'
  1305  02B3  3446               	retlw	70	;'F'
  1306  02B4  342C               	retlw	44	;','
  1307  02B5  3441               	retlw	65	;'A'
  1308  02B6  3441               	retlw	65	;'A'
  1309  02B7  3442               	retlw	66	;'B'
  1310  02B8  3442               	retlw	66	;'B'
  1311  02B9  3443               	retlw	67	;'C'
  1312  02BA  3443               	retlw	67	;'C'
  1313  02BB  3444               	retlw	68	;'D'
  1314  02BC  3444               	retlw	68	;'D'
  1315  02BD  3445               	retlw	69	;'E'
  1316  02BE  3445               	retlw	69	;'E'
  1317  02BF  3400               	retlw	0
  1318  02C0                     STR_16:	
  1319  02C0  3450               	retlw	80	;'P'
  1320  02C1  3443               	retlw	67	;'C'
  1321  02C2  342C               	retlw	44	;','
  1322  02C3  3446               	retlw	70	;'F'
  1323  02C4  3446               	retlw	70	;'F'
  1324  02C5  3430               	retlw	48	;'0'
  1325  02C6  3432               	retlw	50	;'2'
  1326  02C7  3430               	retlw	48	;'0'
  1327  02C8  3433               	retlw	51	;'3'
  1328  02C9  3430               	retlw	48	;'0'
  1329  02CA  3434               	retlw	52	;'4'
  1330  02CB  3430               	retlw	48	;'0'
  1331  02CC  3435               	retlw	53	;'5'
  1332  02CD  3430               	retlw	48	;'0'
  1333  02CE  3436               	retlw	54	;'6'
  1334  02CF  3430               	retlw	48	;'0'
  1335  02D0  3437               	retlw	55	;'7'
  1336  02D1  3430               	retlw	48	;'0'
  1337  02D2  3438               	retlw	56	;'8'
  1338  02D3  3430               	retlw	48	;'0'
  1339  02D4  3439               	retlw	57	;'9'
  1340  02D5  3430               	retlw	48	;'0'
  1341  02D6  3430               	retlw	48	;'0'
  1342  02D7  3430               	retlw	48	;'0'
  1343  02D8  3441               	retlw	65	;'A'
  1344  02D9  3430               	retlw	48	;'0'
  1345  02DA  3442               	retlw	66	;'B'
  1346  02DB  3430               	retlw	48	;'0'
  1347  02DC  3443               	retlw	67	;'C'
  1348  02DD  3430               	retlw	48	;'0'
  1349  02DE  3444               	retlw	68	;'D'
  1350  02DF  3430               	retlw	48	;'0'
  1351  02E0  3445               	retlw	69	;'E'
  1352  02E1  3430               	retlw	48	;'0'
  1353  02E2  3446               	retlw	70	;'F'
  1354  02E3  342C               	retlw	44	;','
  1355  02E4  3431               	retlw	49	;'1'
  1356  02E5  3441               	retlw	65	;'A'
  1357  02E6  342C               	retlw	44	;','
  1358  02E7  3430               	retlw	48	;'0'
  1359  02E8  3433               	retlw	51	;'3'
  1360  02E9  3400               	retlw	0
  1361  02EA                     STR_14:	
  1362  02EA  3450               	retlw	80	;'P'
  1363  02EB  3443               	retlw	67	;'C'
  1364  02EC  342C               	retlw	44	;','
  1365  02ED  3430               	retlw	48	;'0'
  1366  02EE  3431               	retlw	49	;'1'
  1367  02EF  3430               	retlw	48	;'0'
  1368  02F0  3432               	retlw	50	;'2'
  1369  02F1  3430               	retlw	48	;'0'
  1370  02F2  3433               	retlw	51	;'3'
  1371  02F3  3430               	retlw	48	;'0'
  1372  02F4  3434               	retlw	52	;'4'
  1373  02F5  3430               	retlw	48	;'0'
  1374  02F6  3435               	retlw	53	;'5'
  1375  02F7  3430               	retlw	48	;'0'
  1376  02F8  3436               	retlw	54	;'6'
  1377  02F9  3430               	retlw	48	;'0'
  1378  02FA  3437               	retlw	55	;'7'
  1379  02FB  3430               	retlw	48	;'0'
  1380  02FC  3438               	retlw	56	;'8'
  1381  02FD  3430               	retlw	48	;'0'
  1382  02FE  3439               	retlw	57	;'9'
  1383  02FF  3430               	retlw	48	;'0'
  1384  0300  3430               	retlw	48	;'0'
  1385  0301  3430               	retlw	48	;'0'
  1386  0302  3441               	retlw	65	;'A'
  1387  0303  3430               	retlw	48	;'0'
  1388  0304  3442               	retlw	66	;'B'
  1389  0305  3430               	retlw	48	;'0'
  1390  0306  3443               	retlw	67	;'C'
  1391  0307  3430               	retlw	48	;'0'
  1392  0308  3444               	retlw	68	;'D'
  1393  0309  3430               	retlw	48	;'0'
  1394  030A  3445               	retlw	69	;'E'
  1395  030B  3430               	retlw	48	;'0'
  1396  030C  3446               	retlw	70	;'F'
  1397  030D  342C               	retlw	44	;','
  1398  030E  3430               	retlw	48	;'0'
  1399  030F  3432               	retlw	50	;'2'
  1400  0310  342C               	retlw	44	;','
  1401  0311  3430               	retlw	48	;'0'
  1402  0312  3435               	retlw	53	;'5'
  1403  0313  3400               	retlw	0
  1404  0314                     STR_12:	
  1405  0314  3450               	retlw	80	;'P'
  1406  0315  3453               	retlw	83	;'S'
  1407  0316  342C               	retlw	44	;','
  1408  0317  3431               	retlw	49	;'1'
  1409  0318  3431               	retlw	49	;'1'
  1410  0319  3432               	retlw	50	;'2'
  1411  031A  3432               	retlw	50	;'2'
  1412  031B  3433               	retlw	51	;'3'
  1413  031C  3433               	retlw	51	;'3'
  1414  031D  3434               	retlw	52	;'4'
  1415  031E  3434               	retlw	52	;'4'
  1416  031F  3435               	retlw	53	;'5'
  1417  0320  3435               	retlw	53	;'5'
  1418  0321  3436               	retlw	54	;'6'
  1419  0322  3436               	retlw	54	;'6'
  1420  0323  3437               	retlw	55	;'7'
  1421  0324  3437               	retlw	55	;'7'
  1422  0325  3438               	retlw	56	;'8'
  1423  0326  3438               	retlw	56	;'8'
  1424  0327  3439               	retlw	57	;'9'
  1425  0328  3439               	retlw	57	;'9'
  1426  0329  3430               	retlw	48	;'0'
  1427  032A  3430               	retlw	48	;'0'
  1428  032B  3441               	retlw	65	;'A'
  1429  032C  3441               	retlw	65	;'A'
  1430  032D  3442               	retlw	66	;'B'
  1431  032E  3442               	retlw	66	;'B'
  1432  032F  3443               	retlw	67	;'C'
  1433  0330  3443               	retlw	67	;'C'
  1434  0331  3444               	retlw	68	;'D'
  1435  0332  3444               	retlw	68	;'D'
  1436  0333  3445               	retlw	69	;'E'
  1437  0334  3445               	retlw	69	;'E'
  1438  0335  3446               	retlw	70	;'F'
  1439  0336  3446               	retlw	70	;'F'
  1440  0337  3400               	retlw	0
  1441  0338                     STR_8:	
  1442  0338  3453               	retlw	83	;'S'
  1443  0339  342D               	retlw	45	;'-'
  1444  033A  342C               	retlw	44	;','
  1445  033B  3450               	retlw	80	;'P'
  1446  033C  3449               	retlw	73	;'I'
  1447  033D  3443               	retlw	67	;'C'
  1448  033E  3431               	retlw	49	;'1'
  1449  033F  3436               	retlw	54	;'6'
  1450  0340  342D               	retlw	45	;'-'
  1451  0341  3442               	retlw	66	;'B'
  1452  0342  344C               	retlw	76	;'L'
  1453  0343  3445               	retlw	69	;'E'
  1454  0344  3432               	retlw	50	;'2'
  1455  0345  342D               	retlw	45	;'-'
  1456  0346  3430               	retlw	48	;'0'
  1457  0347  3430               	retlw	48	;'0'
  1458  0348  3431               	retlw	49	;'1'
  1459  0349  3400               	retlw	0
  1460  034A                     STR_28:	
  1461  034A  3430               	retlw	48	;'0'
  1462  034B  3431               	retlw	49	;'1'
  1463  034C  3432               	retlw	50	;'2'
  1464  034D  3433               	retlw	51	;'3'
  1465  034E  3434               	retlw	52	;'4'
  1466  034F  3435               	retlw	53	;'5'
  1467  0350  3436               	retlw	54	;'6'
  1468  0351  3437               	retlw	55	;'7'
  1469  0352  3438               	retlw	56	;'8'
  1470  0353  3439               	retlw	57	;'9'
  1471  0354  3441               	retlw	65	;'A'
  1472  0355  3442               	retlw	66	;'B'
  1473  0356  3443               	retlw	67	;'C'
  1474  0357  3444               	retlw	68	;'D'
  1475  0358  3445               	retlw	69	;'E'
  1476  0359  3446               	retlw	70	;'F'
  1477  035A  3400               	retlw	0
  1478  035B                     STR_6:	
  1479  035B  3453               	retlw	83	;'S'
  1480  035C  3452               	retlw	82	;'R'
  1481  035D  342C               	retlw	44	;','
  1482  035E  3430               	retlw	48	;'0'
  1483  035F  3430               	retlw	48	;'0'
  1484  0360  3430               	retlw	48	;'0'
  1485  0361  3430               	retlw	48	;'0'
  1486  0362  3430               	retlw	48	;'0'
  1487  0363  3430               	retlw	48	;'0'
  1488  0364  3430               	retlw	48	;'0'
  1489  0365  3430               	retlw	48	;'0'
  1490  0366  3400               	retlw	0
  1491  0367                     STR_25:	
  1492  0367  3441               	retlw	65	;'A'
  1493  0368  342C               	retlw	44	;','
  1494  0369  3430               	retlw	48	;'0'
  1495  036A  3430               	retlw	48	;'0'
  1496  036B  3435               	retlw	53	;'5'
  1497  036C  3430               	retlw	48	;'0'
  1498  036D  342C               	retlw	44	;','
  1499  036E  3430               	retlw	48	;'0'
  1500  036F  3437               	retlw	55	;'7'
  1501  0370  3444               	retlw	68	;'D'
  1502  0371  3430               	retlw	48	;'0'
  1503  0372  3400               	retlw	0
  1504  0373                     STR_4:	
  1505  0373  3453               	retlw	83	;'S'
  1506  0374  3453               	retlw	83	;'S'
  1507  0375  342C               	retlw	44	;','
  1508  0376  3443               	retlw	67	;'C'
  1509  0377  3430               	retlw	48	;'0'
  1510  0378  3430               	retlw	48	;'0'
  1511  0379  3430               	retlw	48	;'0'
  1512  037A  3430               	retlw	48	;'0'
  1513  037B  3430               	retlw	48	;'0'
  1514  037C  3430               	retlw	48	;'0'
  1515  037D  3431               	retlw	49	;'1'
  1516  037E  3400               	retlw	0
  1517  037F                     STR_21:	
  1518  037F  3453               	retlw	83	;'S'
  1519  0380  3455               	retlw	85	;'U'
  1520  0381  3457               	retlw	87	;'W'
  1521  0382  342C               	retlw	44	;','
  1522  0383  3432               	retlw	50	;'2'
  1523  0384  3441               	retlw	65	;'A'
  1524  0385  3431               	retlw	49	;'1'
  1525  0386  3439               	retlw	57	;'9'
  1526  0387  342C               	retlw	44	;','
  1527  0388  3433               	retlw	51	;'3'
  1528  0389  3432               	retlw	50	;'2'
  1529  038A  3400               	retlw	0
  1530  038B                     STR_19:	
  1531  038B  3452               	retlw	82	;'R'
  1532  038C  3465               	retlw	101	;'e'
  1533  038D  3462               	retlw	98	;'b'
  1534  038E  346F               	retlw	111	;'o'
  1535  038F  346F               	retlw	111	;'o'
  1536  0390  3474               	retlw	116	;'t'
  1537  0391  3400               	retlw	0
  1538  0392                     STR_2:	
  1539  0392  3453               	retlw	83	;'S'
  1540  0393  3446               	retlw	70	;'F'
  1541  0394  342C               	retlw	44	;','
  1542  0395  3431               	retlw	49	;'1'
  1543  0396  3400               	retlw	0
  1544  0397                     STR_18:	
  1545  0397  3452               	retlw	82	;'R'
  1546  0398  342C               	retlw	44	;','
  1547  0399  3431               	retlw	49	;'1'
  1548  039A  3400               	retlw	0
  1549  039B                     STR_1:	
  1550  039B  3443               	retlw	67	;'C'
  1551  039C  344D               	retlw	77	;'M'
  1552  039D  3444               	retlw	68	;'D'
  1553  039E  3400               	retlw	0
  1554  039F                     STR_27:	
  1555  039F  3445               	retlw	69	;'E'
  1556  03A0  344E               	retlw	78	;'N'
  1557  03A1  3444               	retlw	68	;'D'
  1558  03A2  3400               	retlw	0
  1559  03A3                     STR_3:	
  1560  03A3  3441               	retlw	65	;'A'
  1561  03A4  344F               	retlw	79	;'O'
  1562  03A5  344B               	retlw	75	;'K'
  1563  03A6  3400               	retlw	0
  1564  03A7                     STR_26:	
  1565  03A7  3425               	retlw	37	;'%'
  1566  03A8  3458               	retlw	88	;'X'
  1567  03A9  3400               	retlw	0
  1568  03AA                     STR_10:	
  1569  03AA  3450               	retlw	80	;'P'
  1570  03AB  345A               	retlw	90	;'Z'
  1571  03AC  3400               	retlw	0
  1572  039B                     
  1573                           ; #config settings
  1574  0000                     
  1575                           	psect	nvBANK0
  1576  006D                     __pnvBANK0:	
  1577  006D                     _eusartTxBufferRemaining:	
  1578  006D                     	ds	1
  1579  000E                     _PORTCbits	set	14
  1580  0011                     _PIR1bits	set	17
  1581  000B                     _INTCONbits	set	11
  1582  009D                     _ADCON0bits	set	157
  1583  009C                     _ADRESH	set	156
  1584  009B                     _ADRESL	set	155
  1585  009F                     _ADCON2	set	159
  1586  009E                     _ADCON1	set	158
  1587  009D                     _ADCON0	set	157
  1588  0091                     _PIE1bits	set	145
  1589  0097                     _WDTCON	set	151
  1590  0099                     _OSCCON	set	153
  1591  0095                     _OPTION_REGbits	set	149
  1592  008E                     _TRISC	set	142
  1593  008D                     _TRISB	set	141
  1594  008C                     _TRISA	set	140
  1595  010E                     _LATCbits	set	270
  1596  010C                     _LATAbits	set	268
  1597  011D                     _APFCON	set	285
  1598  010E                     _LATC	set	270
  1599  010D                     _LATB	set	269
  1600  010C                     _LATA	set	268
  1601  0199                     _RCREG	set	409
  1602  019D                     _RCSTAbits	set	413
  1603  019A                     _TXREG	set	410
  1604  019C                     _SPBRGH	set	412
  1605  019B                     _SPBRGL	set	411
  1606  019E                     _TXSTA	set	414
  1607  019D                     _RCSTA	set	413
  1608  019F                     _BAUDCON	set	415
  1609  018C                     _ANSELA	set	396
  1610  018D                     _ANSELB	set	397
  1611  018E                     _ANSELC	set	398
  1612  020C                     _WPUA	set	524
  1613  020D                     _WPUB	set	525
  1614                           
  1615                           	psect	cinit
  1616  0026                     start_initialization:	
  1617  0026                     __initialization:	
  1618                           
  1619                           ; Initialize objects allocated to BANK2
  1620  0026  304A               	movlw	low __pidataBANK2
  1621  0027  0084               	movwf	4
  1622  0028  3085               	movlw	(high __pidataBANK2)| (0+128)
  1623  0029  0085               	movwf	5
  1624  002A  3020               	movlw	low __pdataBANK2
  1625  002B  0086               	movwf	6
  1626  002C  3001               	movlw	high __pdataBANK2
  1627  002D  0087               	movwf	7
  1628  002E  3040               	movlw	64
  1629  002F  3187  272F  3180   	fcall	init_ram
  1630                           
  1631                           ; Clear objects allocated to COMMON
  1632  0032  01FA               	clrf	__pbssCOMMON& (0+127)
  1633  0033  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1634                           
  1635                           ; Clear objects allocated to BANK0
  1636  0034  01EA               	clrf	__pbssBANK0& (0+127)
  1637  0035  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  1638  0036  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  1639                           
  1640                           ; Clear objects allocated to BANK1
  1641  0037  0021               	movlb	1	; select bank1
  1642  0038  01E8               	clrf	__pbssBANK1& (0+127)
  1643  0039  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  1644                           
  1645                           ; Clear objects allocated to BANK2
  1646  003A  3060               	movlw	low __pbssBANK2
  1647  003B  0084               	movwf	4
  1648  003C  3001               	movlw	high __pbssBANK2
  1649  003D  0085               	movwf	5
  1650  003E  3010               	movlw	16
  1651  003F  3187  2735         	fcall	clear_ram0
  1652  0041                     end_of_initialization:	
  1653                           ;End of C runtime variable initialization code
  1654                           
  1655  0041                     __end_of__initialization:	
  1656  0041  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1657  0042  0020               	movlb	0
  1658  0043  3180  2845         	ljmp	_main	;jump to C main() function
  1659                           
  1660                           	psect	bssCOMMON
  1661  007A                     __pbssCOMMON:	
  1662  007A                     _eusartTxTail:	
  1663  007A                     	ds	1
  1664  007B                     _eusartTxHead:	
  1665  007B                     	ds	1
  1666                           
  1667                           	psect	bssBANK0
  1668  006A                     __pbssBANK0:	
  1669  006A                     _eusartRxCount:	
  1670  006A                     	ds	1
  1671  006B                     _eusartRxTail:	
  1672  006B                     	ds	1
  1673  006C                     _eusartRxHead:	
  1674  006C                     	ds	1
  1675                           
  1676                           	psect	bssBANK1
  1677  00E8                     __pbssBANK1:	
  1678  00E8                     _adcResult:	
  1679  00E8                     	ds	2
  1680                           
  1681                           	psect	bssBANK2
  1682  0160                     __pbssBANK2:	
  1683  0160                     _eusartRxBuffer:	
  1684  0160                     	ds	8
  1685  0168                     _eusartTxBuffer:	
  1686  0168                     	ds	8
  1687                           
  1688                           	psect	dataBANK2
  1689  0120                     __pdataBANK2:	
  1690  0120                     main@F4456:	
  1691  0120                     	ds	64
  1692                           
  1693                           	psect	inittext
  1694  072F                     init_ram:	
  1695  072F  00FE               	movwf	126
  1696  0730                     initloop:	
  1697  0730  0012               	moviw fsr0++
  1698  0731  001E               	movwi fsr1++
  1699  0732  0BFE               	decfsz	126,f
  1700  0733  2F30               	goto	initloop
  1701  0734  3400               	retlw	0
  1702                           
  1703                           	psect	clrtext
  1704  0735                     clear_ram0:	
  1705                           ;	Called with FSR0 containing the base address, and
  1706                           ;	WREG with the size to clear
  1707                           
  1708  0735  0064               	clrwdt	;clear the watchdog before getting into this loop
  1709  0736                     clrloop0:	
  1710  0736  0180               	clrf	0	;clear RAM location pointed to by FSR
  1711  0737  3101               	addfsr 0,1
  1712  0738  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1713  0739  2F36               	goto	clrloop0	;have we reached the end yet?
  1714  073A  3400               	retlw	0	;all done for this memory range, return
  1715                           
  1716                           	psect	cstackBANK1
  1717  00A0                     __pcstackBANK1:	
  1718  00A0                     main@command:	
  1719                           
  1720                           ; 64 bytes @ 0x0
  1721  00A0                     	ds	64
  1722  00E0                     main@result:	
  1723                           
  1724                           ; 4 bytes @ 0x40
  1725  00E0                     	ds	4
  1726  00E4                     main@c:	
  1727                           
  1728                           ; 2 bytes @ 0x44
  1729  00E4                     	ds	2
  1730  00E6                     main@err:	
  1731                           
  1732                           ; 2 bytes @ 0x46
  1733  00E6                     	ds	2
  1734                           
  1735                           	psect	cstackCOMMON
  1736  0070                     __pcstackCOMMON:	
  1737  0070                     ?_OSCILLATOR_Initialize:	
  1738  0070                     ?_WDT_Initialize:	
  1739                           ; 1 bytes @ 0x0
  1740                           
  1741  0070                     ?_ADC_Initialize:	
  1742                           ; 1 bytes @ 0x0
  1743                           
  1744  0070                     ?_EUSART_Initialize:	
  1745                           ; 1 bytes @ 0x0
  1746                           
  1747  0070                     ?_PIN_MANAGER_Initialize:	
  1748                           ; 1 bytes @ 0x0
  1749                           
  1750  0070                     ?_SYSTEM_Initialize:	
  1751                           ; 1 bytes @ 0x0
  1752                           
  1753  0070                     ?_EUSART_Read:	
  1754                           ; 1 bytes @ 0x0
  1755                           
  1756  0070                     ?_EUSART_Write:	
  1757                           ; 1 bytes @ 0x0
  1758                           
  1759  0070                     ?_EUSART_Transmit_ISR:	
  1760                           ; 1 bytes @ 0x0
  1761                           
  1762  0070                     ??_EUSART_Transmit_ISR:	
  1763                           ; 1 bytes @ 0x0
  1764                           
  1765  0070                     ?_EUSART_Receive_ISR:	
  1766                           ; 1 bytes @ 0x0
  1767                           
  1768  0070                     ??_EUSART_Receive_ISR:	
  1769                           ; 1 bytes @ 0x0
  1770                           
  1771  0070                     ?_INTERRUPT_InterruptManager:	
  1772                           ; 1 bytes @ 0x0
  1773                           
  1774  0070                     ?_read_line:	
  1775                           ; 1 bytes @ 0x0
  1776                           
  1777  0070                     ?_main:	
  1778                           ; 1 bytes @ 0x0
  1779                           
  1780  0070                     ?_set_low_leds:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783                           
  1784                           ; 2 bytes @ 0x0
  1785  0070                     	ds	1
  1786  0071                     ??_INTERRUPT_InterruptManager:	
  1787                           
  1788                           ; 1 bytes @ 0x1
  1789  0071                     	ds	1
  1790  0072                     ??_OSCILLATOR_Initialize:	
  1791  0072                     ??_WDT_Initialize:	
  1792                           ; 1 bytes @ 0x2
  1793                           
  1794  0072                     ??_ADC_Initialize:	
  1795                           ; 1 bytes @ 0x2
  1796                           
  1797  0072                     ??_EUSART_Initialize:	
  1798                           ; 1 bytes @ 0x2
  1799                           
  1800  0072                     ?_strcat:	
  1801                           ; 1 bytes @ 0x2
  1802                           
  1803  0072                     ??_PIN_MANAGER_Initialize:	
  1804                           ; 1 bytes @ 0x2
  1805                           
  1806  0072                     ??_EUSART_Read:	
  1807                           ; 1 bytes @ 0x2
  1808                           
  1809  0072                     ??_EUSART_Write:	
  1810                           ; 1 bytes @ 0x2
  1811                           
  1812  0072                     ??_set_low_leds:	
  1813                           ; 1 bytes @ 0x2
  1814                           
  1815  0072                     ?_ADC_GetConversion:	
  1816                           ; 1 bytes @ 0x2
  1817                           
  1818  0072                     ?_blink_leds:	
  1819                           ; 2 bytes @ 0x2
  1820                           
  1821  0072                     ?___awmod:	
  1822                           ; 2 bytes @ 0x2
  1823                           
  1824  0072                     ?___lwdiv:	
  1825                           ; 2 bytes @ 0x2
  1826                           
  1827  0072                     strcat@from:	
  1828                           ; 2 bytes @ 0x2
  1829                           
  1830  0072                     blink_leds@n:	
  1831                           ; 1 bytes @ 0x2
  1832                           
  1833  0072                     ___awmod@divisor:	
  1834                           ; 2 bytes @ 0x2
  1835                           
  1836  0072                     ___lwdiv@divisor:	
  1837                           ; 2 bytes @ 0x2
  1838                           
  1839                           
  1840                           ; 2 bytes @ 0x2
  1841  0072                     	ds	1
  1842  0073                     ??_strcat:	
  1843  0073                     ??_SYSTEM_Initialize:	
  1844                           ; 1 bytes @ 0x3
  1845                           
  1846  0073                     EUSART_Read@readValue:	
  1847                           ; 1 bytes @ 0x3
  1848                           
  1849  0073                     EUSART_Write@txData:	
  1850                           ; 1 bytes @ 0x3
  1851                           
  1852                           
  1853                           ; 1 bytes @ 0x3
  1854  0073                     	ds	1
  1855  0074                     ??_ADC_GetConversion:	
  1856  0074                     ??_read_line:	
  1857                           ; 1 bytes @ 0x4
  1858                           
  1859  0074                     strcat@to:	
  1860                           ; 1 bytes @ 0x4
  1861                           
  1862  0074                     blink_leds@c:	
  1863                           ; 1 bytes @ 0x4
  1864                           
  1865  0074                     ___awmod@dividend:	
  1866                           ; 2 bytes @ 0x4
  1867                           
  1868  0074                     ___lwdiv@dividend:	
  1869                           ; 2 bytes @ 0x4
  1870                           
  1871                           
  1872                           ; 2 bytes @ 0x4
  1873  0074                     	ds	1
  1874  0075                     ?_strcmp:	
  1875  0075                     ADC_GetConversion@channel:	
  1876                           ; 2 bytes @ 0x5
  1877                           
  1878  0075                     strcat@cp:	
  1879                           ; 1 bytes @ 0x5
  1880                           
  1881  0075                     strcmp@s2:	
  1882                           ; 1 bytes @ 0x5
  1883                           
  1884                           
  1885                           ; 2 bytes @ 0x5
  1886  0075                     	ds	1
  1887  0076                     ??_blink_leds:	
  1888  0076                     ??___awmod:	
  1889                           ; 1 bytes @ 0x6
  1890                           
  1891  0076                     ??___lwdiv:	
  1892                           ; 1 bytes @ 0x6
  1893                           
  1894  0076                     ?_write_line:	
  1895                           ; 1 bytes @ 0x6
  1896                           
  1897  0076                     write_line@line:	
  1898                           ; 2 bytes @ 0x6
  1899                           
  1900                           
  1901                           ; 2 bytes @ 0x6
  1902  0076                     	ds	1
  1903  0077                     ??_strcmp:	
  1904  0077                     ___awmod@counter:	
  1905                           ; 1 bytes @ 0x7
  1906                           
  1907  0077                     ___lwdiv@quotient:	
  1908                           ; 1 bytes @ 0x7
  1909                           
  1910                           
  1911                           ; 2 bytes @ 0x7
  1912  0077                     	ds	1
  1913  0078                     ??_write_line:	
  1914  0078                     ___awmod@sign:	
  1915                           ; 1 bytes @ 0x8
  1916                           
  1917  0078                     strcmp@r:	
  1918                           ; 1 bytes @ 0x8
  1919                           
  1920  0078                     blink_leds@i:	
  1921                           ; 1 bytes @ 0x8
  1922                           
  1923                           
  1924                           ; 2 bytes @ 0x8
  1925  0078                     	ds	1
  1926  0079                     ___lwdiv@counter:	
  1927  0079                     strcmp@s1:	
  1928                           ; 1 bytes @ 0x9
  1929                           
  1930                           
  1931                           ; 1 bytes @ 0x9
  1932  0079                     	ds	1
  1933                           
  1934                           	psect	cstackBANK0
  1935  0020                     __pcstackBANK0:	
  1936  0020                     ?_sprintf:	
  1937  0020                     write_line@i:	
  1938                           ; 2 bytes @ 0x0
  1939                           
  1940  0020                     sprintf@f:	
  1941                           ; 2 bytes @ 0x0
  1942                           
  1943  0020                     read_line@c:	
  1944                           ; 2 bytes @ 0x0
  1945                           
  1946                           
  1947                           ; 64 bytes @ 0x0
  1948  0020                     	ds	4
  1949  0024                     ??_sprintf:	
  1950                           
  1951                           ; 1 bytes @ 0x4
  1952  0024                     	ds	4
  1953  0028                     sprintf@flag:	
  1954                           
  1955                           ; 1 bytes @ 0x8
  1956  0028                     	ds	1
  1957  0029                     sprintf@idx:	
  1958                           
  1959                           ; 1 bytes @ 0x9
  1960  0029                     	ds	1
  1961  002A                     sprintf@ap:	
  1962                           
  1963                           ; 1 bytes @ 0xA
  1964  002A                     	ds	1
  1965  002B                     sprintf@val:	
  1966                           
  1967                           ; 2 bytes @ 0xB
  1968  002B                     	ds	2
  1969  002D                     sprintf@prec:	
  1970                           
  1971                           ; 1 bytes @ 0xD
  1972  002D                     	ds	1
  1973  002E                     sprintf@sp:	
  1974                           
  1975                           ; 1 bytes @ 0xE
  1976  002E                     	ds	1
  1977  002F                     sprintf@c:	
  1978                           
  1979                           ; 1 bytes @ 0xF
  1980  002F                     	ds	49
  1981  0060                     read_line@i:	
  1982                           
  1983                           ; 2 bytes @ 0x40
  1984  0060                     	ds	2
  1985  0062                     ?_write_and_wait:	
  1986  0062                     write_and_wait@cmd:	
  1987                           ; 2 bytes @ 0x42
  1988                           
  1989                           
  1990                           ; 2 bytes @ 0x42
  1991  0062                     	ds	2
  1992  0064                     write_and_wait@res:	
  1993                           
  1994                           ; 2 bytes @ 0x44
  1995  0064                     	ds	2
  1996  0066                     ??_write_and_wait:	
  1997                           
  1998                           ; 1 bytes @ 0x46
  1999  0066                     	ds	1
  2000  0067                     write_and_wait@line:	
  2001                           
  2002                           ; 1 bytes @ 0x47
  2003  0067                     	ds	1
  2004  0068                     ??_main:	
  2005                           
  2006                           ; 1 bytes @ 0x48
  2007  0068                     	ds	2
  2008                           
  2009                           	psect	maintext
  2010  0045                     __pmaintext:	
  2011 ;;
  2012 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2013 ;;
  2014 ;; *************** function _main *****************
  2015 ;; Defined at:
  2016 ;;		line 175 in file "main.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  command        64    0[BANK1 ] unsigned char [64]
  2021 ;;  result          4   64[BANK1 ] unsigned char [4]
  2022 ;;  err             2   70[BANK1 ] int 
  2023 ;;  c               2   68[BANK1 ] int 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : B1F/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2033 ;;      Params:         0       0       0       0
  2034 ;;      Locals:         0       0      72       0
  2035 ;;      Temps:          0       2       0       0
  2036 ;;      Totals:         0       2      72       0
  2037 ;;Total ram usage:       74 bytes
  2038 ;; Hardware stack levels required when called:    5
  2039 ;; This function calls:
  2040 ;;		_ADC_GetConversion
  2041 ;;		_SYSTEM_Initialize
  2042 ;;		___awmod
  2043 ;;		_blink_leds
  2044 ;;		_read_line
  2045 ;;		_sprintf
  2046 ;;		_strcat
  2047 ;;		_strcmp
  2048 ;;		_write_and_wait
  2049 ;;		_write_line
  2050 ;; This function is called by:
  2051 ;;		Startup code after reset
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           
  2056                           ;psect for function _main
  2057  0045                     _main:	
  2058                           
  2059                           ;main.c: 178: SYSTEM_Initialize();
  2060                           
  2061                           ;incstack = 0
  2062                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2063  0045  3187  2718  3180   	fcall	_SYSTEM_Initialize
  2064                           
  2065                           ;main.c: 179: (INTCONbits.GIE = 1);
  2066  0048  178B               	bsf	11,7	;volatile
  2067                           
  2068                           ;main.c: 180: (INTCONbits.PEIE = 1);
  2069  0049  170B               	bsf	11,6	;volatile
  2070                           
  2071                           ;main.c: 182: do { LATAbits.LATA4 = 1; } while(0);
  2072  004A  0022               	movlb	2	; select bank2
  2073  004B  160C               	bsf	12,4	;volatile
  2074                           
  2075                           ;main.c: 184: int err = 0;
  2076  004C  0021               	movlb	1	; select bank1
  2077  004D  01E6               	clrf	main@err^(0+128)
  2078  004E  01E7               	clrf	(main@err+1)^(0+128)
  2079                           
  2080                           ;main.c: 187: err = strcmp(read_line(), "CMD");
  2081  004F  309B               	movlw	low (STR_1| (0+32768))
  2082  0050  00F5               	movwf	strcmp@s2
  2083  0051  3083               	movlw	high (STR_1| (0+32768))
  2084  0052  00F6               	movwf	strcmp@s2+1
  2085  0053  3184  24B8  3180   	fcall	_read_line
  2086  0056  3185  25BE  3180   	fcall	_strcmp
  2087  0059  0876               	movf	?_strcmp+1,w
  2088  005A  0021               	movlb	1	; select bank1
  2089  005B  00E7               	movwf	(main@err+1)^(0+128)
  2090  005C  0875               	movf	?_strcmp,w
  2091  005D  00E6               	movwf	main@err^(0+128)
  2092                           
  2093                           ;main.c: 188: if (err) blink_leds(1, 1);
  2094  005E  0866               	movf	main@err^(0+128),w
  2095  005F  0467               	iorwf	(main@err+1)^(0+128),w
  2096  0060  1903               	btfsc	3,2
  2097  0061  286D               	goto	l1842
  2098  0062  3001               	movlw	1
  2099  0063  00F2               	movwf	blink_leds@n
  2100  0064  3000               	movlw	0
  2101  0065  00F3               	movwf	blink_leds@n+1
  2102  0066  3001               	movlw	1
  2103  0067  00F4               	movwf	blink_leds@c
  2104  0068  3000               	movlw	0
  2105  0069  00F5               	movwf	blink_leds@c+1
  2106  006A  3184  2460  3180   	fcall	_blink_leds
  2107  006D                     l1842:	
  2108                           
  2109                           ;main.c: 191: err = write_and_wait("SF,1", "AOK");
  2110  006D  3092               	movlw	low (STR_2| (0+32768))
  2111  006E  0020               	movlb	0	; select bank0
  2112  006F  00E2               	movwf	write_and_wait@cmd
  2113  0070  3083               	movlw	high (STR_2| (0+32768))
  2114  0071  00E3               	movwf	write_and_wait@cmd+1
  2115  0072  30A3               	movlw	low (STR_3| (0+32768))
  2116  0073  00E4               	movwf	write_and_wait@res
  2117  0074  3083               	movlw	high (STR_3| (0+32768))
  2118  0075  00E5               	movwf	write_and_wait@res+1
  2119  0076  3186  2691  3180   	fcall	_write_and_wait
  2120  0079  0020               	movlb	0	; select bank0
  2121  007A  0863               	movf	?_write_and_wait+1,w
  2122  007B  0021               	movlb	1	; select bank1
  2123  007C  00E7               	movwf	(main@err+1)^(0+128)
  2124  007D  0020               	movlb	0	; select bank0
  2125  007E  0862               	movf	?_write_and_wait,w
  2126  007F  0021               	movlb	1	; select bank1
  2127  0080  00E6               	movwf	main@err^(0+128)
  2128                           
  2129                           ;main.c: 192: if (err) blink_leds(1, 2);
  2130  0081  0866               	movf	main@err^(0+128),w
  2131  0082  0467               	iorwf	(main@err+1)^(0+128),w
  2132  0083  1903               	btfsc	3,2
  2133  0084  2890               	goto	l1848
  2134  0085  3001               	movlw	1
  2135  0086  00F2               	movwf	blink_leds@n
  2136  0087  3000               	movlw	0
  2137  0088  00F3               	movwf	blink_leds@n+1
  2138  0089  3002               	movlw	2
  2139  008A  00F4               	movwf	blink_leds@c
  2140  008B  3000               	movlw	0
  2141  008C  00F5               	movwf	blink_leds@c+1
  2142  008D  3184  2460  3180   	fcall	_blink_leds
  2143  0090                     l1848:	
  2144                           
  2145                           ;main.c: 196: err = write_and_wait("SS,C0000001", "AOK");
  2146  0090  3073               	movlw	low (STR_4| (0+32768))
  2147  0091  0020               	movlb	0	; select bank0
  2148  0092  00E2               	movwf	write_and_wait@cmd
  2149  0093  3083               	movlw	high (STR_4| (0+32768))
  2150  0094  00E3               	movwf	write_and_wait@cmd+1
  2151  0095  30A3               	movlw	low (STR_3| (0+32768))
  2152  0096  00E4               	movwf	write_and_wait@res
  2153  0097  3083               	movlw	high (STR_3| (0+32768))
  2154  0098  00E5               	movwf	write_and_wait@res+1
  2155  0099  3186  2691  3180   	fcall	_write_and_wait
  2156  009C  0020               	movlb	0	; select bank0
  2157  009D  0863               	movf	?_write_and_wait+1,w
  2158  009E  0021               	movlb	1	; select bank1
  2159  009F  00E7               	movwf	(main@err+1)^(0+128)
  2160  00A0  0020               	movlb	0	; select bank0
  2161  00A1  0862               	movf	?_write_and_wait,w
  2162  00A2  0021               	movlb	1	; select bank1
  2163  00A3  00E6               	movwf	main@err^(0+128)
  2164                           
  2165                           ;main.c: 197: if (err) blink_leds(1, 4);
  2166  00A4  0866               	movf	main@err^(0+128),w
  2167  00A5  0467               	iorwf	(main@err+1)^(0+128),w
  2168  00A6  1903               	btfsc	3,2
  2169  00A7  28B3               	goto	l1854
  2170  00A8  3001               	movlw	1
  2171  00A9  00F2               	movwf	blink_leds@n
  2172  00AA  3000               	movlw	0
  2173  00AB  00F3               	movwf	blink_leds@n+1
  2174  00AC  3004               	movlw	4
  2175  00AD  00F4               	movwf	blink_leds@c
  2176  00AE  3000               	movlw	0
  2177  00AF  00F5               	movwf	blink_leds@c+1
  2178  00B0  3184  2460  3180   	fcall	_blink_leds
  2179  00B3                     l1854:	
  2180                           
  2181                           ;main.c: 200: err = write_and_wait("SR,00000000", "AOK");
  2182  00B3  305B               	movlw	low (STR_6| (0+32768))
  2183  00B4  0020               	movlb	0	; select bank0
  2184  00B5  00E2               	movwf	write_and_wait@cmd
  2185  00B6  3083               	movlw	high (STR_6| (0+32768))
  2186  00B7  00E3               	movwf	write_and_wait@cmd+1
  2187  00B8  30A3               	movlw	low (STR_3| (0+32768))
  2188  00B9  00E4               	movwf	write_and_wait@res
  2189  00BA  3083               	movlw	high (STR_3| (0+32768))
  2190  00BB  00E5               	movwf	write_and_wait@res+1
  2191  00BC  3186  2691  3180   	fcall	_write_and_wait
  2192  00BF  0020               	movlb	0	; select bank0
  2193  00C0  0863               	movf	?_write_and_wait+1,w
  2194  00C1  0021               	movlb	1	; select bank1
  2195  00C2  00E7               	movwf	(main@err+1)^(0+128)
  2196  00C3  0020               	movlb	0	; select bank0
  2197  00C4  0862               	movf	?_write_and_wait,w
  2198  00C5  0021               	movlb	1	; select bank1
  2199  00C6  00E6               	movwf	main@err^(0+128)
  2200                           
  2201                           ;main.c: 201: if (err) blink_leds(2, 1);
  2202  00C7  0866               	movf	main@err^(0+128),w
  2203  00C8  0467               	iorwf	(main@err+1)^(0+128),w
  2204  00C9  1903               	btfsc	3,2
  2205  00CA  28D6               	goto	l1860
  2206  00CB  3002               	movlw	2
  2207  00CC  00F2               	movwf	blink_leds@n
  2208  00CD  3000               	movlw	0
  2209  00CE  00F3               	movwf	blink_leds@n+1
  2210  00CF  3001               	movlw	1
  2211  00D0  00F4               	movwf	blink_leds@c
  2212  00D1  3000               	movlw	0
  2213  00D2  00F5               	movwf	blink_leds@c+1
  2214  00D3  3184  2460  3180   	fcall	_blink_leds
  2215  00D6                     l1860:	
  2216                           
  2217                           ;main.c: 204: err = write_and_wait("S-,PIC16-BLE2-001", "AOK");
  2218  00D6  3038               	movlw	low (STR_8| (0+32768))
  2219  00D7  0020               	movlb	0	; select bank0
  2220  00D8  00E2               	movwf	write_and_wait@cmd
  2221  00D9  3083               	movlw	high (STR_8| (0+32768))
  2222  00DA  00E3               	movwf	write_and_wait@cmd+1
  2223  00DB  30A3               	movlw	low (STR_3| (0+32768))
  2224  00DC  00E4               	movwf	write_and_wait@res
  2225  00DD  3083               	movlw	high (STR_3| (0+32768))
  2226  00DE  00E5               	movwf	write_and_wait@res+1
  2227  00DF  3186  2691  3180   	fcall	_write_and_wait
  2228  00E2  0020               	movlb	0	; select bank0
  2229  00E3  0863               	movf	?_write_and_wait+1,w
  2230  00E4  0021               	movlb	1	; select bank1
  2231  00E5  00E7               	movwf	(main@err+1)^(0+128)
  2232  00E6  0020               	movlb	0	; select bank0
  2233  00E7  0862               	movf	?_write_and_wait,w
  2234  00E8  0021               	movlb	1	; select bank1
  2235  00E9  00E6               	movwf	main@err^(0+128)
  2236                           
  2237                           ;main.c: 205: if (err) blink_leds(2, 2);
  2238  00EA  0866               	movf	main@err^(0+128),w
  2239  00EB  0467               	iorwf	(main@err+1)^(0+128),w
  2240  00EC  1903               	btfsc	3,2
  2241  00ED  28F9               	goto	l1866
  2242  00EE  3002               	movlw	2
  2243  00EF  00F2               	movwf	blink_leds@n
  2244  00F0  3000               	movlw	0
  2245  00F1  00F3               	movwf	blink_leds@n+1
  2246  00F2  3002               	movlw	2
  2247  00F3  00F4               	movwf	blink_leds@c
  2248  00F4  3000               	movlw	0
  2249  00F5  00F5               	movwf	blink_leds@c+1
  2250  00F6  3184  2460  3180   	fcall	_blink_leds
  2251  00F9                     l1866:	
  2252                           
  2253                           ;main.c: 208: err = write_and_wait("PZ", "AOK");
  2254  00F9  30AA               	movlw	low (STR_10| (0+32768))
  2255  00FA  0020               	movlb	0	; select bank0
  2256  00FB  00E2               	movwf	write_and_wait@cmd
  2257  00FC  3083               	movlw	high (STR_10| (0+32768))
  2258  00FD  00E3               	movwf	write_and_wait@cmd+1
  2259  00FE  30A3               	movlw	low (STR_3| (0+32768))
  2260  00FF  00E4               	movwf	write_and_wait@res
  2261  0100  3083               	movlw	high (STR_3| (0+32768))
  2262  0101  00E5               	movwf	write_and_wait@res+1
  2263  0102  3186  2691  3180   	fcall	_write_and_wait
  2264  0105  0020               	movlb	0	; select bank0
  2265  0106  0863               	movf	?_write_and_wait+1,w
  2266  0107  0021               	movlb	1	; select bank1
  2267  0108  00E7               	movwf	(main@err+1)^(0+128)
  2268  0109  0020               	movlb	0	; select bank0
  2269  010A  0862               	movf	?_write_and_wait,w
  2270  010B  0021               	movlb	1	; select bank1
  2271  010C  00E6               	movwf	main@err^(0+128)
  2272                           
  2273                           ;main.c: 209: if (err) blink_leds(2, 6);
  2274  010D  0866               	movf	main@err^(0+128),w
  2275  010E  0467               	iorwf	(main@err+1)^(0+128),w
  2276  010F  1903               	btfsc	3,2
  2277  0110  291C               	goto	l1872
  2278  0111  3002               	movlw	2
  2279  0112  00F2               	movwf	blink_leds@n
  2280  0113  3000               	movlw	0
  2281  0114  00F3               	movwf	blink_leds@n+1
  2282  0115  3006               	movlw	6
  2283  0116  00F4               	movwf	blink_leds@c
  2284  0117  3000               	movlw	0
  2285  0118  00F5               	movwf	blink_leds@c+1
  2286  0119  3184  2460  3180   	fcall	_blink_leds
  2287  011C                     l1872:	
  2288                           
  2289                           ;main.c: 212: err = write_and_wait("PS,11223344556677889900AABBCCDDEEFF", "AOK");
  2290  011C  3014               	movlw	low (STR_12| (0+32768))
  2291  011D  0020               	movlb	0	; select bank0
  2292  011E  00E2               	movwf	write_and_wait@cmd
  2293  011F  3083               	movlw	high (STR_12| (0+32768))
  2294  0120  00E3               	movwf	write_and_wait@cmd+1
  2295  0121  30A3               	movlw	low (STR_3| (0+32768))
  2296  0122  00E4               	movwf	write_and_wait@res
  2297  0123  3083               	movlw	high (STR_3| (0+32768))
  2298  0124  00E5               	movwf	write_and_wait@res+1
  2299  0125  3186  2691  3180   	fcall	_write_and_wait
  2300  0128  0020               	movlb	0	; select bank0
  2301  0129  0863               	movf	?_write_and_wait+1,w
  2302  012A  0021               	movlb	1	; select bank1
  2303  012B  00E7               	movwf	(main@err+1)^(0+128)
  2304  012C  0020               	movlb	0	; select bank0
  2305  012D  0862               	movf	?_write_and_wait,w
  2306  012E  0021               	movlb	1	; select bank1
  2307  012F  00E6               	movwf	main@err^(0+128)
  2308                           
  2309                           ;main.c: 213: if (err) blink_leds(2, 7);
  2310  0130  0866               	movf	main@err^(0+128),w
  2311  0131  0467               	iorwf	(main@err+1)^(0+128),w
  2312  0132  1903               	btfsc	3,2
  2313  0133  293F               	goto	l1878
  2314  0134  3002               	movlw	2
  2315  0135  00F2               	movwf	blink_leds@n
  2316  0136  3000               	movlw	0
  2317  0137  00F3               	movwf	blink_leds@n+1
  2318  0138  3007               	movlw	7
  2319  0139  00F4               	movwf	blink_leds@c
  2320  013A  3000               	movlw	0
  2321  013B  00F5               	movwf	blink_leds@c+1
  2322  013C  3184  2460  3180   	fcall	_blink_leds
  2323  013F                     l1878:	
  2324                           
  2325                           ;main.c: 216: err = write_and_wait("PC,010203040506070809000A0B0C0D0E0F,02,05", "AOK");
  2326  013F  30EA               	movlw	low (STR_14| (0+32768))
  2327  0140  0020               	movlb	0	; select bank0
  2328  0141  00E2               	movwf	write_and_wait@cmd
  2329  0142  3082               	movlw	high (STR_14| (0+32768))
  2330  0143  00E3               	movwf	write_and_wait@cmd+1
  2331  0144  30A3               	movlw	low (STR_3| (0+32768))
  2332  0145  00E4               	movwf	write_and_wait@res
  2333  0146  3083               	movlw	high (STR_3| (0+32768))
  2334  0147  00E5               	movwf	write_and_wait@res+1
  2335  0148  3186  2691  3180   	fcall	_write_and_wait
  2336  014B  0020               	movlb	0	; select bank0
  2337  014C  0863               	movf	?_write_and_wait+1,w
  2338  014D  0021               	movlb	1	; select bank1
  2339  014E  00E7               	movwf	(main@err+1)^(0+128)
  2340  014F  0020               	movlb	0	; select bank0
  2341  0150  0862               	movf	?_write_and_wait,w
  2342  0151  0021               	movlb	1	; select bank1
  2343  0152  00E6               	movwf	main@err^(0+128)
  2344                           
  2345                           ;main.c: 217: if (err) blink_leds(2, 8);
  2346  0153  0866               	movf	main@err^(0+128),w
  2347  0154  0467               	iorwf	(main@err+1)^(0+128),w
  2348  0155  1903               	btfsc	3,2
  2349  0156  2962               	goto	l1884
  2350  0157  3002               	movlw	2
  2351  0158  00F2               	movwf	blink_leds@n
  2352  0159  3000               	movlw	0
  2353  015A  00F3               	movwf	blink_leds@n+1
  2354  015B  3008               	movlw	8
  2355  015C  00F4               	movwf	blink_leds@c
  2356  015D  3000               	movlw	0
  2357  015E  00F5               	movwf	blink_leds@c+1
  2358  015F  3184  2460  3180   	fcall	_blink_leds
  2359  0162                     l1884:	
  2360                           
  2361                           ;main.c: 220: err = write_and_wait("PC,FF0203040506070809000A0B0C0D0E0F,1A,03", "AOK");
  2362  0162  30C0               	movlw	low (STR_16| (0+32768))
  2363  0163  0020               	movlb	0	; select bank0
  2364  0164  00E2               	movwf	write_and_wait@cmd
  2365  0165  3082               	movlw	high (STR_16| (0+32768))
  2366  0166  00E3               	movwf	write_and_wait@cmd+1
  2367  0167  30A3               	movlw	low (STR_3| (0+32768))
  2368  0168  00E4               	movwf	write_and_wait@res
  2369  0169  3083               	movlw	high (STR_3| (0+32768))
  2370  016A  00E5               	movwf	write_and_wait@res+1
  2371  016B  3186  2691  3180   	fcall	_write_and_wait
  2372  016E  0020               	movlb	0	; select bank0
  2373  016F  0863               	movf	?_write_and_wait+1,w
  2374  0170  0021               	movlb	1	; select bank1
  2375  0171  00E7               	movwf	(main@err+1)^(0+128)
  2376  0172  0020               	movlb	0	; select bank0
  2377  0173  0862               	movf	?_write_and_wait,w
  2378  0174  0021               	movlb	1	; select bank1
  2379  0175  00E6               	movwf	main@err^(0+128)
  2380                           
  2381                           ;main.c: 221: if (err) blink_leds(2, 9);
  2382  0176  0866               	movf	main@err^(0+128),w
  2383  0177  0467               	iorwf	(main@err+1)^(0+128),w
  2384  0178  1903               	btfsc	3,2
  2385  0179  2985               	goto	l1890
  2386  017A  3002               	movlw	2
  2387  017B  00F2               	movwf	blink_leds@n
  2388  017C  3000               	movlw	0
  2389  017D  00F3               	movwf	blink_leds@n+1
  2390  017E  3009               	movlw	9
  2391  017F  00F4               	movwf	blink_leds@c
  2392  0180  3000               	movlw	0
  2393  0181  00F5               	movwf	blink_leds@c+1
  2394  0182  3184  2460  3180   	fcall	_blink_leds
  2395  0185                     l1890:	
  2396                           
  2397                           ;main.c: 224: err = write_and_wait("R,1", "Reboot");
  2398  0185  3097               	movlw	low (STR_18| (0+32768))
  2399  0186  0020               	movlb	0	; select bank0
  2400  0187  00E2               	movwf	write_and_wait@cmd
  2401  0188  3083               	movlw	high (STR_18| (0+32768))
  2402  0189  00E3               	movwf	write_and_wait@cmd+1
  2403  018A  308B               	movlw	low (STR_19| (0+32768))
  2404  018B  00E4               	movwf	write_and_wait@res
  2405  018C  3083               	movlw	high (STR_19| (0+32768))
  2406  018D  00E5               	movwf	write_and_wait@res+1
  2407  018E  3186  2691  3180   	fcall	_write_and_wait
  2408  0191  0020               	movlb	0	; select bank0
  2409  0192  0863               	movf	?_write_and_wait+1,w
  2410  0193  0021               	movlb	1	; select bank1
  2411  0194  00E7               	movwf	(main@err+1)^(0+128)
  2412  0195  0020               	movlb	0	; select bank0
  2413  0196  0862               	movf	?_write_and_wait,w
  2414  0197  0021               	movlb	1	; select bank1
  2415  0198  00E6               	movwf	main@err^(0+128)
  2416                           
  2417                           ;main.c: 225: if (err) blink_leds(2, 3);
  2418  0199  0866               	movf	main@err^(0+128),w
  2419  019A  0467               	iorwf	(main@err+1)^(0+128),w
  2420  019B  1903               	btfsc	3,2
  2421  019C  29A8               	goto	l1896
  2422  019D  3002               	movlw	2
  2423  019E  00F2               	movwf	blink_leds@n
  2424  019F  3000               	movlw	0
  2425  01A0  00F3               	movwf	blink_leds@n+1
  2426  01A1  3003               	movlw	3
  2427  01A2  00F4               	movwf	blink_leds@c
  2428  01A3  3000               	movlw	0
  2429  01A4  00F5               	movwf	blink_leds@c+1
  2430  01A5  3184  2460  3180   	fcall	_blink_leds
  2431  01A8                     l1896:	
  2432                           
  2433                           ;main.c: 228: err = strcmp(read_line(), "CMD");
  2434  01A8  309B               	movlw	low (STR_1| (0+32768))
  2435  01A9  00F5               	movwf	strcmp@s2
  2436  01AA  3083               	movlw	high (STR_1| (0+32768))
  2437  01AB  00F6               	movwf	strcmp@s2+1
  2438  01AC  3184  24B8  3180   	fcall	_read_line
  2439  01AF  3185  25BE  3180   	fcall	_strcmp
  2440  01B2  0876               	movf	?_strcmp+1,w
  2441  01B3  0021               	movlb	1	; select bank1
  2442  01B4  00E7               	movwf	(main@err+1)^(0+128)
  2443  01B5  0875               	movf	?_strcmp,w
  2444  01B6  00E6               	movwf	main@err^(0+128)
  2445                           
  2446                           ;main.c: 229: if (err) blink_leds(2, 4);
  2447  01B7  0866               	movf	main@err^(0+128),w
  2448  01B8  0467               	iorwf	(main@err+1)^(0+128),w
  2449  01B9  1903               	btfsc	3,2
  2450  01BA  29C6               	goto	l1902
  2451  01BB  3002               	movlw	2
  2452  01BC  00F2               	movwf	blink_leds@n
  2453  01BD  3000               	movlw	0
  2454  01BE  00F3               	movwf	blink_leds@n+1
  2455  01BF  3004               	movlw	4
  2456  01C0  00F4               	movwf	blink_leds@c
  2457  01C1  3000               	movlw	0
  2458  01C2  00F5               	movwf	blink_leds@c+1
  2459  01C3  3184  2460  3180   	fcall	_blink_leds
  2460  01C6                     l1902:	
  2461                           
  2462                           ;main.c: 232: err = write_and_wait("SUW,2A19,32", "AOK");
  2463  01C6  307F               	movlw	low (STR_21| (0+32768))
  2464  01C7  0020               	movlb	0	; select bank0
  2465  01C8  00E2               	movwf	write_and_wait@cmd
  2466  01C9  3083               	movlw	high (STR_21| (0+32768))
  2467  01CA  00E3               	movwf	write_and_wait@cmd+1
  2468  01CB  30A3               	movlw	low (STR_3| (0+32768))
  2469  01CC  00E4               	movwf	write_and_wait@res
  2470  01CD  3083               	movlw	high (STR_3| (0+32768))
  2471  01CE  00E5               	movwf	write_and_wait@res+1
  2472  01CF  3186  2691  3180   	fcall	_write_and_wait
  2473  01D2  0020               	movlb	0	; select bank0
  2474  01D3  0863               	movf	?_write_and_wait+1,w
  2475  01D4  0021               	movlb	1	; select bank1
  2476  01D5  00E7               	movwf	(main@err+1)^(0+128)
  2477  01D6  0020               	movlb	0	; select bank0
  2478  01D7  0862               	movf	?_write_and_wait,w
  2479  01D8  0021               	movlb	1	; select bank1
  2480  01D9  00E6               	movwf	main@err^(0+128)
  2481                           
  2482                           ;main.c: 233: if (err) blink_leds(2, 5);
  2483  01DA  0866               	movf	main@err^(0+128),w
  2484  01DB  0467               	iorwf	(main@err+1)^(0+128),w
  2485  01DC  1903               	btfsc	3,2
  2486  01DD  29E9               	goto	l1908
  2487  01DE  3002               	movlw	2
  2488  01DF  00F2               	movwf	blink_leds@n
  2489  01E0  3000               	movlw	0
  2490  01E1  00F3               	movwf	blink_leds@n+1
  2491  01E2  3005               	movlw	5
  2492  01E3  00F4               	movwf	blink_leds@c
  2493  01E4  3000               	movlw	0
  2494  01E5  00F5               	movwf	blink_leds@c+1
  2495  01E6  3184  2460  3180   	fcall	_blink_leds
  2496  01E9                     l1908:	
  2497                           
  2498                           ;main.c: 236: err = write_and_wait("SUW,010203040506070809000A0B0C0D0E0F,AABBCCDDEE", "A
      +                          OK");
  2499  01E9  3090               	movlw	low (STR_23| (0+32768))
  2500  01EA  0020               	movlb	0	; select bank0
  2501  01EB  00E2               	movwf	write_and_wait@cmd
  2502  01EC  3082               	movlw	high (STR_23| (0+32768))
  2503  01ED  00E3               	movwf	write_and_wait@cmd+1
  2504  01EE  30A3               	movlw	low (STR_3| (0+32768))
  2505  01EF  00E4               	movwf	write_and_wait@res
  2506  01F0  3083               	movlw	high (STR_3| (0+32768))
  2507  01F1  00E5               	movwf	write_and_wait@res+1
  2508  01F2  3186  2691  3180   	fcall	_write_and_wait
  2509  01F5  0020               	movlb	0	; select bank0
  2510  01F6  0863               	movf	?_write_and_wait+1,w
  2511  01F7  0021               	movlb	1	; select bank1
  2512  01F8  00E7               	movwf	(main@err+1)^(0+128)
  2513  01F9  0020               	movlb	0	; select bank0
  2514  01FA  0862               	movf	?_write_and_wait,w
  2515  01FB  0021               	movlb	1	; select bank1
  2516  01FC  00E6               	movwf	main@err^(0+128)
  2517                           
  2518                           ;main.c: 237: if (err) blink_leds(2, 10);
  2519  01FD  0866               	movf	main@err^(0+128),w
  2520  01FE  0467               	iorwf	(main@err+1)^(0+128),w
  2521  01FF  1903               	btfsc	3,2
  2522  0200  2A0C               	goto	l1914
  2523  0201  3002               	movlw	2
  2524  0202  00F2               	movwf	blink_leds@n
  2525  0203  3000               	movlw	0
  2526  0204  00F3               	movwf	blink_leds@n+1
  2527  0205  300A               	movlw	10
  2528  0206  00F4               	movwf	blink_leds@c
  2529  0207  3000               	movlw	0
  2530  0208  00F5               	movwf	blink_leds@c+1
  2531  0209  3184  2460  3180   	fcall	_blink_leds
  2532  020C                     l1914:	
  2533                           
  2534                           ;main.c: 253: int c = 0;
  2535  020C  0021               	movlb	1	; select bank1
  2536  020D  01E4               	clrf	main@c^(0+128)
  2537  020E  01E5               	clrf	(main@c+1)^(0+128)
  2538  020F                     l1916:	
  2539                           ;main.c: 254: while(1) {
  2540                           
  2541                           
  2542                           ;main.c: 256: c++;
  2543  020F  3001               	movlw	1
  2544  0210  07E4               	addwf	main@c^(0+128),f
  2545  0211  3000               	movlw	0
  2546  0212  3DE5               	addwfc	(main@c+1)^(0+128),f
  2547                           
  2548                           ;main.c: 257: if (c%5==0) {
  2549  0213  3005               	movlw	5
  2550  0214  00F2               	movwf	___awmod@divisor
  2551  0215  3000               	movlw	0
  2552  0216  00F3               	movwf	___awmod@divisor+1
  2553  0217  0865               	movf	(main@c+1)^(0+128),w
  2554  0218  00F5               	movwf	___awmod@dividend+1
  2555  0219  0864               	movf	main@c^(0+128),w
  2556  021A  00F4               	movwf	___awmod@dividend
  2557  021B  3185  2505  3180   	fcall	___awmod
  2558  021E  0872               	movf	?___awmod,w
  2559  021F  0473               	iorwf	?___awmod+1,w
  2560  0220  1D03               	btfss	3,2
  2561  0221  2A3D               	goto	l1926
  2562                           
  2563                           ;main.c: 258: err = write_line("A,0050,07D0");
  2564  0222  3067               	movlw	low (STR_25| (0+32768))
  2565  0223  00F6               	movwf	write_line@line
  2566  0224  3083               	movlw	high (STR_25| (0+32768))
  2567  0225  00F7               	movwf	write_line@line+1
  2568  0226  3185  25E5  3180   	fcall	_write_line
  2569  0229  0877               	movf	?_write_line+1,w
  2570  022A  0021               	movlb	1	; select bank1
  2571  022B  00E7               	movwf	(main@err+1)^(0+128)
  2572  022C  0876               	movf	?_write_line,w
  2573  022D  00E6               	movwf	main@err^(0+128)
  2574                           
  2575                           ;main.c: 259: if (err) blink_leds(2, 14);
  2576  022E  0866               	movf	main@err^(0+128),w
  2577  022F  0467               	iorwf	(main@err+1)^(0+128),w
  2578  0230  1903               	btfsc	3,2
  2579  0231  2A3D               	goto	l1926
  2580  0232  3002               	movlw	2
  2581  0233  00F2               	movwf	blink_leds@n
  2582  0234  3000               	movlw	0
  2583  0235  00F3               	movwf	blink_leds@n+1
  2584  0236  300E               	movlw	14
  2585  0237  00F4               	movwf	blink_leds@c
  2586  0238  3000               	movlw	0
  2587  0239  00F5               	movwf	blink_leds@c+1
  2588  023A  3184  2460  3180   	fcall	_blink_leds
  2589  023D                     l1926:	
  2590                           
  2591                           ;main.c: 260: }
  2592                           ;main.c: 262: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2593  023D  300B               	movlw	11
  2594  023E  0020               	movlb	0	; select bank0
  2595  023F  00E9               	movwf	??_main+1
  2596  0240  3026               	movlw	38
  2597  0241  00E8               	movwf	??_main
  2598  0242  305D               	movlw	93
  2599  0243                     u1927:	
  2600  0243  0B89               	decfsz	9,f
  2601  0244  2A43               	goto	u1927
  2602  0245  0BE8               	decfsz	??_main,f
  2603  0246  2A43               	goto	u1927
  2604  0247  0BE9               	decfsz	??_main+1,f
  2605  0248  2A43               	goto	u1927
  2606  0249  3200               	nop2
  2607                           
  2608                           ;main.c: 263: adcResult = ADC_GetConversion(0x4);
  2609  024A  3004               	movlw	4
  2610  024B  3186  26FF  3180   	fcall	_ADC_GetConversion
  2611  024E  0873               	movf	?_ADC_GetConversion+1,w
  2612  024F  0021               	movlb	1	; select bank1
  2613  0250  00E9               	movwf	(_adcResult+1)^(0+128)
  2614  0251  0872               	movf	?_ADC_GetConversion,w
  2615  0252  00E8               	movwf	_adcResult^(0+128)
  2616                           
  2617                           ;main.c: 264: char result[4];
  2618                           ;main.c: 265: char command[64]="SUW,010203040506070809000A0B0C0D0E0F,";
  2619  0253  3020               	movlw	low main@F4456
  2620  0254  0086               	movwf	6
  2621  0255  3001               	movlw	high main@F4456
  2622  0256  0087               	movwf	7
  2623  0257  30A0               	movlw	low main@command
  2624  0258  0084               	movwf	4
  2625  0259  3000               	movlw	high main@command
  2626  025A  0085               	movwf	5
  2627  025B  3040               	movlw	64
  2628  025C  0020               	movlb	0	; select bank0
  2629  025D  00E8               	movwf	??_main
  2630  025E                     u1900:	
  2631  025E  0016               	moviw fsr1++
  2632  025F  001A               	movwi fsr0++
  2633  0260  0BE8               	decfsz	??_main,f
  2634  0261  2A5E               	goto	u1900
  2635                           
  2636                           ;main.c: 267: sprintf(result, "%X", adcResult);
  2637  0262  30A7               	movlw	low (STR_26| (0+32768))
  2638  0263  00A0               	movwf	sprintf@f
  2639  0264  3083               	movlw	high (STR_26| (0+32768))
  2640  0265  00A1               	movwf	sprintf@f+1
  2641  0266  0021               	movlb	1	; select bank1
  2642  0267  0869               	movf	(_adcResult+1)^(0+128),w
  2643  0268  0020               	movlb	0	; select bank0
  2644  0269  00A3               	movwf	?_sprintf+3
  2645  026A  0021               	movlb	1	; select bank1
  2646  026B  0868               	movf	_adcResult^(0+128),w
  2647  026C  0020               	movlb	0	; select bank0
  2648  026D  00A2               	movwf	?_sprintf+2
  2649  026E  30E0               	movlw	(low (main@result| 0))& (0+255)
  2650  026F  3183  23AD  3180   	fcall	_sprintf
  2651                           
  2652                           ;main.c: 268: err=write_line(strcat(command,result));
  2653  0272  30E0               	movlw	(low (main@result| 0))& (0+255)
  2654  0273  0020               	movlb	0	; select bank0
  2655  0274  00E8               	movwf	??_main
  2656  0275  0868               	movf	??_main,w
  2657  0276  00F2               	movwf	strcat@from
  2658  0277  30A0               	movlw	(low (main@command| 0))& (0+255)
  2659  0278  3186  260B  3180   	fcall	_strcat
  2660  027B  00F6               	movwf	write_line@line
  2661  027C  3000               	movlw	0
  2662  027D  00F7               	movwf	write_line@line+1
  2663  027E  3185  25E5  3180   	fcall	_write_line
  2664  0281  0877               	movf	?_write_line+1,w
  2665  0282  0021               	movlb	1	; select bank1
  2666  0283  00E7               	movwf	(main@err+1)^(0+128)
  2667  0284  0876               	movf	?_write_line,w
  2668  0285  00E6               	movwf	main@err^(0+128)
  2669  0286  2A0F               	goto	l1916
  2670  0287                     l339:	
  2671                           ;main.c: 279: while(1);
  2672                           
  2673                           ;main.c: 276: if (err) blink_leds(3,9);
  2674                           
  2675                           ;main.c: 275: err = strcmp(read_line(), "END");
  2676                           
  2677                           ;main.c: 269: }
  2678                           ;main.c: 272: do { LATAbits.LATA4 = 0; } while(0);
  2679                           
  2680  0287  2A87               	goto	l339
  2681  0288                     __end_of_main:	
  2682                           
  2683                           	psect	text1
  2684  0691                     __ptext1:	
  2685 ;; *************** function _write_and_wait *****************
  2686 ;; Defined at:
  2687 ;;		line 167 in file "main.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;  cmd             2   66[BANK0 ] PTR unsigned char 
  2690 ;;		 -> STR_23(48), STR_21(12), STR_18(4), STR_16(42), 
  2691 ;;		 -> STR_14(42), STR_12(36), STR_10(3), STR_8(18), 
  2692 ;;		 -> STR_6(12), STR_4(12), STR_2(5), 
  2693 ;;  res             2   68[BANK0 ] PTR unsigned char 
  2694 ;;		 -> STR_24(4), STR_22(4), STR_19(7), STR_17(4), 
  2695 ;;		 -> STR_15(4), STR_13(4), STR_11(4), STR_9(4), 
  2696 ;;		 -> STR_7(4), STR_5(4), STR_3(4), 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  line            1   71[BANK0 ] PTR unsigned char 
  2699 ;;		 -> read_line@c(64), 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  2   66[BANK0 ] int 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2709 ;;      Params:         0       4       0       0
  2710 ;;      Locals:         0       1       0       0
  2711 ;;      Temps:          0       1       0       0
  2712 ;;      Totals:         0       6       0       0
  2713 ;;Total ram usage:        6 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    4
  2716 ;; This function calls:
  2717 ;;		_read_line
  2718 ;;		_strcmp
  2719 ;;		_write_line
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           
  2726                           ;psect for function _write_and_wait
  2727  0691                     _write_and_wait:	
  2728                           
  2729                           ;main.c: 168: write_line(cmd);
  2730                           
  2731                           ;incstack = 0
  2732                           ; Regs used in _write_and_wait: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2733  0691  0020               	movlb	0	; select bank0
  2734  0692  0863               	movf	write_and_wait@cmd+1,w
  2735  0693  00F7               	movwf	write_line@line+1
  2736  0694  0862               	movf	write_and_wait@cmd,w
  2737  0695  00F6               	movwf	write_line@line
  2738  0696  3185  25E5  3186   	fcall	_write_line
  2739                           
  2740                           ;main.c: 169: char * line = read_line();
  2741  0699  3184  24B8  3186   	fcall	_read_line
  2742  069C  0020               	movlb	0	; select bank0
  2743  069D  00E6               	movwf	??_write_and_wait
  2744  069E  0866               	movf	??_write_and_wait,w
  2745  069F  00E7               	movwf	write_and_wait@line
  2746                           
  2747                           ;main.c: 170: return strcmp(line, res);
  2748  06A0  0865               	movf	write_and_wait@res+1,w
  2749  06A1  00F6               	movwf	strcmp@s2+1
  2750  06A2  0864               	movf	write_and_wait@res,w
  2751  06A3  00F5               	movwf	strcmp@s2
  2752  06A4  0867               	movf	write_and_wait@line,w
  2753  06A5  3185  25BE         	fcall	_strcmp
  2754  06A7  0876               	movf	?_strcmp+1,w
  2755  06A8  0020               	movlb	0	; select bank0
  2756  06A9  00E3               	movwf	?_write_and_wait+1
  2757  06AA  0875               	movf	?_strcmp,w
  2758  06AB  00E2               	movwf	?_write_and_wait
  2759  06AC  0008               	return
  2760  06AD                     __end_of_write_and_wait:	
  2761                           
  2762                           	psect	text2
  2763  05E5                     __ptext2:	
  2764 ;; *************** function _write_line *****************
  2765 ;; Defined at:
  2766 ;;		line 153 in file "main.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  line            2    6[COMMON] PTR unsigned char 
  2769 ;;		 -> main@command(64), STR_25(12), STR_23(48), STR_21(12), 
  2770 ;;		 -> STR_18(4), STR_16(42), STR_14(42), STR_12(36), 
  2771 ;;		 -> STR_10(3), STR_8(18), STR_6(12), STR_4(12), 
  2772 ;;		 -> STR_2(5), 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  i               2    0[BANK0 ] int 
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  2    6[COMMON] int 
  2777 ;; Registers used:
  2778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2784 ;;      Params:         2       0       0       0
  2785 ;;      Locals:         0       2       0       0
  2786 ;;      Temps:          1       0       0       0
  2787 ;;      Totals:         3       2       0       0
  2788 ;;Total ram usage:        5 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    3
  2791 ;; This function calls:
  2792 ;;		_EUSART_Write
  2793 ;; This function is called by:
  2794 ;;		_write_and_wait
  2795 ;;		_main
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function _write_line
  2801  05E5                     _write_line:	
  2802                           
  2803                           ;main.c: 154: int i = 0;
  2804                           
  2805                           ;incstack = 0
  2806                           ; Regs used in _write_line: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2807  05E5  0020               	movlb	0	; select bank0
  2808  05E6  01A0               	clrf	write_line@i
  2809  05E7  01A1               	clrf	write_line@i+1
  2810  05E8                     l1810:	
  2811                           ;main.c: 155: while(line[i] != '\0') {
  2812                           
  2813  05E8  0876               	movf	write_line@line,w
  2814  05E9  0720               	addwf	write_line@i,w
  2815  05EA  0084               	movwf	4
  2816  05EB  0877               	movf	write_line@line+1,w
  2817  05EC  3D21               	addwfc	write_line@i+1,w
  2818  05ED  0085               	movwf	5
  2819  05EE  0012               	moviw fsr0++
  2820  05EF  1903               	btfsc	3,2
  2821  05F0  2E01               	goto	l1812
  2822                           
  2823                           ;main.c: 156: EUSART_Write(line[i++]);
  2824  05F1  0876               	movf	write_line@line,w
  2825  05F2  0720               	addwf	write_line@i,w
  2826  05F3  0084               	movwf	4
  2827  05F4  0877               	movf	write_line@line+1,w
  2828  05F5  3D21               	addwfc	write_line@i+1,w
  2829  05F6  0085               	movwf	5
  2830  05F7  0800               	movf	0,w	;code access
  2831  05F8  3186  2630  3185   	fcall	_EUSART_Write
  2832  05FB  3001               	movlw	1
  2833  05FC  0020               	movlb	0	; select bank0
  2834  05FD  07A0               	addwf	write_line@i,f
  2835  05FE  3000               	movlw	0
  2836  05FF  3DA1               	addwfc	write_line@i+1,f
  2837  0600  2DE8               	goto	l1810
  2838  0601                     l1812:	
  2839                           
  2840                           ;main.c: 157: }
  2841                           ;main.c: 158: EUSART_Write('\r');
  2842  0601  300D               	movlw	13
  2843  0602  3186  2630  3185   	fcall	_EUSART_Write
  2844                           
  2845                           ;main.c: 159: EUSART_Write('\n');
  2846  0605  300A               	movlw	10
  2847  0606  3186  2630         	fcall	_EUSART_Write
  2848                           
  2849                           ;main.c: 160: return (0);
  2850  0608  01F6               	clrf	?_write_line
  2851  0609  01F7               	clrf	?_write_line+1
  2852  060A  0008               	return
  2853  060B                     __end_of_write_line:	
  2854                           
  2855                           	psect	text3
  2856  0630                     __ptext3:	
  2857 ;; *************** function _EUSART_Write *****************
  2858 ;; Defined at:
  2859 ;;		line 132 in file "mcc_generated_files/eusart.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  txData          1    wreg     unsigned char 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  txData          1    3[COMMON] unsigned char 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2873 ;;      Params:         0       0       0       0
  2874 ;;      Locals:         1       0       0       0
  2875 ;;      Temps:          1       0       0       0
  2876 ;;      Totals:         2       0       0       0
  2877 ;;Total ram usage:        2 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    2
  2880 ;; This function calls:
  2881 ;;		Nothing
  2882 ;; This function is called by:
  2883 ;;		_write_line
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           
  2888                           ;psect for function _EUSART_Write
  2889  0630                     _EUSART_Write:	
  2890                           
  2891                           ;incstack = 0
  2892                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  2893                           ;EUSART_Write@txData stored from wreg
  2894  0630  00F3               	movwf	EUSART_Write@txData
  2895  0631                     l1788:	
  2896                           ;eusart.c: 135: {
  2897                           
  2898                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  2899                           
  2900  0631  0020               	movlb	0	; select bank0
  2901  0632  086D               	movf	_eusartTxBufferRemaining,w	;volatile
  2902  0633  1903               	btfsc	3,2
  2903  0634  2E31               	goto	l1788
  2904                           
  2905                           ;eusart.c: 136: }
  2906                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  2907  0635  0021               	movlb	1	; select bank1
  2908  0636  1A11               	btfsc	17,4	;volatile
  2909  0637  2E3C               	goto	l105
  2910                           
  2911                           ;eusart.c: 139: {
  2912                           ;eusart.c: 140: TXREG = txData;
  2913  0638  0873               	movf	EUSART_Write@txData,w
  2914  0639  0023               	movlb	3	; select bank3
  2915  063A  009A               	movwf	26	;volatile
  2916                           
  2917                           ;eusart.c: 141: }
  2918  063B  2E51               	goto	l1802
  2919  063C                     l105:	
  2920                           
  2921                           ;eusart.c: 142: else
  2922                           ;eusart.c: 143: {
  2923                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  2924  063C  1211               	bcf	17,4	;volatile
  2925                           
  2926                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  2927  063D  0873               	movf	EUSART_Write@txData,w
  2928  063E  00F2               	movwf	??_EUSART_Write
  2929  063F  087B               	movf	_eusartTxHead,w
  2930  0640  3E68               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  2931  0641  0086               	movwf	6
  2932  0642  3001               	movlw	1	; select bank2/3
  2933  0643  0087               	movwf	7
  2934  0644  0872               	movf	??_EUSART_Write,w
  2935  0645  0081               	movwf	1
  2936  0646  3001               	movlw	1
  2937  0647  00F2               	movwf	??_EUSART_Write
  2938  0648  0872               	movf	??_EUSART_Write,w
  2939  0649  07FB               	addwf	_eusartTxHead,f	;volatile
  2940                           
  2941                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2942  064A  3008               	movlw	8
  2943  064B  027B               	subwf	_eusartTxHead,w	;volatile
  2944  064C  1803               	btfsc	3,0
  2945                           
  2946                           ;eusart.c: 147: {
  2947                           ;eusart.c: 148: eusartTxHead = 0;
  2948  064D  01FB               	clrf	_eusartTxHead	;volatile
  2949                           
  2950                           ;eusart.c: 149: }
  2951                           ;eusart.c: 150: eusartTxBufferRemaining--;
  2952  064E  3001               	movlw	1
  2953  064F  0020               	movlb	0	; select bank0
  2954  0650  02ED               	subwf	_eusartTxBufferRemaining,f	;volatile
  2955  0651                     l1802:	
  2956                           
  2957                           ;eusart.c: 151: }
  2958                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  2959  0651  0021               	movlb	1	; select bank1
  2960  0652  1611               	bsf	17,4	;volatile
  2961  0653  0008               	return
  2962  0654                     __end_of_EUSART_Write:	
  2963                           
  2964                           	psect	text4
  2965  05BE                     __ptext4:	
  2966 ;; *************** function _strcmp *****************
  2967 ;; Defined at:
  2968 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcmp.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  s1              1    wreg     PTR const unsigned char 
  2971 ;;		 -> read_line@c(64), 
  2972 ;;  s2              2    5[COMMON] PTR const unsigned char 
  2973 ;;		 -> STR_27(4), STR_24(4), STR_22(4), STR_20(4), 
  2974 ;;		 -> STR_19(7), STR_17(4), STR_15(4), STR_13(4), 
  2975 ;;		 -> STR_11(4), STR_9(4), STR_7(4), STR_5(4), 
  2976 ;;		 -> STR_3(4), STR_1(4), 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  s1              1    9[COMMON] PTR const unsigned char 
  2979 ;;		 -> read_line@c(64), 
  2980 ;;  r               1    8[COMMON] char 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  2    5[COMMON] int 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2990 ;;      Params:         2       0       0       0
  2991 ;;      Locals:         2       0       0       0
  2992 ;;      Temps:          1       0       0       0
  2993 ;;      Totals:         5       0       0       0
  2994 ;;Total ram usage:        5 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    2
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		_write_and_wait
  3001 ;;		_main
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           
  3006                           ;psect for function _strcmp
  3007  05BE                     _strcmp:	
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  3011                           ;strcmp@s1 stored from wreg
  3012  05BE  00F9               	movwf	strcmp@s1
  3013  05BF  2DC8               	goto	l1414
  3014  05C0                     l1412:	
  3015  05C0  3001               	movlw	1
  3016  05C1  00F7               	movwf	??_strcmp
  3017  05C2  0877               	movf	??_strcmp,w
  3018  05C3  07F9               	addwf	strcmp@s1,f
  3019  05C4  3001               	movlw	1
  3020  05C5  07F5               	addwf	strcmp@s2,f
  3021  05C6  3000               	movlw	0
  3022  05C7  3DF6               	addwfc	strcmp@s2+1,f
  3023  05C8                     l1414:	
  3024  05C8  0879               	movf	strcmp@s1,w
  3025  05C9  0086               	movwf	6
  3026  05CA  0187               	clrf	7
  3027  05CB  0875               	movf	strcmp@s2,w
  3028  05CC  0084               	movwf	4
  3029  05CD  0876               	movf	strcmp@s2+1,w
  3030  05CE  0085               	movwf	5
  3031  05CF  0800               	movf	0,w	;code access
  3032  05D0  3AFF               	xorlw	255
  3033  05D1  3E01               	addlw	1
  3034  05D2  0701               	addwf	1,w
  3035  05D3  00F7               	movwf	??_strcmp
  3036  05D4  0877               	movf	??_strcmp,w
  3037  05D5  00F8               	movwf	strcmp@r
  3038  05D6  0878               	movf	strcmp@r,w
  3039  05D7  1D03               	btfss	3,2
  3040  05D8  2DDF               	goto	l1418
  3041  05D9  0879               	movf	strcmp@s1,w
  3042  05DA  0086               	movwf	6
  3043  05DB  0187               	clrf	7
  3044  05DC  0801               	movf	1,w
  3045  05DD  1D03               	btfss	3,2
  3046  05DE  2DC0               	goto	l1412
  3047  05DF                     l1418:	
  3048  05DF  0878               	movf	strcmp@r,w
  3049  05E0  00F5               	movwf	?_strcmp
  3050  05E1  01F6               	clrf	?_strcmp+1
  3051  05E2  1BF5               	btfsc	?_strcmp,7
  3052  05E3  03F6               	decf	?_strcmp+1,f
  3053  05E4  0008               	return
  3054  05E5                     __end_of_strcmp:	
  3055                           
  3056                           	psect	text5
  3057  04B8                     __ptext5:	
  3058 ;; *************** function _read_line *****************
  3059 ;; Defined at:
  3060 ;;		line 132 in file "main.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;		None
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  c              64    0[BANK0 ] unsigned char [64]
  3065 ;;  i               2   64[BANK0 ] int 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      PTR unsigned char 
  3068 ;; Registers used:
  3069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3075 ;;      Params:         0       0       0       0
  3076 ;;      Locals:         0      66       0       0
  3077 ;;      Temps:          1       0       0       0
  3078 ;;      Totals:         1      66       0       0
  3079 ;;Total ram usage:       67 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    3
  3082 ;; This function calls:
  3083 ;;		_EUSART_Read
  3084 ;; This function is called by:
  3085 ;;		_write_and_wait
  3086 ;;		_main
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           
  3091                           ;psect for function _read_line
  3092  04B8                     _read_line:	
  3093  04B8                     l293:	
  3094                           ;incstack = 0
  3095                           ; Regs used in _read_line: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3096                           ;main.c: 133: char c[64];
  3097                           ;main.c: 135: do {
  3098                           
  3099                           
  3100                           ;main.c: 136: c[0] = EUSART_Read();
  3101  04B8  3186  2654  3184   	fcall	_EUSART_Read
  3102  04BB  00F4               	movwf	??_read_line
  3103  04BC  0874               	movf	??_read_line,w
  3104  04BD  0020               	movlb	0	; select bank0
  3105  04BE  00A0               	movwf	read_line@c
  3106                           
  3107                           ;main.c: 137: } while (c[0] == '\0');
  3108  04BF  0820               	movf	read_line@c,w
  3109  04C0  1903               	btfsc	3,2
  3110  04C1  2CB8               	goto	l293
  3111                           
  3112                           ;main.c: 139: int i = 0;
  3113  04C2  01E0               	clrf	read_line@i
  3114  04C3  01E1               	clrf	read_line@i+1
  3115  04C4                     l1380:	
  3116                           ;main.c: 140: do {
  3117                           
  3118                           
  3119                           ;main.c: 141: c[++i] = EUSART_Read();
  3120  04C4  3186  2654  3184   	fcall	_EUSART_Read
  3121  04C7  00F4               	movwf	??_read_line
  3122  04C8  3001               	movlw	1
  3123  04C9  0020               	movlb	0	; select bank0
  3124  04CA  07E0               	addwf	read_line@i,f
  3125  04CB  3000               	movlw	0
  3126  04CC  3DE1               	addwfc	read_line@i+1,f
  3127  04CD  0860               	movf	read_line@i,w
  3128  04CE  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3129  04CF  0086               	movwf	6
  3130  04D0  0187               	clrf	7
  3131  04D1  0874               	movf	??_read_line,w
  3132  04D2  0081               	movwf	1
  3133                           
  3134                           ;main.c: 142: } while (c[i] != '\n' && i < 64);
  3135  04D3  0860               	movf	read_line@i,w
  3136  04D4  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3137  04D5  0086               	movwf	6
  3138  04D6  0187               	clrf	7
  3139  04D7  300A               	movlw	10
  3140  04D8  0601               	xorwf	1,w
  3141  04D9  1903               	btfsc	3,2
  3142  04DA  2CE6               	goto	l1386
  3143  04DB  0861               	movf	read_line@i+1,w
  3144  04DC  3A80               	xorlw	128
  3145  04DD  00F4               	movwf	??_read_line
  3146  04DE  3080               	movlw	128
  3147  04DF  0274               	subwf	??_read_line,w
  3148  04E0  1D03               	skipz
  3149  04E1  2CE4               	goto	u975
  3150  04E2  3040               	movlw	64
  3151  04E3  0260               	subwf	read_line@i,w
  3152  04E4                     u975:	
  3153  04E4  1C03               	skipc
  3154  04E5  2CC4               	goto	l1380
  3155  04E6                     l1386:	
  3156                           
  3157                           ;main.c: 144: if (c[i] == '\n') c[i] = '\0';
  3158  04E6  0020               	movlb	0	; select bank0
  3159  04E7  0860               	movf	read_line@i,w
  3160  04E8  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3161  04E9  0086               	movwf	6
  3162  04EA  0187               	clrf	7
  3163  04EB  300A               	movlw	10
  3164  04EC  0601               	xorwf	1,w
  3165  04ED  1D03               	btfss	3,2
  3166  04EE  2CF4               	goto	l299
  3167  04EF  0860               	movf	read_line@i,w
  3168  04F0  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3169  04F1  0086               	movwf	6
  3170  04F2  0187               	clrf	7
  3171  04F3  0181               	clrf	1
  3172  04F4                     l299:	
  3173                           
  3174                           ;main.c: 145: if (c[i-1] == '\r') c[i-1] = '\0';
  3175  04F4  0860               	movf	read_line@i,w
  3176  04F5  3EFF               	addlw	255
  3177  04F6  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3178  04F7  0086               	movwf	6
  3179  04F8  0187               	clrf	7
  3180  04F9  300D               	movlw	13
  3181  04FA  0601               	xorwf	1,w
  3182  04FB  1D03               	btfss	3,2
  3183  04FC  2D03               	goto	l1392
  3184  04FD  0860               	movf	read_line@i,w
  3185  04FE  3EFF               	addlw	255
  3186  04FF  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3187  0500  0086               	movwf	6
  3188  0501  0187               	clrf	7
  3189  0502  0181               	clrf	1
  3190  0503                     l1392:	
  3191                           
  3192                           ;main.c: 146: return c;
  3193  0503  3020               	movlw	(low (read_line@c| 0))& (0+255)
  3194  0504  0008               	return
  3195  0505                     __end_of_read_line:	
  3196                           
  3197                           	psect	text6
  3198  0654                     __ptext6:	
  3199 ;; *************** function _EUSART_Read *****************
  3200 ;; Defined at:
  3201 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;		None
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  readValue       1    3[COMMON] unsigned char 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      unsigned char 
  3208 ;; Registers used:
  3209 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3215 ;;      Params:         0       0       0       0
  3216 ;;      Locals:         1       0       0       0
  3217 ;;      Temps:          1       0       0       0
  3218 ;;      Totals:         2       0       0       0
  3219 ;;Total ram usage:        2 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    2
  3222 ;; This function calls:
  3223 ;;		Nothing
  3224 ;; This function is called by:
  3225 ;;		_read_line
  3226 ;;		_show_input_leds
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           
  3231                           ;psect for function _EUSART_Read
  3232  0654                     _EUSART_Read:	
  3233                           
  3234                           ;eusart.c: 114: uint8_t readValue = 0;
  3235                           
  3236                           ;incstack = 0
  3237                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3238  0654  01F3               	clrf	EUSART_Read@readValue
  3239  0655                     l1288:	
  3240                           ;eusart.c: 117: {
  3241                           
  3242                           ;eusart.c: 116: while(0 == eusartRxCount)
  3243                           
  3244  0655  0020               	movlb	0	; select bank0
  3245  0656  086A               	movf	_eusartRxCount,w	;volatile
  3246  0657  1903               	btfsc	3,2
  3247  0658  2E55               	goto	l1288
  3248                           
  3249                           ;eusart.c: 118: }
  3250                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  3251  0659  086B               	movf	_eusartRxTail,w
  3252  065A  3E60               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3253  065B  0086               	movwf	6
  3254  065C  3001               	movlw	1	; select bank2/3
  3255  065D  0087               	movwf	7
  3256  065E  0801               	movf	1,w
  3257  065F  00F2               	movwf	??_EUSART_Read
  3258  0660  0872               	movf	??_EUSART_Read,w
  3259  0661  00F3               	movwf	EUSART_Read@readValue
  3260  0662  3001               	movlw	1
  3261  0663  00F2               	movwf	??_EUSART_Read
  3262  0664  0872               	movf	??_EUSART_Read,w
  3263  0665  07EB               	addwf	_eusartRxTail,f	;volatile
  3264                           
  3265                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3266  0666  3008               	movlw	8
  3267  0667  026B               	subwf	_eusartRxTail,w	;volatile
  3268  0668  1803               	btfsc	3,0
  3269                           
  3270                           ;eusart.c: 122: {
  3271                           ;eusart.c: 123: eusartRxTail = 0;
  3272  0669  01EB               	clrf	_eusartRxTail	;volatile
  3273                           
  3274                           ;eusart.c: 124: }
  3275                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  3276  066A  0021               	movlb	1	; select bank1
  3277  066B  1291               	bcf	17,5	;volatile
  3278                           
  3279                           ;eusart.c: 126: eusartRxCount--;
  3280  066C  3001               	movlw	1
  3281  066D  0020               	movlb	0	; select bank0
  3282  066E  02EA               	subwf	_eusartRxCount,f	;volatile
  3283                           
  3284                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  3285  066F  0021               	movlb	1	; select bank1
  3286  0670  1691               	bsf	17,5	;volatile
  3287                           
  3288                           ;eusart.c: 129: return readValue;
  3289  0671  0873               	movf	EUSART_Read@readValue,w
  3290  0672  0008               	return
  3291  0673                     __end_of_EUSART_Read:	
  3292                           
  3293                           	psect	text7
  3294  060B                     __ptext7:	
  3295 ;; *************** function _strcat *****************
  3296 ;; Defined at:
  3297 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcat.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  to              1    wreg     PTR unsigned char 
  3300 ;;		 -> main@command(64), 
  3301 ;;  from            1    2[COMMON] PTR const unsigned char 
  3302 ;;		 -> main@result(4), 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  to              1    4[COMMON] PTR unsigned char 
  3305 ;;		 -> main@command(64), 
  3306 ;;  cp              1    5[COMMON] PTR unsigned char 
  3307 ;;		 -> main@command(64), 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  1    wreg      PTR unsigned char 
  3310 ;; Registers used:
  3311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3317 ;;      Params:         1       0       0       0
  3318 ;;      Locals:         2       0       0       0
  3319 ;;      Temps:          1       0       0       0
  3320 ;;      Totals:         4       0       0       0
  3321 ;;Total ram usage:        4 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    2
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_main
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _strcat
  3333  060B                     _strcat:	
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0]
  3337                           ;strcat@to stored from wreg
  3338  060B  00F4               	movwf	strcat@to
  3339  060C  0874               	movf	strcat@to,w
  3340  060D  00F3               	movwf	??_strcat
  3341  060E  0873               	movf	??_strcat,w
  3342  060F  00F5               	movwf	strcat@cp
  3343  0610                     l1600:	
  3344  0610  0875               	movf	strcat@cp,w
  3345  0611  0086               	movwf	6
  3346  0612  0187               	clrf	7
  3347  0613  0801               	movf	1,w
  3348  0614  1903               	btfsc	3,2
  3349  0615  2E23               	goto	l1604
  3350  0616  3001               	movlw	1
  3351  0617  00F3               	movwf	??_strcat
  3352  0618  0873               	movf	??_strcat,w
  3353  0619  07F5               	addwf	strcat@cp,f
  3354  061A  2E10               	goto	l1600
  3355  061B                     l1602:	
  3356  061B  3001               	movlw	1
  3357  061C  00F3               	movwf	??_strcat
  3358  061D  0873               	movf	??_strcat,w
  3359  061E  07F5               	addwf	strcat@cp,f
  3360  061F  3001               	movlw	1
  3361  0620  00F3               	movwf	??_strcat
  3362  0621  0873               	movf	??_strcat,w
  3363  0622  07F2               	addwf	strcat@from,f
  3364  0623                     l1604:	
  3365  0623  0875               	movf	strcat@cp,w
  3366  0624  0086               	movwf	6
  3367  0625  0187               	clrf	7
  3368  0626  0872               	movf	strcat@from,w
  3369  0627  0084               	movwf	4
  3370  0628  0185               	clrf	5
  3371  0629  0800               	movf	0,w
  3372  062A  3FC0               	movwi [0]fsr1
  3373  062B  0889               	movf	9,f
  3374  062C  1D03               	btfss	3,2
  3375  062D  2E1B               	goto	l1602
  3376  062E  0874               	movf	strcat@to,w
  3377  062F  0008               	return
  3378  0630                     __end_of_strcat:	
  3379                           
  3380                           	psect	text8
  3381  03AD                     __ptext8:	
  3382 ;; *************** function _sprintf *****************
  3383 ;; Defined at:
  3384 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  sp              1    wreg     PTR unsigned char 
  3387 ;;		 -> main@result(4), 
  3388 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  3389 ;;		 -> STR_26(3), 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  3392 ;;		 -> main@result(4), 
  3393 ;;  idx             1    9[BANK0 ] unsigned char 
  3394 ;;  tmpval          4    0        struct .
  3395 ;;  val             2   11[BANK0 ] unsigned int 
  3396 ;;  cp              2    0        PTR const unsigned char 
  3397 ;;  len             2    0        unsigned int 
  3398 ;;  c               1   15[BANK0 ] char 
  3399 ;;  prec            1   13[BANK0 ] char 
  3400 ;;  ap              1   10[BANK0 ] PTR void [1]
  3401 ;;		 -> ?_sprintf(2), 
  3402 ;;  flag            1    8[BANK0 ] unsigned char 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  2    0[BANK0 ] int 
  3405 ;; Registers used:
  3406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3412 ;;      Params:         0       4       0       0
  3413 ;;      Locals:         0       8       0       0
  3414 ;;      Temps:          0       4       0       0
  3415 ;;      Totals:         0      16       0       0
  3416 ;;Total ram usage:       16 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    3
  3419 ;; This function calls:
  3420 ;;		___lwdiv
  3421 ;; This function is called by:
  3422 ;;		_main
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           
  3427                           ;psect for function _sprintf
  3428  03AD                     _sprintf:	
  3429                           
  3430                           ;incstack = 0
  3431                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3432                           ;sprintf@sp stored from wreg
  3433  03AD  0020               	movlb	0	; select bank0
  3434  03AE  00AE               	movwf	sprintf@sp
  3435                           
  3436                           ;doprnt.c: 494: va_list ap;
  3437                           ;doprnt.c: 499: signed char c;
  3438                           ;doprnt.c: 506: signed char prec;
  3439                           ;doprnt.c: 508: unsigned char flag;
  3440                           ;doprnt.c: 523: union {
  3441                           ;doprnt.c: 524: unsigned long vd;
  3442                           ;doprnt.c: 525: double integ;
  3443                           ;doprnt.c: 526: } tmpval;
  3444                           ;doprnt.c: 528: unsigned int val;
  3445                           ;doprnt.c: 529: unsigned len;
  3446                           ;doprnt.c: 530: const char * cp;
  3447                           ;doprnt.c: 533: *ap = __va_start();
  3448  03AF  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3449  03B0  00A4               	movwf	??_sprintf
  3450  03B1  0824               	movf	??_sprintf,w
  3451  03B2  00AA               	movwf	sprintf@ap
  3452  03B3                     l1590:	
  3453                           ;doprnt.c: 536: while(c = *f++) {
  3454                           
  3455  03B3  0821               	movf	sprintf@f+1,w
  3456  03B4  00A5               	movwf	??_sprintf+1
  3457  03B5  0820               	movf	sprintf@f,w
  3458  03B6  00A4               	movwf	??_sprintf
  3459  03B7  0AA0               	incf	sprintf@f,f
  3460  03B8  1903               	skipnz
  3461  03B9  0AA1               	incf	sprintf@f+1,f
  3462  03BA  0824               	movf	??_sprintf,w
  3463  03BB  0084               	movwf	4
  3464  03BC  0825               	movf	??_sprintf+1,w
  3465  03BD  0085               	movwf	5
  3466  03BE  0800               	movf	0,w	;code access
  3467  03BF  00A6               	movwf	??_sprintf+2
  3468  03C0  0826               	movf	??_sprintf+2,w
  3469  03C1  00AF               	movwf	sprintf@c
  3470  03C2  082F               	movf	sprintf@c,w
  3471  03C3  1903               	btfsc	3,2
  3472  03C4  2C5B               	goto	l1592
  3473                           
  3474                           ;doprnt.c: 538: if(c != '%')
  3475  03C5  3025               	movlw	37
  3476  03C6  062F               	xorwf	sprintf@c,w
  3477  03C7  1903               	btfsc	3,2
  3478  03C8  2BD5               	goto	l1556
  3479                           
  3480                           ;doprnt.c: 540: {
  3481                           ;doprnt.c: 541: ((*sp++ = (c)));
  3482  03C9  082F               	movf	sprintf@c,w
  3483  03CA  00A4               	movwf	??_sprintf
  3484  03CB  082E               	movf	sprintf@sp,w
  3485  03CC  0086               	movwf	6
  3486  03CD  0187               	clrf	7
  3487  03CE  0824               	movf	??_sprintf,w
  3488  03CF  0081               	movwf	1
  3489  03D0  3001               	movlw	1
  3490  03D1  00A4               	movwf	??_sprintf
  3491  03D2  0824               	movf	??_sprintf,w
  3492  03D3  07AE               	addwf	sprintf@sp,f
  3493                           
  3494                           ;doprnt.c: 542: continue;
  3495  03D4  2BB3               	goto	l1590
  3496  03D5                     l1556:	
  3497                           
  3498                           ;doprnt.c: 543: }
  3499                           ;doprnt.c: 548: flag = 0;
  3500  03D5  01A8               	clrf	sprintf@flag
  3501                           
  3502                           ;doprnt.c: 822: }
  3503                           
  3504                           ;doprnt.c: 813: continue;
  3505                           
  3506                           ;doprnt.c: 802: default:
  3507                           
  3508                           ;doprnt.c: 718: case 'x':
  3509                           ;doprnt.c: 723: break;
  3510                           
  3511                           ;doprnt.c: 712: case 'X':
  3512                           
  3513                           ;doprnt.c: 638: goto alldone;
  3514                           
  3515                           ;doprnt.c: 637: case 0:
  3516                           
  3517                           ;doprnt.c: 635: switch(c = *f++) {
  3518  03D6  0821               	movf	sprintf@f+1,w
  3519  03D7  00A5               	movwf	??_sprintf+1
  3520  03D8  0820               	movf	sprintf@f,w
  3521  03D9  00A4               	movwf	??_sprintf
  3522  03DA  0AA0               	incf	sprintf@f,f
  3523  03DB  1903               	skipnz
  3524  03DC  0AA1               	incf	sprintf@f+1,f
  3525  03DD  0824               	movf	??_sprintf,w
  3526  03DE  0084               	movwf	4
  3527  03DF  0825               	movf	??_sprintf+1,w
  3528  03E0  0085               	movwf	5
  3529  03E1  0800               	movf	0,w	;code access
  3530  03E2  00AF               	movwf	sprintf@c
  3531                           
  3532                           ; Switch size 1, requested type "space"
  3533                           ; Number of cases is 3, Range of values is 0 to 120
  3534                           ; switch strategies available:
  3535                           ; Name         Instructions Cycles
  3536                           ; simple_byte           10     6 (average)
  3537                           ; direct_byte          248     6 (fixed)
  3538                           ; jumptable            260     6 (fixed)
  3539                           ;	Chosen strategy is simple_byte
  3540  03E3  3A00               	xorlw	0	; case 0
  3541  03E4  1903               	skipnz
  3542  03E5  2C5B               	goto	l1592
  3543  03E6  3A58               	xorlw	88	; case 88
  3544  03E7  1903               	skipnz
  3545  03E8  2BED               	goto	l1562
  3546  03E9  3A20               	xorlw	32	; case 120
  3547  03EA  1903               	skipnz
  3548  03EB  2BED               	goto	l1562
  3549  03EC  2BB3               	goto	l1590
  3550  03ED                     l1562:	
  3551                           
  3552                           ;doprnt.c: 1273: {
  3553                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3554  03ED  082A               	movf	sprintf@ap,w
  3555  03EE  0086               	movwf	6
  3556  03EF  0187               	clrf	7
  3557  03F0  3F40               	moviw [0]fsr1
  3558  03F1  00AB               	movwf	sprintf@val
  3559  03F2  3F41               	moviw [1]fsr1
  3560  03F3  00AC               	movwf	sprintf@val+1
  3561  03F4  3002               	movlw	2
  3562  03F5  00A4               	movwf	??_sprintf
  3563  03F6  0824               	movf	??_sprintf,w
  3564  03F7  07AA               	addwf	sprintf@ap,f
  3565                           
  3566                           ;doprnt.c: 1287: }
  3567                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3568  03F8  01AF               	clrf	sprintf@c
  3569  03F9  0AAF               	incf	sprintf@c,f
  3570  03FA  3004               	movlw	4
  3571  03FB  062F               	xorwf	sprintf@c,w
  3572  03FC  1903               	btfsc	3,2
  3573  03FD  2C1D               	goto	l1578
  3574  03FE                     l1572:	
  3575                           
  3576                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3577  03FE  082F               	movf	sprintf@c,w
  3578  03FF  00A4               	movwf	??_sprintf
  3579  0400  01A5               	clrf	??_sprintf+1
  3580  0401  35A4               	lslf	??_sprintf,f
  3581  0402  0DA5               	rlf	??_sprintf+1,f
  3582  0403  3088               	movlw	low (_hexpowers| (0+32768))
  3583  0404  0724               	addwf	??_sprintf,w
  3584  0405  0084               	movwf	4
  3585  0406  3082               	movlw	high (_hexpowers| (0+32768))
  3586  0407  3D25               	addwfc	??_sprintf+1,w
  3587  0408  0085               	movwf	5
  3588  0409  3F00               	moviw [0]fsr0
  3589  040A  00A6               	movwf	??_sprintf+2
  3590  040B  3F01               	moviw [1]fsr0
  3591  040C  00A7               	movwf	??_sprintf+3
  3592  040D  0827               	movf	??_sprintf+3,w
  3593  040E  022C               	subwf	sprintf@val+1,w
  3594  040F  1D03               	skipz
  3595  0410  2C13               	goto	u1325
  3596  0411  0826               	movf	??_sprintf+2,w
  3597  0412  022B               	subwf	sprintf@val,w
  3598  0413                     u1325:	
  3599  0413  1C03               	btfss	3,0
  3600  0414  2C1D               	goto	l1578
  3601                           
  3602                           ;doprnt.c: 1318: break;
  3603  0415  3001               	movlw	1
  3604  0416  00A4               	movwf	??_sprintf
  3605  0417  0824               	movf	??_sprintf,w
  3606  0418  07AF               	addwf	sprintf@c,f
  3607  0419  3004               	movlw	4
  3608  041A  062F               	xorwf	sprintf@c,w
  3609  041B  1D03               	btfss	3,2
  3610  041C  2BFE               	goto	l1572
  3611  041D                     l1578:	
  3612                           
  3613                           ;doprnt.c: 1422: {
  3614                           ;doprnt.c: 1469: }
  3615                           ;doprnt.c: 1472: prec = c;
  3616  041D  082F               	movf	sprintf@c,w
  3617  041E  00A4               	movwf	??_sprintf
  3618  041F  0824               	movf	??_sprintf,w
  3619  0420  00AD               	movwf	sprintf@prec
  3620  0421                     l1588:	
  3621                           ;doprnt.c: 1474: while(prec--) {
  3622                           
  3623  0421  30FF               	movlw	255
  3624  0422  00A4               	movwf	??_sprintf
  3625  0423  0824               	movf	??_sprintf,w
  3626  0424  07AD               	addwf	sprintf@prec,f
  3627  0425  0A2D               	incf	sprintf@prec,w
  3628  0426  1903               	btfsc	3,2
  3629  0427  2BB3               	goto	l1590
  3630                           
  3631                           ;doprnt.c: 1478: {
  3632                           ;doprnt.c: 1499: {
  3633                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3634  0428  082D               	movf	sprintf@prec,w
  3635  0429  00A4               	movwf	??_sprintf
  3636  042A  01A5               	clrf	??_sprintf+1
  3637  042B  35A4               	lslf	??_sprintf,f
  3638  042C  0DA5               	rlf	??_sprintf+1,f
  3639  042D  3088               	movlw	low (_hexpowers| (0+32768))
  3640  042E  0724               	addwf	??_sprintf,w
  3641  042F  0084               	movwf	4
  3642  0430  3082               	movlw	high (_hexpowers| (0+32768))
  3643  0431  3D25               	addwfc	??_sprintf+1,w
  3644  0432  0085               	movwf	5
  3645  0433  3F00               	moviw [0]fsr0
  3646  0434  00F2               	movwf	___lwdiv@divisor
  3647  0435  3F01               	moviw [1]fsr0
  3648  0436  00F3               	movwf	___lwdiv@divisor+1
  3649  0437  082C               	movf	sprintf@val+1,w
  3650  0438  00F5               	movwf	___lwdiv@dividend+1
  3651  0439  082B               	movf	sprintf@val,w
  3652  043A  00F4               	movwf	___lwdiv@dividend
  3653  043B  3185  258A  3183   	fcall	___lwdiv
  3654  043E  0872               	movf	?___lwdiv,w
  3655  043F  390F               	andlw	15
  3656  0440  0020               	movlb	0	; select bank0
  3657  0441  00A6               	movwf	??_sprintf+2
  3658  0442  0826               	movf	??_sprintf+2,w
  3659  0443  00A9               	movwf	sprintf@idx
  3660                           
  3661                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  3662  0444  0829               	movf	sprintf@idx,w
  3663  0445  3E4A               	addlw	low (STR_28| (0+32768))
  3664  0446  0084               	movwf	4
  3665  0447  3083               	movlw	high (STR_28| (0+32768))
  3666  0448  1803               	skipnc
  3667  0449  3E01               	addlw	1
  3668  044A  0085               	movwf	5
  3669  044B  0800               	movf	0,w	;code access
  3670  044C  00A4               	movwf	??_sprintf
  3671  044D  0824               	movf	??_sprintf,w
  3672  044E  00AF               	movwf	sprintf@c
  3673                           
  3674                           ;doprnt.c: 1508: }
  3675                           ;doprnt.c: 1523: }
  3676                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3677  044F  082F               	movf	sprintf@c,w
  3678  0450  00A4               	movwf	??_sprintf
  3679  0451  082E               	movf	sprintf@sp,w
  3680  0452  0086               	movwf	6
  3681  0453  0187               	clrf	7
  3682  0454  0824               	movf	??_sprintf,w
  3683  0455  0081               	movwf	1
  3684  0456  3001               	movlw	1
  3685  0457  00A4               	movwf	??_sprintf
  3686  0458  0824               	movf	??_sprintf,w
  3687  0459  07AE               	addwf	sprintf@sp,f
  3688  045A  2C21               	goto	l1588
  3689  045B                     l1592:	
  3690                           ;doprnt.c: 1525: }
  3691                           ;doprnt.c: 1533: }
  3692                           ;doprnt.c: 1535: alldone:
  3693                           
  3694                           
  3695                           ;doprnt.c: 1538: *sp = 0;
  3696  045B  082E               	movf	sprintf@sp,w
  3697  045C  0086               	movwf	6
  3698  045D  0187               	clrf	7
  3699  045E  0181               	clrf	1
  3700  045F  0008               	return
  3701  0460                     __end_of_sprintf:	
  3702                           ;doprnt.c: 1540: return 0;
  3703                           ;	Return value of _sprintf is never used
  3704                           
  3705                           
  3706                           	psect	text9
  3707  058A                     __ptext9:	
  3708 ;; *************** function ___lwdiv *****************
  3709 ;; Defined at:
  3710 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  divisor         2    2[COMMON] unsigned int 
  3713 ;;  dividend        2    4[COMMON] unsigned int 
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;  quotient        2    7[COMMON] unsigned int 
  3716 ;;  counter         1    9[COMMON] unsigned char 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  2    2[COMMON] unsigned int 
  3719 ;; Registers used:
  3720 ;;		wreg, status,2, status,0
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3726 ;;      Params:         4       0       0       0
  3727 ;;      Locals:         3       0       0       0
  3728 ;;      Temps:          1       0       0       0
  3729 ;;      Totals:         8       0       0       0
  3730 ;;Total ram usage:        8 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    2
  3733 ;; This function calls:
  3734 ;;		Nothing
  3735 ;; This function is called by:
  3736 ;;		_sprintf
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           
  3741                           ;psect for function ___lwdiv
  3742  058A                     ___lwdiv:	
  3743                           
  3744                           ;incstack = 0
  3745                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3746  058A  01F7               	clrf	___lwdiv@quotient
  3747  058B  01F8               	clrf	___lwdiv@quotient+1
  3748  058C  0872               	movf	___lwdiv@divisor,w
  3749  058D  0473               	iorwf	___lwdiv@divisor+1,w
  3750  058E  1903               	btfsc	3,2
  3751  058F  2DB9               	goto	l1444
  3752  0590  01F9               	clrf	___lwdiv@counter
  3753  0591  0AF9               	incf	___lwdiv@counter,f
  3754  0592                     l1432:	
  3755  0592  1BF3               	btfsc	___lwdiv@divisor+1,7
  3756  0593  2D9E               	goto	l1434
  3757  0594  3001               	movlw	1
  3758  0595                     u1045:	
  3759  0595  35F2               	lslf	___lwdiv@divisor,f
  3760  0596  0DF3               	rlf	___lwdiv@divisor+1,f
  3761  0597  0B89               	decfsz	9,f
  3762  0598  2D95               	goto	u1045
  3763  0599  3001               	movlw	1
  3764  059A  00F6               	movwf	??___lwdiv
  3765  059B  0876               	movf	??___lwdiv,w
  3766  059C  07F9               	addwf	___lwdiv@counter,f
  3767  059D  2D92               	goto	l1432
  3768  059E                     l1434:	
  3769  059E  3001               	movlw	1
  3770  059F                     u1065:	
  3771  059F  35F7               	lslf	___lwdiv@quotient,f
  3772  05A0  0DF8               	rlf	___lwdiv@quotient+1,f
  3773  05A1  0B89               	decfsz	9,f
  3774  05A2  2D9F               	goto	u1065
  3775  05A3  0873               	movf	___lwdiv@divisor+1,w
  3776  05A4  0275               	subwf	___lwdiv@dividend+1,w
  3777  05A5  1D03               	skipz
  3778  05A6  2DA9               	goto	u1075
  3779  05A7  0872               	movf	___lwdiv@divisor,w
  3780  05A8  0274               	subwf	___lwdiv@dividend,w
  3781  05A9                     u1075:	
  3782  05A9  1C03               	skipc
  3783  05AA  2DB0               	goto	l1440
  3784  05AB  0872               	movf	___lwdiv@divisor,w
  3785  05AC  02F4               	subwf	___lwdiv@dividend,f
  3786  05AD  0873               	movf	___lwdiv@divisor+1,w
  3787  05AE  3BF5               	subwfb	___lwdiv@dividend+1,f
  3788  05AF  1477               	bsf	___lwdiv@quotient,0
  3789  05B0                     l1440:	
  3790  05B0  3001               	movlw	1
  3791  05B1                     u1085:	
  3792  05B1  36F3               	lsrf	___lwdiv@divisor+1,f
  3793  05B2  0CF2               	rrf	___lwdiv@divisor,f
  3794  05B3  0B89               	decfsz	9,f
  3795  05B4  2DB1               	goto	u1085
  3796  05B5  3001               	movlw	1
  3797  05B6  02F9               	subwf	___lwdiv@counter,f
  3798  05B7  1D03               	btfss	3,2
  3799  05B8  2D9E               	goto	l1434
  3800  05B9                     l1444:	
  3801  05B9  0878               	movf	___lwdiv@quotient+1,w
  3802  05BA  00F3               	movwf	?___lwdiv+1
  3803  05BB  0877               	movf	___lwdiv@quotient,w
  3804  05BC  00F2               	movwf	?___lwdiv
  3805  05BD  0008               	return
  3806  05BE                     __end_of___lwdiv:	
  3807                           
  3808                           	psect	text10
  3809  0460                     __ptext10:	
  3810 ;; *************** function _blink_leds *****************
  3811 ;; Defined at:
  3812 ;;		line 44 in file "main.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  n               2    2[COMMON] int 
  3815 ;;  c               2    4[COMMON] int 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  i               2    8[COMMON] int 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  2    2[COMMON] int 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0, pclath, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3827 ;;      Params:         4       0       0       0
  3828 ;;      Locals:         2       0       0       0
  3829 ;;      Temps:          2       0       0       0
  3830 ;;      Totals:         8       0       0       0
  3831 ;;Total ram usage:        8 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    3
  3834 ;; This function calls:
  3835 ;;		_set_low_leds
  3836 ;; This function is called by:
  3837 ;;		_main
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           
  3842                           ;psect for function _blink_leds
  3843  0460                     _blink_leds:	
  3844                           
  3845                           ;main.c: 45: _delay((unsigned long)((640)*(8000000/4000.0)));
  3846                           
  3847                           ;incstack = 0
  3848                           ; Regs used in _blink_leds: [wreg+status,2+status,0+pclath+cstack]
  3849  0460  3007               	movlw	7
  3850  0461  00F7               	movwf	??_blink_leds+1
  3851  0462  307F               	movlw	127
  3852  0463  00F6               	movwf	??_blink_leds
  3853  0464  3050               	movlw	80
  3854  0465                     u1937:	
  3855  0465  0B89               	decfsz	9,f
  3856  0466  2C65               	goto	u1937
  3857  0467  0BF6               	decfsz	??_blink_leds,f
  3858  0468  2C65               	goto	u1937
  3859  0469  0BF7               	decfsz	??_blink_leds+1,f
  3860  046A  2C65               	goto	u1937
  3861                           
  3862                           ;main.c: 46: for (int i = 0; i < n; ++i) {
  3863  046B  01F8               	clrf	blink_leds@i
  3864  046C  01F9               	clrf	blink_leds@i+1
  3865  046D                     l233:	
  3866  046D  0879               	movf	blink_leds@i+1,w
  3867  046E  3A80               	xorlw	128
  3868  046F  00F6               	movwf	??_blink_leds
  3869  0470  0873               	movf	blink_leds@n+1,w
  3870  0471  3A80               	xorlw	128
  3871  0472  0276               	subwf	??_blink_leds,w
  3872  0473  1D03               	skipz
  3873  0474  2C77               	goto	u1195
  3874  0475  0872               	movf	blink_leds@n,w
  3875  0476  0278               	subwf	blink_leds@i,w
  3876  0477                     u1195:	
  3877  0477  1803               	btfsc	3,0
  3878  0478  2CA9               	goto	l1500
  3879                           
  3880                           ;main.c: 47: set_low_leds();
  3881  0479  3187  273B  3184   	fcall	_set_low_leds
  3882                           
  3883                           ;main.c: 48: _delay((unsigned long)((128)*(8000000/4000.0)));
  3884  047C  3002               	movlw	2
  3885  047D  00F7               	movwf	??_blink_leds+1
  3886  047E  304D               	movlw	77
  3887  047F  00F6               	movwf	??_blink_leds
  3888  0480  3074               	movlw	116
  3889  0481                     u1947:	
  3890  0481  0B89               	decfsz	9,f
  3891  0482  2C81               	goto	u1947
  3892  0483  0BF6               	decfsz	??_blink_leds,f
  3893  0484  2C81               	goto	u1947
  3894  0485  0BF7               	decfsz	??_blink_leds+1,f
  3895  0486  2C81               	goto	u1947
  3896  0487  3200               	nop2
  3897                           
  3898                           ;main.c: 49: if (c & 0b00000001) do { LATAbits.LATA5 = 1; } while(0);
  3899  0488  1C74               	btfss	blink_leds@c,0
  3900  0489  2C8C               	goto	l235
  3901  048A  0022               	movlb	2	; select bank2
  3902  048B  168C               	bsf	12,5	;volatile
  3903  048C                     l235:	
  3904                           
  3905                           ;main.c: 50: if (c & 0b00000010) do { LATAbits.LATA1 = 1; } while(0);
  3906  048C  1CF4               	btfss	blink_leds@c,1
  3907  048D  2C90               	goto	l238
  3908  048E  0022               	movlb	2	; select bank2
  3909  048F  148C               	bsf	12,1	;volatile
  3910  0490                     l238:	
  3911                           
  3912                           ;main.c: 51: if (c & 0b00000100) do { LATAbits.LATA2 = 1; } while(0);
  3913  0490  1D74               	btfss	blink_leds@c,2
  3914  0491  2C94               	goto	l241
  3915  0492  0022               	movlb	2	; select bank2
  3916  0493  150C               	bsf	12,2	;volatile
  3917  0494                     l241:	
  3918                           
  3919                           ;main.c: 52: if (c & 0b00001000) do { LATCbits.LATC5 = 1; } while(0);
  3920  0494  1DF4               	btfss	blink_leds@c,3
  3921  0495  2C98               	goto	l1498
  3922  0496  0022               	movlb	2	; select bank2
  3923  0497  168E               	bsf	14,5	;volatile
  3924  0498                     l1498:	
  3925                           
  3926                           ;main.c: 53: _delay((unsigned long)((128)*(8000000/4000.0)));
  3927  0498  3002               	movlw	2
  3928  0499  00F7               	movwf	??_blink_leds+1
  3929  049A  304D               	movlw	77
  3930  049B  00F6               	movwf	??_blink_leds
  3931  049C  3074               	movlw	116
  3932  049D                     u1957:	
  3933  049D  0B89               	decfsz	9,f
  3934  049E  2C9D               	goto	u1957
  3935  049F  0BF6               	decfsz	??_blink_leds,f
  3936  04A0  2C9D               	goto	u1957
  3937  04A1  0BF7               	decfsz	??_blink_leds+1,f
  3938  04A2  2C9D               	goto	u1957
  3939  04A3  3200               	nop2
  3940  04A4  3001               	movlw	1
  3941  04A5  07F8               	addwf	blink_leds@i,f
  3942  04A6  3000               	movlw	0
  3943  04A7  3DF9               	addwfc	blink_leds@i+1,f
  3944  04A8  2C6D               	goto	l233
  3945  04A9                     l1500:	
  3946                           
  3947                           ;main.c: 54: }
  3948                           ;main.c: 55: set_low_leds();
  3949  04A9  3187  273B  3184   	fcall	_set_low_leds
  3950                           
  3951                           ;main.c: 56: _delay((unsigned long)((640)*(8000000/4000.0)));
  3952  04AC  3007               	movlw	7
  3953  04AD  00F7               	movwf	??_blink_leds+1
  3954  04AE  307F               	movlw	127
  3955  04AF  00F6               	movwf	??_blink_leds
  3956  04B0  3050               	movlw	80
  3957  04B1                     u1967:	
  3958  04B1  0B89               	decfsz	9,f
  3959  04B2  2CB1               	goto	u1967
  3960  04B3  0BF6               	decfsz	??_blink_leds,f
  3961  04B4  2CB1               	goto	u1967
  3962  04B5  0BF7               	decfsz	??_blink_leds+1,f
  3963  04B6  2CB1               	goto	u1967
  3964  04B7  0008               	return
  3965  04B8                     __end_of_blink_leds:	
  3966                           ;main.c: 57: return (0);
  3967                           ;	Return value of _blink_leds is never used
  3968                           
  3969                           
  3970                           	psect	text11
  3971  073B                     __ptext11:	
  3972 ;; *************** function _set_low_leds *****************
  3973 ;; Defined at:
  3974 ;;		line 32 in file "main.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  2  221[None  ] int 
  3981 ;; Registers used:
  3982 ;;		None
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3988 ;;      Params:         0       0       0       0
  3989 ;;      Locals:         0       0       0       0
  3990 ;;      Temps:          0       0       0       0
  3991 ;;      Totals:         0       0       0       0
  3992 ;;Total ram usage:        0 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    2
  3995 ;; This function calls:
  3996 ;;		Nothing
  3997 ;; This function is called by:
  3998 ;;		_blink_leds
  3999 ;;		_show_char_leds
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           
  4004                           ;psect for function _set_low_leds
  4005  073B                     _set_low_leds:	
  4006                           
  4007                           ;incstack = 0
  4008                           ; Regs used in _set_low_leds: []
  4009                           ;main.c: 33: do { LATAbits.LATA5 = 0; } while(0);
  4010  073B  0022               	movlb	2	; select bank2
  4011  073C  128C               	bcf	12,5	;volatile
  4012                           
  4013                           ;main.c: 34: do { LATAbits.LATA1 = 0; } while(0);
  4014  073D  108C               	bcf	12,1	;volatile
  4015                           
  4016                           ;main.c: 35: do { LATAbits.LATA2 = 0; } while(0);
  4017  073E  110C               	bcf	12,2	;volatile
  4018                           
  4019                           ;main.c: 36: do { LATCbits.LATC5 = 0; } while(0);
  4020  073F  128E               	bcf	14,5	;volatile
  4021  0740  0008               	return
  4022  0741                     __end_of_set_low_leds:	
  4023                           ;main.c: 37: return (0);
  4024                           ;	Return value of _set_low_leds is never used
  4025                           
  4026                           
  4027                           	psect	text12
  4028  0505                     __ptext12:	
  4029 ;; *************** function ___awmod *****************
  4030 ;; Defined at:
  4031 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;  divisor         2    2[COMMON] int 
  4034 ;;  dividend        2    4[COMMON] int 
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;  sign            1    8[COMMON] unsigned char 
  4037 ;;  counter         1    7[COMMON] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  2    2[COMMON] int 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4047 ;;      Params:         4       0       0       0
  4048 ;;      Locals:         2       0       0       0
  4049 ;;      Temps:          1       0       0       0
  4050 ;;      Totals:         7       0       0       0
  4051 ;;Total ram usage:        7 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    2
  4054 ;; This function calls:
  4055 ;;		Nothing
  4056 ;; This function is called by:
  4057 ;;		_main
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           
  4062                           ;psect for function ___awmod
  4063  0505                     ___awmod:	
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4067  0505  01F8               	clrf	___awmod@sign
  4068  0506  1FF5               	btfss	___awmod@dividend+1,7
  4069  0507  2D0F               	goto	l1618
  4070  0508  09F4               	comf	___awmod@dividend,f
  4071  0509  09F5               	comf	___awmod@dividend+1,f
  4072  050A  0AF4               	incf	___awmod@dividend,f
  4073  050B  1903               	skipnz
  4074  050C  0AF5               	incf	___awmod@dividend+1,f
  4075  050D  01F8               	clrf	___awmod@sign
  4076  050E  0AF8               	incf	___awmod@sign,f
  4077  050F                     l1618:	
  4078  050F  1FF3               	btfss	___awmod@divisor+1,7
  4079  0510  2D16               	goto	l1622
  4080  0511  09F2               	comf	___awmod@divisor,f
  4081  0512  09F3               	comf	___awmod@divisor+1,f
  4082  0513  0AF2               	incf	___awmod@divisor,f
  4083  0514  1903               	skipnz
  4084  0515  0AF3               	incf	___awmod@divisor+1,f
  4085  0516                     l1622:	
  4086  0516  0872               	movf	___awmod@divisor,w
  4087  0517  0473               	iorwf	___awmod@divisor+1,w
  4088  0518  1903               	btfsc	3,2
  4089  0519  2D3D               	goto	l1640
  4090  051A  01F7               	clrf	___awmod@counter
  4091  051B  0AF7               	incf	___awmod@counter,f
  4092  051C                     l1630:	
  4093  051C  1BF3               	btfsc	___awmod@divisor+1,7
  4094  051D  2D28               	goto	l1632
  4095  051E  3001               	movlw	1
  4096  051F                     u1415:	
  4097  051F  35F2               	lslf	___awmod@divisor,f
  4098  0520  0DF3               	rlf	___awmod@divisor+1,f
  4099  0521  0B89               	decfsz	9,f
  4100  0522  2D1F               	goto	u1415
  4101  0523  3001               	movlw	1
  4102  0524  00F6               	movwf	??___awmod
  4103  0525  0876               	movf	??___awmod,w
  4104  0526  07F7               	addwf	___awmod@counter,f
  4105  0527  2D1C               	goto	l1630
  4106  0528                     l1632:	
  4107  0528  0873               	movf	___awmod@divisor+1,w
  4108  0529  0275               	subwf	___awmod@dividend+1,w
  4109  052A  1D03               	skipz
  4110  052B  2D2E               	goto	u1435
  4111  052C  0872               	movf	___awmod@divisor,w
  4112  052D  0274               	subwf	___awmod@dividend,w
  4113  052E                     u1435:	
  4114  052E  1C03               	skipc
  4115  052F  2D34               	goto	l1636
  4116  0530  0872               	movf	___awmod@divisor,w
  4117  0531  02F4               	subwf	___awmod@dividend,f
  4118  0532  0873               	movf	___awmod@divisor+1,w
  4119  0533  3BF5               	subwfb	___awmod@dividend+1,f
  4120  0534                     l1636:	
  4121  0534  3001               	movlw	1
  4122  0535                     u1445:	
  4123  0535  36F3               	lsrf	___awmod@divisor+1,f
  4124  0536  0CF2               	rrf	___awmod@divisor,f
  4125  0537  0B89               	decfsz	9,f
  4126  0538  2D35               	goto	u1445
  4127  0539  3001               	movlw	1
  4128  053A  02F7               	subwf	___awmod@counter,f
  4129  053B  1D03               	btfss	3,2
  4130  053C  2D28               	goto	l1632
  4131  053D                     l1640:	
  4132  053D  0878               	movf	___awmod@sign,w
  4133  053E  1903               	btfsc	3,2
  4134  053F  2D45               	goto	l1644
  4135  0540  09F4               	comf	___awmod@dividend,f
  4136  0541  09F5               	comf	___awmod@dividend+1,f
  4137  0542  0AF4               	incf	___awmod@dividend,f
  4138  0543  1903               	skipnz
  4139  0544  0AF5               	incf	___awmod@dividend+1,f
  4140  0545                     l1644:	
  4141  0545  0875               	movf	___awmod@dividend+1,w
  4142  0546  00F3               	movwf	?___awmod+1
  4143  0547  0874               	movf	___awmod@dividend,w
  4144  0548  00F2               	movwf	?___awmod
  4145  0549  0008               	return
  4146  054A                     __end_of___awmod:	
  4147                           
  4148                           	psect	text13
  4149  0718                     __ptext13:	
  4150 ;; *************** function _SYSTEM_Initialize *****************
  4151 ;; Defined at:
  4152 ;;		line 68 in file "mcc_generated_files/mcc.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;		None
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;		None
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  1    wreg      void 
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0, pclath, cstack
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4166 ;;      Params:         0       0       0       0
  4167 ;;      Locals:         0       0       0       0
  4168 ;;      Temps:          0       0       0       0
  4169 ;;      Totals:         0       0       0       0
  4170 ;;Total ram usage:        0 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    3
  4173 ;; This function calls:
  4174 ;;		_ADC_Initialize
  4175 ;;		_EUSART_Initialize
  4176 ;;		_OSCILLATOR_Initialize
  4177 ;;		_PIN_MANAGER_Initialize
  4178 ;;		_WDT_Initialize
  4179 ;; This function is called by:
  4180 ;;		_main
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           
  4185                           ;psect for function _SYSTEM_Initialize
  4186  0718                     _SYSTEM_Initialize:	
  4187                           
  4188                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  4189                           
  4190                           ;incstack = 0
  4191                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4192  0718  3186  26AD  3187   	fcall	_PIN_MANAGER_Initialize
  4193                           
  4194                           ;mcc.c: 72: OSCILLATOR_Initialize();
  4195  071B  3187  2745  3187   	fcall	_OSCILLATOR_Initialize
  4196                           
  4197                           ;mcc.c: 73: WDT_Initialize();
  4198  071E  3187  2741  3187   	fcall	_WDT_Initialize
  4199                           
  4200                           ;mcc.c: 74: ADC_Initialize();
  4201  0721  3187  2727  3187   	fcall	_ADC_Initialize
  4202                           
  4203                           ;mcc.c: 75: EUSART_Initialize();
  4204  0724  3186  26E5         	fcall	_EUSART_Initialize
  4205  0726  0008               	return
  4206  0727                     __end_of_SYSTEM_Initialize:	
  4207                           
  4208                           	psect	text14
  4209  0741                     __ptext14:	
  4210 ;; *************** function _WDT_Initialize *****************
  4211 ;; Defined at:
  4212 ;;		line 84 in file "mcc_generated_files/mcc.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;		None
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;		None
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  1    wreg      void 
  4219 ;; Registers used:
  4220 ;;		wreg
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4226 ;;      Params:         0       0       0       0
  4227 ;;      Locals:         0       0       0       0
  4228 ;;      Temps:          0       0       0       0
  4229 ;;      Totals:         0       0       0       0
  4230 ;;Total ram usage:        0 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    2
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_SYSTEM_Initialize
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           
  4241                           ;psect for function _WDT_Initialize
  4242  0741                     _WDT_Initialize:	
  4243                           
  4244                           ;mcc.c: 87: WDTCON = 0x16;
  4245                           
  4246                           ;incstack = 0
  4247                           ; Regs used in _WDT_Initialize: [wreg]
  4248  0741  3016               	movlw	22
  4249  0742  0021               	movlb	1	; select bank1
  4250  0743  0097               	movwf	23	;volatile
  4251  0744  0008               	return
  4252  0745                     __end_of_WDT_Initialize:	
  4253                           
  4254                           	psect	text15
  4255  06AD                     __ptext15:	
  4256 ;; *************** function _PIN_MANAGER_Initialize *****************
  4257 ;; Defined at:
  4258 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;		None
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  1    wreg      void 
  4265 ;; Registers used:
  4266 ;;		wreg, status,2
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4272 ;;      Params:         0       0       0       0
  4273 ;;      Locals:         0       0       0       0
  4274 ;;      Temps:          0       0       0       0
  4275 ;;      Totals:         0       0       0       0
  4276 ;;Total ram usage:        0 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    2
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_SYSTEM_Initialize
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           
  4287                           ;psect for function _PIN_MANAGER_Initialize
  4288  06AD                     _PIN_MANAGER_Initialize:	
  4289                           
  4290                           ;pin_manager.c: 56: LATA = 0x00;
  4291                           
  4292                           ;incstack = 0
  4293                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4294  06AD  0022               	movlb	2	; select bank2
  4295  06AE  018C               	clrf	12	;volatile
  4296                           
  4297                           ;pin_manager.c: 57: LATB = 0x00;
  4298  06AF  018D               	clrf	13	;volatile
  4299                           
  4300                           ;pin_manager.c: 58: LATC = 0x00;
  4301  06B0  018E               	clrf	14	;volatile
  4302                           
  4303                           ;pin_manager.c: 63: TRISA = 0x09;
  4304  06B1  3009               	movlw	9
  4305  06B2  0021               	movlb	1	; select bank1
  4306  06B3  008C               	movwf	12	;volatile
  4307                           
  4308                           ;pin_manager.c: 64: TRISB = 0x70;
  4309  06B4  3070               	movlw	112
  4310  06B5  008D               	movwf	13	;volatile
  4311                           
  4312                           ;pin_manager.c: 65: TRISC = 0xCF;
  4313  06B6  30CF               	movlw	207
  4314  06B7  008E               	movwf	14	;volatile
  4315                           
  4316                           ;pin_manager.c: 70: ANSELC = 0xCE;
  4317  06B8  30CE               	movlw	206
  4318  06B9  0023               	movlb	3	; select bank3
  4319  06BA  008E               	movwf	14	;volatile
  4320                           
  4321                           ;pin_manager.c: 71: ANSELB = 0x10;
  4322  06BB  3010               	movlw	16
  4323  06BC  008D               	movwf	13	;volatile
  4324                           
  4325                           ;pin_manager.c: 72: ANSELA = 0x17;
  4326  06BD  3017               	movlw	23
  4327  06BE  008C               	movwf	12	;volatile
  4328                           
  4329                           ;pin_manager.c: 77: WPUB = 0xF0;
  4330  06BF  30F0               	movlw	240
  4331  06C0  0024               	movlb	4	; select bank4
  4332  06C1  008D               	movwf	13	;volatile
  4333                           
  4334                           ;pin_manager.c: 78: WPUA = 0x3F;
  4335  06C2  303F               	movlw	63
  4336  06C3  008C               	movwf	12	;volatile
  4337                           
  4338                           ;pin_manager.c: 79: OPTION_REGbits.nWPUEN = 0;
  4339  06C4  0021               	movlb	1	; select bank1
  4340  06C5  1395               	bcf	21,7	;volatile
  4341                           
  4342                           ;pin_manager.c: 85: APFCON = 0x00;
  4343  06C6  0022               	movlb	2	; select bank2
  4344  06C7  019D               	clrf	29	;volatile
  4345  06C8  0008               	return
  4346  06C9                     __end_of_PIN_MANAGER_Initialize:	
  4347                           
  4348                           	psect	text16
  4349  0745                     __ptext16:	
  4350 ;; *************** function _OSCILLATOR_Initialize *****************
  4351 ;; Defined at:
  4352 ;;		line 78 in file "mcc_generated_files/mcc.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;		None
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;		None
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      void 
  4359 ;; Registers used:
  4360 ;;		wreg
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4366 ;;      Params:         0       0       0       0
  4367 ;;      Locals:         0       0       0       0
  4368 ;;      Temps:          0       0       0       0
  4369 ;;      Totals:         0       0       0       0
  4370 ;;Total ram usage:        0 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    2
  4373 ;; This function calls:
  4374 ;;		Nothing
  4375 ;; This function is called by:
  4376 ;;		_SYSTEM_Initialize
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           
  4381                           ;psect for function _OSCILLATOR_Initialize
  4382  0745                     _OSCILLATOR_Initialize:	
  4383                           
  4384                           ;mcc.c: 81: OSCCON = 0x70;
  4385                           
  4386                           ;incstack = 0
  4387                           ; Regs used in _OSCILLATOR_Initialize: [wreg]
  4388  0745  3070               	movlw	112
  4389  0746  0021               	movlb	1	; select bank1
  4390  0747  0099               	movwf	25	;volatile
  4391  0748  0008               	return
  4392  0749                     __end_of_OSCILLATOR_Initialize:	
  4393                           
  4394                           	psect	text17
  4395  06E5                     __ptext17:	
  4396 ;; *************** function _EUSART_Initialize *****************
  4397 ;; Defined at:
  4398 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4412 ;;      Params:         0       0       0       0
  4413 ;;      Locals:         0       0       0       0
  4414 ;;      Temps:          1       0       0       0
  4415 ;;      Totals:         1       0       0       0
  4416 ;;Total ram usage:        1 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    2
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_SYSTEM_Initialize
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _EUSART_Initialize
  4428  06E5                     _EUSART_Initialize:	
  4429                           
  4430                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4434  06E5  0021               	movlb	1	; select bank1
  4435  06E6  1291               	bcf	17,5	;volatile
  4436                           
  4437                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4438  06E7  1211               	bcf	17,4	;volatile
  4439                           
  4440                           ;eusart.c: 84: BAUDCON = 0x09;
  4441  06E8  3009               	movlw	9
  4442  06E9  0023               	movlb	3	; select bank3
  4443  06EA  009F               	movwf	31	;volatile
  4444                           
  4445                           ;eusart.c: 87: RCSTA = 0x90;
  4446  06EB  3090               	movlw	144
  4447  06EC  009D               	movwf	29	;volatile
  4448                           
  4449                           ;eusart.c: 90: TXSTA = 0x24;
  4450  06ED  3024               	movlw	36
  4451  06EE  009E               	movwf	30	;volatile
  4452                           
  4453                           ;eusart.c: 93: SPBRGL = 0x10;
  4454  06EF  3010               	movlw	16
  4455  06F0  009B               	movwf	27	;volatile
  4456                           
  4457                           ;eusart.c: 96: SPBRGH = 0x00;
  4458  06F1  019C               	clrf	28	;volatile
  4459                           
  4460                           ;eusart.c: 100: eusartTxHead = 0;
  4461  06F2  01FB               	clrf	_eusartTxHead	;volatile
  4462                           
  4463                           ;eusart.c: 101: eusartTxTail = 0;
  4464  06F3  01FA               	clrf	_eusartTxTail	;volatile
  4465                           
  4466                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4467  06F4  3008               	movlw	8
  4468  06F5  00F2               	movwf	??_EUSART_Initialize
  4469  06F6  0872               	movf	??_EUSART_Initialize,w
  4470  06F7  0020               	movlb	0	; select bank0
  4471  06F8  00ED               	movwf	_eusartTxBufferRemaining	;volatile
  4472                           
  4473                           ;eusart.c: 104: eusartRxHead = 0;
  4474  06F9  01EC               	clrf	_eusartRxHead	;volatile
  4475                           
  4476                           ;eusart.c: 105: eusartRxTail = 0;
  4477  06FA  01EB               	clrf	_eusartRxTail	;volatile
  4478                           
  4479                           ;eusart.c: 106: eusartRxCount = 0;
  4480  06FB  01EA               	clrf	_eusartRxCount	;volatile
  4481                           
  4482                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4483  06FC  0021               	movlb	1	; select bank1
  4484  06FD  1691               	bsf	17,5	;volatile
  4485  06FE  0008               	return
  4486  06FF                     __end_of_EUSART_Initialize:	
  4487                           
  4488                           	psect	text18
  4489  0727                     __ptext18:	
  4490 ;; *************** function _ADC_Initialize *****************
  4491 ;; Defined at:
  4492 ;;		line 64 in file "mcc_generated_files/adc.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;		None
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;		None
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  1    wreg      void 
  4499 ;; Registers used:
  4500 ;;		wreg, status,2
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4506 ;;      Params:         0       0       0       0
  4507 ;;      Locals:         0       0       0       0
  4508 ;;      Temps:          0       0       0       0
  4509 ;;      Totals:         0       0       0       0
  4510 ;;Total ram usage:        0 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    2
  4513 ;; This function calls:
  4514 ;;		Nothing
  4515 ;; This function is called by:
  4516 ;;		_SYSTEM_Initialize
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           
  4521                           ;psect for function _ADC_Initialize
  4522  0727                     _ADC_Initialize:	
  4523                           
  4524                           ;adc.c: 69: ADCON0 = 0x01;
  4525                           
  4526                           ;incstack = 0
  4527                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4528  0727  3001               	movlw	1
  4529  0728  0021               	movlb	1	; select bank1
  4530  0729  009D               	movwf	29	;volatile
  4531                           
  4532                           ;adc.c: 72: ADCON1 = 0x00;
  4533  072A  019E               	clrf	30	;volatile
  4534                           
  4535                           ;adc.c: 75: ADCON2 = 0x00;
  4536  072B  019F               	clrf	31	;volatile
  4537                           
  4538                           ;adc.c: 78: ADRESL = 0x00;
  4539  072C  019B               	clrf	27	;volatile
  4540                           
  4541                           ;adc.c: 81: ADRESH = 0x00;
  4542  072D  019C               	clrf	28	;volatile
  4543  072E  0008               	return
  4544  072F                     __end_of_ADC_Initialize:	
  4545                           
  4546                           	psect	text19
  4547  06FF                     __ptext19:	
  4548 ;; *************** function _ADC_GetConversion *****************
  4549 ;; Defined at:
  4550 ;;		line 112 in file "mcc_generated_files/adc.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  channel         1    wreg     enum E4101
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  channel         1    5[COMMON] enum E4101
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  2    2[COMMON] unsigned int 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4564 ;;      Params:         2       0       0       0
  4565 ;;      Locals:         1       0       0       0
  4566 ;;      Temps:          1       0       0       0
  4567 ;;      Totals:         4       0       0       0
  4568 ;;Total ram usage:        4 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    2
  4571 ;; This function calls:
  4572 ;;		Nothing
  4573 ;; This function is called by:
  4574 ;;		_main
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           
  4579                           ;psect for function _ADC_GetConversion
  4580  06FF                     _ADC_GetConversion:	
  4581                           
  4582                           ;incstack = 0
  4583                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4584                           ;ADC_GetConversion@channel stored from wreg
  4585  06FF  00F5               	movwf	ADC_GetConversion@channel
  4586                           
  4587                           ;adc.c: 115: ADCON0bits.CHS = channel;
  4588  0700  0875               	movf	ADC_GetConversion@channel,w
  4589  0701  00F4               	movwf	??_ADC_GetConversion
  4590  0702  0DF4               	rlf	??_ADC_GetConversion,f
  4591  0703  0DF4               	rlf	??_ADC_GetConversion,f
  4592  0704  0021               	movlb	1	; select bank1
  4593  0705  081D               	movf	29,w	;volatile
  4594  0706  0674               	xorwf	??_ADC_GetConversion,w
  4595  0707  3983               	andlw	-125
  4596  0708  0674               	xorwf	??_ADC_GetConversion,w
  4597  0709  009D               	movwf	29	;volatile
  4598                           
  4599                           ;adc.c: 118: ADCON0bits.ADON = 1;
  4600  070A  141D               	bsf	29,0	;volatile
  4601                           
  4602                           ;adc.c: 120: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4603  070B  3003               	movlw	3
  4604  070C                     u1977:	
  4605  070C  0B89               	decfsz	9,f
  4606  070D  2F0C               	goto	u1977
  4607  070E  0000               	nop
  4608                           
  4609                           ;adc.c: 123: ADCON0bits.GO_nDONE = 1;
  4610  070F  0021               	movlb	1	; select bank1
  4611  0710  149D               	bsf	29,1	;volatile
  4612  0711                     l151:	
  4613                           ;adc.c: 127: {
  4614                           
  4615                           ;adc.c: 126: while (ADCON0bits.GO_nDONE)
  4616                           
  4617  0711  189D               	btfsc	29,1	;volatile
  4618  0712  2F11               	goto	l151
  4619                           
  4620                           ;adc.c: 128: }
  4621                           ;adc.c: 130: return ((ADRESH << 8) + ADRESL);
  4622  0713  081C               	movf	28,w	;volatile
  4623  0714  00F3               	movwf	?_ADC_GetConversion+1
  4624  0715  081B               	movf	27,w	;volatile
  4625  0716  00F2               	movwf	?_ADC_GetConversion
  4626  0717  0008               	return
  4627  0718                     __end_of_ADC_GetConversion:	
  4628                           
  4629                           	psect	intentry
  4630  0004                     __pintentry:	
  4631 ;; *************** function _INTERRUPT_InterruptManager *****************
  4632 ;; Defined at:
  4633 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;		None
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;		None
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  1    wreg      void 
  4640 ;; Registers used:
  4641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4647 ;;      Params:         0       0       0       0
  4648 ;;      Locals:         0       0       0       0
  4649 ;;      Temps:          1       0       0       0
  4650 ;;      Totals:         1       0       0       0
  4651 ;;Total ram usage:        1 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    1
  4654 ;; This function calls:
  4655 ;;		_EUSART_Receive_ISR
  4656 ;;		_EUSART_Transmit_ISR
  4657 ;; This function is called by:
  4658 ;;		Interrupt level 1
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662  0004                     _INTERRUPT_InterruptManager:	
  4663                           
  4664                           ;incstack = 0
  4665  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4666                           
  4667                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4668  0005  3180               	pagesel	$
  4669  0006  0020               	movlb	0	; select bank0
  4670  0007  087F               	movf	127,w
  4671  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  4672                           
  4673                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4674  0009  1F0B               	btfss	11,6	;volatile
  4675  000A  2815               	goto	i1l167
  4676  000B  0021               	movlb	1	; select bank1
  4677  000C  1E11               	btfss	17,4	;volatile
  4678  000D  2815               	goto	i1l167
  4679  000E  0020               	movlb	0	; select bank0
  4680  000F  1E11               	btfss	17,4	;volatile
  4681  0010  2815               	goto	i1l167
  4682                           
  4683                           ;interrupt_manager.c: 55: {
  4684                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  4685  0011  3186  2673  3180   	fcall	_EUSART_Transmit_ISR
  4686                           
  4687                           ;interrupt_manager.c: 57: }
  4688  0014  281F               	goto	i1l171
  4689  0015                     i1l167:	
  4690                           
  4691                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  4692  0015  1F0B               	btfss	11,6	;volatile
  4693  0016  281F               	goto	i1l171
  4694  0017  0021               	movlb	1	; select bank1
  4695  0018  1E91               	btfss	17,5	;volatile
  4696  0019  281F               	goto	i1l171
  4697  001A  0020               	movlb	0	; select bank0
  4698  001B  1E91               	btfss	17,5	;volatile
  4699  001C  281F               	goto	i1l171
  4700                           
  4701                           ;interrupt_manager.c: 59: {
  4702                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  4703  001D  3186  26C9         	fcall	_EUSART_Receive_ISR
  4704  001F                     i1l171:	
  4705                           ;interrupt_manager.c: 62: else
  4706                           ;interrupt_manager.c: 63: {
  4707                           
  4708                           ;interrupt_manager.c: 61: }
  4709                           
  4710  001F  0871               	movf	??_INTERRUPT_InterruptManager,w
  4711  0020  0020               	movlb	0	; select bank0
  4712  0021  00FF               	movwf	127
  4713  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4714  0023  0009               	retfie
  4715  0024                     __end_of_INTERRUPT_InterruptManager:	
  4716                           
  4717                           	psect	text21
  4718  0673                     __ptext21:	
  4719 ;; *************** function _EUSART_Transmit_ISR *****************
  4720 ;; Defined at:
  4721 ;;		line 155 in file "mcc_generated_files/eusart.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;		None
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;		None
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      void 
  4728 ;; Registers used:
  4729 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4735 ;;      Params:         0       0       0       0
  4736 ;;      Locals:         0       0       0       0
  4737 ;;      Temps:          1       0       0       0
  4738 ;;      Totals:         1       0       0       0
  4739 ;;Total ram usage:        1 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; This function calls:
  4742 ;;		Nothing
  4743 ;; This function is called by:
  4744 ;;		_INTERRUPT_InterruptManager
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           
  4749                           ;psect for function _EUSART_Transmit_ISR
  4750  0673                     _EUSART_Transmit_ISR:	
  4751                           
  4752                           ;eusart.c: 159: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4756  0673  3008               	movlw	8
  4757  0674  0020               	movlb	0	; select bank0
  4758  0675  026D               	subwf	_eusartTxBufferRemaining,w	;volatile
  4759  0676  1803               	skipnc
  4760  0677  2E8E               	goto	i1l111
  4761                           
  4762                           ;eusart.c: 160: {
  4763                           ;eusart.c: 161: TXREG = eusartTxBuffer[eusartTxTail++];
  4764  0678  087A               	movf	_eusartTxTail,w
  4765  0679  3E68               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  4766  067A  0086               	movwf	6
  4767  067B  3001               	movlw	1	; select bank2/3
  4768  067C  0087               	movwf	7
  4769  067D  0801               	movf	1,w
  4770  067E  0023               	movlb	3	; select bank3
  4771  067F  009A               	movwf	26	;volatile
  4772  0680  3001               	movlw	1
  4773  0681  00F0               	movwf	??_EUSART_Transmit_ISR
  4774  0682  0870               	movf	??_EUSART_Transmit_ISR,w
  4775  0683  07FA               	addwf	_eusartTxTail,f	;volatile
  4776                           
  4777                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4778  0684  3008               	movlw	8
  4779  0685  027A               	subwf	_eusartTxTail,w	;volatile
  4780  0686  1803               	btfsc	3,0
  4781                           
  4782                           ;eusart.c: 163: {
  4783                           ;eusart.c: 164: eusartTxTail = 0;
  4784  0687  01FA               	clrf	_eusartTxTail	;volatile
  4785                           
  4786                           ;eusart.c: 165: }
  4787                           ;eusart.c: 166: eusartTxBufferRemaining++;
  4788  0688  3001               	movlw	1
  4789  0689  00F0               	movwf	??_EUSART_Transmit_ISR
  4790  068A  0870               	movf	??_EUSART_Transmit_ISR,w
  4791  068B  0020               	movlb	0	; select bank0
  4792  068C  07ED               	addwf	_eusartTxBufferRemaining,f	;volatile
  4793                           
  4794                           ;eusart.c: 167: }
  4795  068D  0008               	return
  4796  068E                     i1l111:	
  4797                           
  4798                           ;eusart.c: 168: else
  4799                           ;eusart.c: 169: {
  4800                           ;eusart.c: 170: PIE1bits.TXIE = 0;
  4801  068E  0021               	movlb	1	; select bank1
  4802  068F  1211               	bcf	17,4	;volatile
  4803  0690  0008               	return
  4804  0691                     __end_of_EUSART_Transmit_ISR:	
  4805                           
  4806                           	psect	text22
  4807  06C9                     __ptext22:	
  4808 ;; *************** function _EUSART_Receive_ISR *****************
  4809 ;; Defined at:
  4810 ;;		line 174 in file "mcc_generated_files/eusart.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  1    wreg      void 
  4817 ;; Registers used:
  4818 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4824 ;;      Params:         0       0       0       0
  4825 ;;      Locals:         0       0       0       0
  4826 ;;      Temps:          1       0       0       0
  4827 ;;      Totals:         1       0       0       0
  4828 ;;Total ram usage:        1 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_INTERRUPT_InterruptManager
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           
  4838                           ;psect for function _EUSART_Receive_ISR
  4839  06C9                     _EUSART_Receive_ISR:	
  4840                           
  4841                           ;eusart.c: 177: if(1 == RCSTAbits.OERR)
  4842                           
  4843                           ;incstack = 0
  4844                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4845  06C9  0023               	movlb	3	; select bank3
  4846  06CA  1C9D               	btfss	29,1	;volatile
  4847  06CB  2ECE               	goto	i1l1466
  4848                           
  4849                           ;eusart.c: 178: {
  4850                           ;eusart.c: 181: RCSTAbits.CREN = 0;
  4851  06CC  121D               	bcf	29,4	;volatile
  4852                           
  4853                           ;eusart.c: 182: RCSTAbits.CREN = 1;
  4854  06CD  161D               	bsf	29,4	;volatile
  4855  06CE                     i1l1466:	
  4856                           
  4857                           ;eusart.c: 183: }
  4858                           ;eusart.c: 186: eusartRxBuffer[eusartRxHead++] = RCREG;
  4859  06CE  0819               	movf	25,w	;volatile
  4860  06CF  00F0               	movwf	??_EUSART_Receive_ISR
  4861  06D0  0020               	movlb	0	; select bank0
  4862  06D1  086C               	movf	_eusartRxHead,w
  4863  06D2  3E60               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  4864  06D3  0086               	movwf	6
  4865  06D4  3001               	movlw	1	; select bank2/3
  4866  06D5  0087               	movwf	7
  4867  06D6  0870               	movf	??_EUSART_Receive_ISR,w
  4868  06D7  0081               	movwf	1
  4869  06D8  3001               	movlw	1
  4870  06D9  00F0               	movwf	??_EUSART_Receive_ISR
  4871  06DA  0870               	movf	??_EUSART_Receive_ISR,w
  4872  06DB  07EC               	addwf	_eusartRxHead,f	;volatile
  4873                           
  4874                           ;eusart.c: 187: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4875  06DC  3008               	movlw	8
  4876  06DD  026C               	subwf	_eusartRxHead,w	;volatile
  4877  06DE  1803               	btfsc	3,0
  4878                           
  4879                           ;eusart.c: 188: {
  4880                           ;eusart.c: 189: eusartRxHead = 0;
  4881  06DF  01EC               	clrf	_eusartRxHead	;volatile
  4882                           
  4883                           ;eusart.c: 190: }
  4884                           ;eusart.c: 191: eusartRxCount++;
  4885  06E0  3001               	movlw	1
  4886  06E1  00F0               	movwf	??_EUSART_Receive_ISR
  4887  06E2  0870               	movf	??_EUSART_Receive_ISR,w
  4888  06E3  07EA               	addwf	_eusartRxCount,f	;volatile
  4889  06E4  0008               	return
  4890  06E5                     __end_of_EUSART_Receive_ISR:	
  4891  007E                     btemp	set	126	;btemp
  4892  007E                     int$flags	set	126
  4893  007E                     wtemp0	set	126


Data Sizes:
    Strings     285
    Constant    8
    Data        64
    BSS         23
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     74      78
    BANK1            80     72      74
    BANK2            80      0      80

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_27(CODE[4]), STR_24(CODE[4]), STR_22(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[7]), STR_17(CODE[4]), STR_15(CODE[4]), STR_13(CODE[4]), 
		 -> STR_11(CODE[4]), STR_9(CODE[4]), STR_7(CODE[4]), STR_5(CODE[4]), 
		 -> STR_3(CODE[4]), STR_1(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 4
		 -> main@result(BANK1[4]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_26(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> main@result(BANK1[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    write_and_wait@res	PTR unsigned char  size(2) Largest target is 7
		 -> STR_24(CODE[4]), STR_22(CODE[4]), STR_19(CODE[7]), STR_17(CODE[4]), 
		 -> STR_15(CODE[4]), STR_13(CODE[4]), STR_11(CODE[4]), STR_9(CODE[4]), 
		 -> STR_7(CODE[4]), STR_5(CODE[4]), STR_3(CODE[4]), 

    write_and_wait@line	PTR unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 

    write_and_wait@cmd	PTR unsigned char  size(2) Largest target is 48
		 -> STR_23(CODE[48]), STR_21(CODE[12]), STR_18(CODE[4]), STR_16(CODE[42]), 
		 -> STR_14(CODE[42]), STR_12(CODE[36]), STR_10(CODE[3]), STR_8(CODE[18]), 
		 -> STR_6(CODE[12]), STR_4(CODE[12]), STR_2(CODE[5]), 

    write_line@line	PTR unsigned char  size(2) Largest target is 64
		 -> main@command(BANK1[64]), STR_25(CODE[12]), STR_23(CODE[48]), STR_21(CODE[12]), 
		 -> STR_18(CODE[4]), STR_16(CODE[42]), STR_14(CODE[42]), STR_12(CODE[36]), 
		 -> STR_10(CODE[3]), STR_8(CODE[18]), STR_6(CODE[12]), STR_4(CODE[12]), 
		 -> STR_2(CODE[5]), 

    sp__read_line	PTR unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 


Critical Paths under _main in COMMON

    _main->_blink_leds
    _main->_strcmp
    _write_and_wait->_strcmp
    _write_line->_strcat
    _strcmp->_read_line
    _read_line->_EUSART_Read
    _sprintf->___lwdiv
    _SYSTEM_Initialize->_EUSART_Initialize

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _main->_write_and_wait
    _write_and_wait->_read_line
    _strcmp->_read_line

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                74    74      0    8490
                                             72 BANK0      2     2      0
                                              0 BANK1     72    72      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                            ___awmod
                         _blink_leds
                          _read_line
                            _sprintf
                             _strcat
                             _strcmp
                     _write_and_wait
                         _write_line
 ---------------------------------------------------------------------------------
 (1) _write_and_wait                                       6     2      4    3047
                                             66 BANK0      6     2      4
                          _read_line
                             _strcmp
                         _write_line
 ---------------------------------------------------------------------------------
 (1) _write_line                                           5     3      2     423
                                              6 COMMON     3     1      2
                                              0 BANK0      2     2      0
                       _EUSART_Write
                             _strcat (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               5     3      2     467
                                              5 COMMON     5     3      2
                          _read_line (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_line                                           67    67      0     367
                                              4 COMMON     1     1      0
                                              0 BANK0     66    66      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _strcat                                               4     3      1     208
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             24    20      4     793
                                              0 BANK0     16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _blink_leds                                           8     4      4    2054
                                              2 COMMON     8     4      4
                       _set_low_leds
 ---------------------------------------------------------------------------------
 (2) _set_low_leds                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     424
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   ___awmod
   _blink_leds
     _set_low_leds
   _read_line
     _EUSART_Read
   _sprintf
     ___lwdiv
   _strcat
   _strcmp
     _read_line (ARG)
       _EUSART_Read
   _write_and_wait
     _read_line
       _EUSART_Read
     _strcmp
       _read_line (ARG)
         _EUSART_Read
     _write_line
       _EUSART_Write
       _strcat (ARG)
   _write_line
     _EUSART_Write
     _strcat (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      F4       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4A      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     48      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      F4      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Jun 01 20:21:12 2017

                        __CFG_CP$OFF 0000                          __CFG_LVP$ON 0000  
                                l105 063C                                  l151 0711  
                                l241 0494                                  l233 046D  
                                l235 048C                                  l238 0490  
                                l339 0287                                  l293 04B8  
                                l299 04F4                                  u975 04E4  
                       ___awmod@sign 0078                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       ?_EUSART_Read 0070                          main@command 00A0  
                               l1500 04A9                                 l1412 05C0  
                               l1414 05C8                                 l1440 05B0  
                               l1432 0592                                 l1600 0610  
                               l1434 059E                                 l1602 061B  
                               l1418 05DF                                 l1444 05B9  
                               l1604 0623                                 l1380 04C4  
                               l1630 051C                                 l1622 0516  
                               l1632 0528                                 l1640 053D  
                               l1288 0655                                 l1392 0503  
                               l1618 050F                                 l1562 03ED  
                               l1386 04E6                                 l1802 0651  
                               l1810 05E8                                 l1644 0545  
                               l1636 0534                                 l1572 03FE  
                               l1556 03D5                                 l1812 0601  
                               l1590 03B3                                 l1902 01C6  
                               l1592 045B                                 l1498 0498  
                               l1578 041D                                 l1914 020C  
                               l1842 006D                                 l1588 0421  
                               l1916 020F                                 l1908 01E9  
                               l1860 00D6                                 l1926 023D  
                               l1854 00B3                                 l1872 011C  
                               l1848 0090                                 l1890 0185  
                               l1866 00F9                                 l1788 0631  
                               l1884 0162                                 l1878 013F  
                               l1896 01A8                                 STR_1 039B  
                               STR_2 0392                                 STR_3 03A3  
                               STR_4 0373                                 STR_5 03A3  
                               STR_6 035B                                 STR_7 03A3  
                               STR_8 0338                                 STR_9 03A3  
                               u1045 0595                                 u1065 059F  
                               u1075 05A9                                 u1085 05B1  
                               u1325 0413                                 _LATA 010C  
                               _LATB 010D                                 u1415 051F  
                               _LATC 010E                                 u1435 052E  
                               u1195 0477                                 u1445 0535  
                               u1900 025E                                 u1927 0243  
                               u1937 0465                                 u1947 0481  
                               u1957 049D                                 u1967 04B1  
                               u1977 070C                                 _WPUA 020C  
                               _WPUB 020D                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _main 0045  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               start 0024                        __CFG_MCLRE$ON 0000  
                      ?_EUSART_Write 0070       __size_of_OSCILLATOR_Initialize 0004  
      __end_of_OSCILLATOR_Initialize 0749                                ?_main 0070  
                              STR_10 03AA                                STR_11 03A3  
                              STR_20 039B                                STR_12 0314  
                              STR_13 03A3                                STR_21 037F  
                              STR_22 03A3                                STR_14 02EA  
                              STR_15 03A3                                STR_23 0290  
                              STR_24 03A3                                STR_16 02C0  
                              STR_17 03A3                                STR_25 0367  
                      __CFG_WDTE$OFF 0000                                STR_26 03A7  
                              STR_18 0397                                STR_27 039F  
                              STR_19 038B                                STR_28 034A  
                    __end_of___awmod 054A                      __end_of___lwdiv 05BE  
                              i1l111 068E                                i1l171 001F  
                              i1l167 0015                                _RCREG 0199  
                              _RCSTA 019D                                _TRISA 008C  
                              _TRISB 008D                                _TRISC 008E  
                              _TXREG 019A                                _TXSTA 019E  
                     _WDT_Initialize 0741                                main@c 00E4  
                     write_line@line 0076                                status 0003  
                              wtemp0 007E                      __end_of_sprintf 0460  
                    __initialization 0026                         __end_of_main 0288  
                     ??_EUSART_Write 0072                     ??_write_and_wait 0066  
                     __CFG_LPBOR$OFF 0000          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 0068               __end_of_WDT_Initialize 0745  
                             _ADCON0 009D                               _ADCON1 009E  
                             _ADCON2 009F                               _ADRESH 009C  
                             _ADRESL 009B                               _APFCON 011D  
                             _ANSELA 018C                               _ANSELB 018D  
                             _ANSELC 018E                               i1l1466 06CE  
                             _OSCCON 0099                               _SPBRGH 019C  
                             _SPBRGL 019B                               _WDTCON 0097  
                     __CFG_PWRTE$OFF 0000                       __CFG_STVREN$ON 0000  
                          ??___awmod 0076                            ??___lwdiv 0076  
                _EUSART_Transmit_ISR 0673                   write_and_wait@line 0067  
                    ___awmod@divisor 0072                      ___awmod@counter 0077  
                             _strcat 060B                               _strcmp 05BE  
                    ?_WDT_Initialize 0070             ADC_GetConversion@channel 0075  
                          ??_sprintf 0024                 ?_EUSART_Transmit_ISR 0070  
               __size_of_EUSART_Read 001F                    _SYSTEM_Initialize 0718  
            __end_of__initialization 0041                   ?_SYSTEM_Initialize 0070  
                     __pcstackCOMMON 0070                         __pidataBANK2 054A  
                ??_SYSTEM_Initialize 0073                       _OPTION_REGbits 0095  
          __end_of_SYSTEM_Initialize 0727                ??_EUSART_Transmit_ISR 0070  
                         __pbssBANK0 006A                           __pbssBANK1 00E8  
                         __pbssBANK2 0160                 __end_of_EUSART_Write 0654  
        __size_of_EUSART_Receive_ISR 001C                   __size_of_read_line 004D  
                         __pmaintext 0045                           __pintentry 0004  
                         _blink_leds 0460                              _BAUDCON 019F  
            __size_of_ADC_Initialize 0008                              ?_strcat 0072  
                            ?_strcmp 0075                        _eusartRxCount 006A  
                            ___awmod 0505                              ___lwdiv 058A  
                      ?_set_low_leds 0070                              __ptext1 0691  
                            __ptext2 05E5                              __ptext3 0630  
                            __ptext4 05BE                              __ptext5 04B8  
                            __ptext6 0654                              __ptext7 060B  
                            __ptext8 03AD                              __ptext9 058A  
                    __size_of_strcat 0025                      __size_of_strcmp 0027  
                  __end_of_hexpowers 0290                _OSCILLATOR_Initialize 0745  
                   ___awmod@dividend 0074                    __end_of_read_line 0505  
           ??_PIN_MANAGER_Initialize 0072           __size_of_SYSTEM_Initialize 000F  
                            main@err 00E6                              _sprintf 03AD  
                            clrloop0 0736                 end_of_initialization 0041  
                            init_ram 072F                              initloop 0730  
                  _EUSART_Initialize 06E5                   ?_EUSART_Initialize 0070  
                          _RCSTAbits 019D                          ?_blink_leds 0072  
                     ??_set_low_leds 0072                         __pstringtext 0288  
                            strcmp@r 0078                  ??_EUSART_Initialize 0072  
                   ??_WDT_Initialize 0072                            _PORTCbits 000E  
                   __CFG_FOSC$INTOSC 0000                __size_of_EUSART_Write 0024  
          __end_of_EUSART_Initialize 06FF                           main@result 00E0  
                         _write_line 05E5                         _EUSART_Write 0630  
                     _ADC_Initialize 0727               ?_OSCILLATOR_Initialize 0070  
                     __end_of_strcat 0630                       __end_of_strcmp 05E5  
                start_initialization 0026      __size_of_PIN_MANAGER_Initialize 001C  
                      ??_EUSART_Read 0072              __size_of_write_and_wait 001C  
                __size_of_blink_leds 0058                    write_and_wait@cmd 0062  
                  write_and_wait@res 0064               __end_of_ADC_Initialize 072F  
                        __pdataBANK2 0120                           read_line@c 0020  
                         read_line@i 0060                             ??_strcat 0073  
                           ??_strcmp 0077          __end_of_EUSART_Transmit_ISR 0691  
                        __pbssCOMMON 007A                            ___latbits 0001  
                          _adcResult 00E8                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                 __end_of_set_low_leds 0741  
         __end_of_EUSART_Receive_ISR 06E5           __size_of_EUSART_Initialize 001A  
                        sprintf@flag 0028                          sprintf@prec 002D  
                __end_of_EUSART_Read 0673                            __pnvBANK0 006D  
                   ___lwdiv@dividend 0074               _PIN_MANAGER_Initialize 06AD  
               EUSART_Read@readValue 0073                             ?___awmod 0072  
                           ?___lwdiv 0072                      ?_ADC_Initialize 0070  
                       _eusartRxHead 006C                         _eusartTxHead 007B  
                       _eusartRxTail 006B                         _eusartTxTail 007A  
                        ?_write_line 0076         ??_INTERRUPT_InterruptManager 0071  
            _eusartTxBufferRemaining 006D                            _hexpowers 0288  
                   ___lwdiv@quotient 0077                             ?_sprintf 0020  
                          _read_line 04B8                       _eusartRxBuffer 0160  
                     _eusartTxBuffer 0168                             _LATAbits 010C  
                           _LATCbits 010E                            clear_ram0 0735  
                           _PIE1bits 0091  __size_of_INTERRUPT_InterruptManager 0020  
                           _PIR1bits 0011                            main@F4456 0120  
                       ??_blink_leds 0076                           _ADCON0bits 009D  
                        write_line@i 0020                       _write_and_wait 0691  
                        _EUSART_Read 0654                           ?_read_line 0070  
                 __end_of_blink_leds 04B8                  __size_of_write_line 0026  
                  _ADC_GetConversion 06FF              ??_OSCILLATOR_Initialize 0072  
                 ?_ADC_GetConversion 0072                     __size_of___awmod 0045  
                   __size_of___lwdiv 0034                  ??_ADC_GetConversion 0074  
                         sprintf@idx 0029               __end_of_write_and_wait 06AD  
                         sprintf@val 002B                           strcat@from 0072  
              __size_of_set_low_leds 0006                      ___lwdiv@divisor 0072  
                    ___lwdiv@counter 0079                             __ptext10 0460  
                           __ptext11 073B                             __ptext12 0505  
                           __ptext21 0673                             __ptext13 0718  
                           __ptext22 06C9                             __ptext14 0741  
                           __ptext15 06AD                             __ptext16 0745  
                           __ptext17 06E5                             __ptext18 0727  
                           __ptext19 06FF                     __size_of_sprintf 00B3  
                      __size_of_main 0243            __end_of_ADC_GetConversion 0718  
                           int$flags 007E   __end_of_INTERRUPT_InterruptManager 0024  
         _INTERRUPT_InterruptManager 0004                         _set_low_leds 073B  
                    ?_write_and_wait 0062                           _INTCONbits 000B  
                        ??_read_line 0074              __size_of_WDT_Initialize 0004  
                           intlevel1 0000                            sprintf@ap 002A  
                          sprintf@sp 002E              ?_PIN_MANAGER_Initialize 0070  
                  __CFG_CLKOUTEN$OFF 0000                     ??_ADC_Initialize 0072  
                        blink_leds@c 0074                          blink_leds@i 0078  
                        blink_leds@n 0072                   _EUSART_Receive_ISR 06C9  
                       ??_write_line 0078                             sprintf@c 002F  
                           sprintf@f 0020                  ?_EUSART_Receive_ISR 0070  
                           strcat@cp 0075                             strcat@to 0074  
                           strcmp@s1 0079                             strcmp@s2 0075  
                 EUSART_Write@txData 0073         __size_of_EUSART_Transmit_ISR 001E  
     __end_of_PIN_MANAGER_Initialize 06C9                 ??_EUSART_Receive_ISR 0070  
                 __end_of_write_line 060B           __size_of_ADC_GetConversion 0019  
