

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jun 13 10:46:32 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F1508 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0113                     	;# 
   127  0114                     	;# 
   128  0115                     	;# 
   129  0116                     	;# 
   130  0117                     	;# 
   131  0118                     	;# 
   132  0119                     	;# 
   133  011D                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  018E                     	;# 
   137  0191                     	;# 
   138  0191                     	;# 
   139  0192                     	;# 
   140  0193                     	;# 
   141  0193                     	;# 
   142  0194                     	;# 
   143  0195                     	;# 
   144  0196                     	;# 
   145  0197                     	;# 
   146  0199                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019C                     	;# 
   151  019D                     	;# 
   152  019E                     	;# 
   153  019F                     	;# 
   154  020C                     	;# 
   155  020D                     	;# 
   156  0211                     	;# 
   157  0211                     	;# 
   158  0212                     	;# 
   159  0212                     	;# 
   160  0213                     	;# 
   161  0213                     	;# 
   162  0214                     	;# 
   163  0214                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0215                     	;# 
   167  0216                     	;# 
   168  0216                     	;# 
   169  0217                     	;# 
   170  0217                     	;# 
   171  0391                     	;# 
   172  0392                     	;# 
   173  0393                     	;# 
   174  0394                     	;# 
   175  0395                     	;# 
   176  0396                     	;# 
   177  0498                     	;# 
   178  0498                     	;# 
   179  0499                     	;# 
   180  049A                     	;# 
   181  049B                     	;# 
   182  049B                     	;# 
   183  049C                     	;# 
   184  049D                     	;# 
   185  049E                     	;# 
   186  049F                     	;# 
   187  0611                     	;# 
   188  0612                     	;# 
   189  0613                     	;# 
   190  0613                     	;# 
   191  0614                     	;# 
   192  0615                     	;# 
   193  0616                     	;# 
   194  0616                     	;# 
   195  0617                     	;# 
   196  0618                     	;# 
   197  0619                     	;# 
   198  0619                     	;# 
   199  061A                     	;# 
   200  061B                     	;# 
   201  061C                     	;# 
   202  061C                     	;# 
   203  0691                     	;# 
   204  0692                     	;# 
   205  0693                     	;# 
   206  0694                     	;# 
   207  0695                     	;# 
   208  0F0F                     	;# 
   209  0F10                     	;# 
   210  0F11                     	;# 
   211  0F12                     	;# 
   212  0F13                     	;# 
   213  0F14                     	;# 
   214  0F15                     	;# 
   215  0F16                     	;# 
   216  0F17                     	;# 
   217  0F18                     	;# 
   218  0F19                     	;# 
   219  0F1A                     	;# 
   220  0F1B                     	;# 
   221  0F1C                     	;# 
   222  0F1D                     	;# 
   223  0F1E                     	;# 
   224  0F1F                     	;# 
   225  0F20                     	;# 
   226  0F21                     	;# 
   227  0F22                     	;# 
   228  0F23                     	;# 
   229  0F24                     	;# 
   230  0F25                     	;# 
   231  0F26                     	;# 
   232  0F27                     	;# 
   233  0F28                     	;# 
   234  0F29                     	;# 
   235  0F2A                     	;# 
   236  0F2B                     	;# 
   237  0F2C                     	;# 
   238  0F2D                     	;# 
   239  0F2E                     	;# 
   240  0F2F                     	;# 
   241  0F8C                     	;# 
   242  0F8D                     	;# 
   243  0F91                     	;# 
   244  0F95                     	;# 
   245  0F96                     	;# 
   246  0F97                     	;# 
   247  0F9C                     	;# 
   248  0F9D                     	;# 
   249  0F9E                     	;# 
   250  0FE3                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  008C                     	;# 
   290  008D                     	;# 
   291  008E                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0093                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  010C                     	;# 
   307  010D                     	;# 
   308  010E                     	;# 
   309  0111                     	;# 
   310  0112                     	;# 
   311  0113                     	;# 
   312  0114                     	;# 
   313  0115                     	;# 
   314  0116                     	;# 
   315  0117                     	;# 
   316  0118                     	;# 
   317  0119                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020C                     	;# 
   340  020D                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0391                     	;# 
   357  0392                     	;# 
   358  0393                     	;# 
   359  0394                     	;# 
   360  0395                     	;# 
   361  0396                     	;# 
   362  0498                     	;# 
   363  0498                     	;# 
   364  0499                     	;# 
   365  049A                     	;# 
   366  049B                     	;# 
   367  049B                     	;# 
   368  049C                     	;# 
   369  049D                     	;# 
   370  049E                     	;# 
   371  049F                     	;# 
   372  0611                     	;# 
   373  0612                     	;# 
   374  0613                     	;# 
   375  0613                     	;# 
   376  0614                     	;# 
   377  0615                     	;# 
   378  0616                     	;# 
   379  0616                     	;# 
   380  0617                     	;# 
   381  0618                     	;# 
   382  0619                     	;# 
   383  0619                     	;# 
   384  061A                     	;# 
   385  061B                     	;# 
   386  061C                     	;# 
   387  061C                     	;# 
   388  0691                     	;# 
   389  0692                     	;# 
   390  0693                     	;# 
   391  0694                     	;# 
   392  0695                     	;# 
   393  0F0F                     	;# 
   394  0F10                     	;# 
   395  0F11                     	;# 
   396  0F12                     	;# 
   397  0F13                     	;# 
   398  0F14                     	;# 
   399  0F15                     	;# 
   400  0F16                     	;# 
   401  0F17                     	;# 
   402  0F18                     	;# 
   403  0F19                     	;# 
   404  0F1A                     	;# 
   405  0F1B                     	;# 
   406  0F1C                     	;# 
   407  0F1D                     	;# 
   408  0F1E                     	;# 
   409  0F1F                     	;# 
   410  0F20                     	;# 
   411  0F21                     	;# 
   412  0F22                     	;# 
   413  0F23                     	;# 
   414  0F24                     	;# 
   415  0F25                     	;# 
   416  0F26                     	;# 
   417  0F27                     	;# 
   418  0F28                     	;# 
   419  0F29                     	;# 
   420  0F2A                     	;# 
   421  0F2B                     	;# 
   422  0F2C                     	;# 
   423  0F2D                     	;# 
   424  0F2E                     	;# 
   425  0F2F                     	;# 
   426  0F8C                     	;# 
   427  0F8D                     	;# 
   428  0F91                     	;# 
   429  0F95                     	;# 
   430  0F96                     	;# 
   431  0F97                     	;# 
   432  0F9C                     	;# 
   433  0F9D                     	;# 
   434  0F9E                     	;# 
   435  0FE3                     	;# 
   436  0FE4                     	;# 
   437  0FE5                     	;# 
   438  0FE6                     	;# 
   439  0FE7                     	;# 
   440  0FE8                     	;# 
   441  0FE9                     	;# 
   442  0FEA                     	;# 
   443  0FEB                     	;# 
   444  0FED                     	;# 
   445  0FEE                     	;# 
   446  0FEF                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000D                     	;# 
   461  000E                     	;# 
   462  0011                     	;# 
   463  0012                     	;# 
   464  0013                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  008C                     	;# 
   475  008D                     	;# 
   476  008E                     	;# 
   477  0091                     	;# 
   478  0092                     	;# 
   479  0093                     	;# 
   480  0095                     	;# 
   481  0096                     	;# 
   482  0097                     	;# 
   483  0099                     	;# 
   484  009A                     	;# 
   485  009B                     	;# 
   486  009B                     	;# 
   487  009C                     	;# 
   488  009D                     	;# 
   489  009E                     	;# 
   490  009F                     	;# 
   491  010C                     	;# 
   492  010D                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  011D                     	;# 
   504  018C                     	;# 
   505  018D                     	;# 
   506  018E                     	;# 
   507  0191                     	;# 
   508  0191                     	;# 
   509  0192                     	;# 
   510  0193                     	;# 
   511  0193                     	;# 
   512  0194                     	;# 
   513  0195                     	;# 
   514  0196                     	;# 
   515  0197                     	;# 
   516  0199                     	;# 
   517  019A                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019D                     	;# 
   522  019E                     	;# 
   523  019F                     	;# 
   524  020C                     	;# 
   525  020D                     	;# 
   526  0211                     	;# 
   527  0211                     	;# 
   528  0212                     	;# 
   529  0212                     	;# 
   530  0213                     	;# 
   531  0213                     	;# 
   532  0214                     	;# 
   533  0214                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0215                     	;# 
   537  0216                     	;# 
   538  0216                     	;# 
   539  0217                     	;# 
   540  0217                     	;# 
   541  0391                     	;# 
   542  0392                     	;# 
   543  0393                     	;# 
   544  0394                     	;# 
   545  0395                     	;# 
   546  0396                     	;# 
   547  0498                     	;# 
   548  0498                     	;# 
   549  0499                     	;# 
   550  049A                     	;# 
   551  049B                     	;# 
   552  049B                     	;# 
   553  049C                     	;# 
   554  049D                     	;# 
   555  049E                     	;# 
   556  049F                     	;# 
   557  0611                     	;# 
   558  0612                     	;# 
   559  0613                     	;# 
   560  0613                     	;# 
   561  0614                     	;# 
   562  0615                     	;# 
   563  0616                     	;# 
   564  0616                     	;# 
   565  0617                     	;# 
   566  0618                     	;# 
   567  0619                     	;# 
   568  0619                     	;# 
   569  061A                     	;# 
   570  061B                     	;# 
   571  061C                     	;# 
   572  061C                     	;# 
   573  0691                     	;# 
   574  0692                     	;# 
   575  0693                     	;# 
   576  0694                     	;# 
   577  0695                     	;# 
   578  0F0F                     	;# 
   579  0F10                     	;# 
   580  0F11                     	;# 
   581  0F12                     	;# 
   582  0F13                     	;# 
   583  0F14                     	;# 
   584  0F15                     	;# 
   585  0F16                     	;# 
   586  0F17                     	;# 
   587  0F18                     	;# 
   588  0F19                     	;# 
   589  0F1A                     	;# 
   590  0F1B                     	;# 
   591  0F1C                     	;# 
   592  0F1D                     	;# 
   593  0F1E                     	;# 
   594  0F1F                     	;# 
   595  0F20                     	;# 
   596  0F21                     	;# 
   597  0F22                     	;# 
   598  0F23                     	;# 
   599  0F24                     	;# 
   600  0F25                     	;# 
   601  0F26                     	;# 
   602  0F27                     	;# 
   603  0F28                     	;# 
   604  0F29                     	;# 
   605  0F2A                     	;# 
   606  0F2B                     	;# 
   607  0F2C                     	;# 
   608  0F2D                     	;# 
   609  0F2E                     	;# 
   610  0F2F                     	;# 
   611  0F8C                     	;# 
   612  0F8D                     	;# 
   613  0F91                     	;# 
   614  0F95                     	;# 
   615  0F96                     	;# 
   616  0F97                     	;# 
   617  0F9C                     	;# 
   618  0F9D                     	;# 
   619  0F9E                     	;# 
   620  0FE3                     	;# 
   621  0FE4                     	;# 
   622  0FE5                     	;# 
   623  0FE6                     	;# 
   624  0FE7                     	;# 
   625  0FE8                     	;# 
   626  0FE9                     	;# 
   627  0FEA                     	;# 
   628  0FEB                     	;# 
   629  0FED                     	;# 
   630  0FEE                     	;# 
   631  0FEF                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0008                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0016                     	;# 
   653  0017                     	;# 
   654  0018                     	;# 
   655  0019                     	;# 
   656  001A                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  008C                     	;# 
   660  008D                     	;# 
   661  008E                     	;# 
   662  0091                     	;# 
   663  0092                     	;# 
   664  0093                     	;# 
   665  0095                     	;# 
   666  0096                     	;# 
   667  0097                     	;# 
   668  0099                     	;# 
   669  009A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  009F                     	;# 
   676  010C                     	;# 
   677  010D                     	;# 
   678  010E                     	;# 
   679  0111                     	;# 
   680  0112                     	;# 
   681  0113                     	;# 
   682  0114                     	;# 
   683  0115                     	;# 
   684  0116                     	;# 
   685  0117                     	;# 
   686  0118                     	;# 
   687  0119                     	;# 
   688  011D                     	;# 
   689  018C                     	;# 
   690  018D                     	;# 
   691  018E                     	;# 
   692  0191                     	;# 
   693  0191                     	;# 
   694  0192                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0197                     	;# 
   701  0199                     	;# 
   702  019A                     	;# 
   703  019B                     	;# 
   704  019B                     	;# 
   705  019C                     	;# 
   706  019D                     	;# 
   707  019E                     	;# 
   708  019F                     	;# 
   709  020C                     	;# 
   710  020D                     	;# 
   711  0211                     	;# 
   712  0211                     	;# 
   713  0212                     	;# 
   714  0212                     	;# 
   715  0213                     	;# 
   716  0213                     	;# 
   717  0214                     	;# 
   718  0214                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0215                     	;# 
   722  0216                     	;# 
   723  0216                     	;# 
   724  0217                     	;# 
   725  0217                     	;# 
   726  0391                     	;# 
   727  0392                     	;# 
   728  0393                     	;# 
   729  0394                     	;# 
   730  0395                     	;# 
   731  0396                     	;# 
   732  0498                     	;# 
   733  0498                     	;# 
   734  0499                     	;# 
   735  049A                     	;# 
   736  049B                     	;# 
   737  049B                     	;# 
   738  049C                     	;# 
   739  049D                     	;# 
   740  049E                     	;# 
   741  049F                     	;# 
   742  0611                     	;# 
   743  0612                     	;# 
   744  0613                     	;# 
   745  0613                     	;# 
   746  0614                     	;# 
   747  0615                     	;# 
   748  0616                     	;# 
   749  0616                     	;# 
   750  0617                     	;# 
   751  0618                     	;# 
   752  0619                     	;# 
   753  0619                     	;# 
   754  061A                     	;# 
   755  061B                     	;# 
   756  061C                     	;# 
   757  061C                     	;# 
   758  0691                     	;# 
   759  0692                     	;# 
   760  0693                     	;# 
   761  0694                     	;# 
   762  0695                     	;# 
   763  0F0F                     	;# 
   764  0F10                     	;# 
   765  0F11                     	;# 
   766  0F12                     	;# 
   767  0F13                     	;# 
   768  0F14                     	;# 
   769  0F15                     	;# 
   770  0F16                     	;# 
   771  0F17                     	;# 
   772  0F18                     	;# 
   773  0F19                     	;# 
   774  0F1A                     	;# 
   775  0F1B                     	;# 
   776  0F1C                     	;# 
   777  0F1D                     	;# 
   778  0F1E                     	;# 
   779  0F1F                     	;# 
   780  0F20                     	;# 
   781  0F21                     	;# 
   782  0F22                     	;# 
   783  0F23                     	;# 
   784  0F24                     	;# 
   785  0F25                     	;# 
   786  0F26                     	;# 
   787  0F27                     	;# 
   788  0F28                     	;# 
   789  0F29                     	;# 
   790  0F2A                     	;# 
   791  0F2B                     	;# 
   792  0F2C                     	;# 
   793  0F2D                     	;# 
   794  0F2E                     	;# 
   795  0F2F                     	;# 
   796  0F8C                     	;# 
   797  0F8D                     	;# 
   798  0F91                     	;# 
   799  0F95                     	;# 
   800  0F96                     	;# 
   801  0F97                     	;# 
   802  0F9C                     	;# 
   803  0F9D                     	;# 
   804  0F9E                     	;# 
   805  0FE3                     	;# 
   806  0FE4                     	;# 
   807  0FE5                     	;# 
   808  0FE6                     	;# 
   809  0FE7                     	;# 
   810  0FE8                     	;# 
   811  0FE9                     	;# 
   812  0FEA                     	;# 
   813  0FEB                     	;# 
   814  0FED                     	;# 
   815  0FEE                     	;# 
   816  0FEF                     	;# 
   817  0000                     	;# 
   818  0001                     	;# 
   819  0002                     	;# 
   820  0003                     	;# 
   821  0004                     	;# 
   822  0005                     	;# 
   823  0006                     	;# 
   824  0007                     	;# 
   825  0008                     	;# 
   826  0009                     	;# 
   827  000A                     	;# 
   828  000B                     	;# 
   829  000C                     	;# 
   830  000D                     	;# 
   831  000E                     	;# 
   832  0011                     	;# 
   833  0012                     	;# 
   834  0013                     	;# 
   835  0015                     	;# 
   836  0016                     	;# 
   837  0016                     	;# 
   838  0017                     	;# 
   839  0018                     	;# 
   840  0019                     	;# 
   841  001A                     	;# 
   842  001B                     	;# 
   843  001C                     	;# 
   844  008C                     	;# 
   845  008D                     	;# 
   846  008E                     	;# 
   847  0091                     	;# 
   848  0092                     	;# 
   849  0093                     	;# 
   850  0095                     	;# 
   851  0096                     	;# 
   852  0097                     	;# 
   853  0099                     	;# 
   854  009A                     	;# 
   855  009B                     	;# 
   856  009B                     	;# 
   857  009C                     	;# 
   858  009D                     	;# 
   859  009E                     	;# 
   860  009F                     	;# 
   861  010C                     	;# 
   862  010D                     	;# 
   863  010E                     	;# 
   864  0111                     	;# 
   865  0112                     	;# 
   866  0113                     	;# 
   867  0114                     	;# 
   868  0115                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  0118                     	;# 
   872  0119                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020C                     	;# 
   895  020D                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0391                     	;# 
   912  0392                     	;# 
   913  0393                     	;# 
   914  0394                     	;# 
   915  0395                     	;# 
   916  0396                     	;# 
   917  0498                     	;# 
   918  0498                     	;# 
   919  0499                     	;# 
   920  049A                     	;# 
   921  049B                     	;# 
   922  049B                     	;# 
   923  049C                     	;# 
   924  049D                     	;# 
   925  049E                     	;# 
   926  049F                     	;# 
   927  0611                     	;# 
   928  0612                     	;# 
   929  0613                     	;# 
   930  0613                     	;# 
   931  0614                     	;# 
   932  0615                     	;# 
   933  0616                     	;# 
   934  0616                     	;# 
   935  0617                     	;# 
   936  0618                     	;# 
   937  0619                     	;# 
   938  0619                     	;# 
   939  061A                     	;# 
   940  061B                     	;# 
   941  061C                     	;# 
   942  061C                     	;# 
   943  0691                     	;# 
   944  0692                     	;# 
   945  0693                     	;# 
   946  0694                     	;# 
   947  0695                     	;# 
   948  0F0F                     	;# 
   949  0F10                     	;# 
   950  0F11                     	;# 
   951  0F12                     	;# 
   952  0F13                     	;# 
   953  0F14                     	;# 
   954  0F15                     	;# 
   955  0F16                     	;# 
   956  0F17                     	;# 
   957  0F18                     	;# 
   958  0F19                     	;# 
   959  0F1A                     	;# 
   960  0F1B                     	;# 
   961  0F1C                     	;# 
   962  0F1D                     	;# 
   963  0F1E                     	;# 
   964  0F1F                     	;# 
   965  0F20                     	;# 
   966  0F21                     	;# 
   967  0F22                     	;# 
   968  0F23                     	;# 
   969  0F24                     	;# 
   970  0F25                     	;# 
   971  0F26                     	;# 
   972  0F27                     	;# 
   973  0F28                     	;# 
   974  0F29                     	;# 
   975  0F2A                     	;# 
   976  0F2B                     	;# 
   977  0F2C                     	;# 
   978  0F2D                     	;# 
   979  0F2E                     	;# 
   980  0F2F                     	;# 
   981  0F8C                     	;# 
   982  0F8D                     	;# 
   983  0F91                     	;# 
   984  0F95                     	;# 
   985  0F96                     	;# 
   986  0F97                     	;# 
   987  0F9C                     	;# 
   988  0F9D                     	;# 
   989  0F9E                     	;# 
   990  0FE3                     	;# 
   991  0FE4                     	;# 
   992  0FE5                     	;# 
   993  0FE6                     	;# 
   994  0FE7                     	;# 
   995  0FE8                     	;# 
   996  0FE9                     	;# 
   997  0FEA                     	;# 
   998  0FEB                     	;# 
   999  0FED                     	;# 
  1000  0FEE                     	;# 
  1001  0FEF                     	;# 
  1002  0000                     	;# 
  1003  0001                     	;# 
  1004  0002                     	;# 
  1005  0003                     	;# 
  1006  0004                     	;# 
  1007  0005                     	;# 
  1008  0006                     	;# 
  1009  0007                     	;# 
  1010  0008                     	;# 
  1011  0009                     	;# 
  1012  000A                     	;# 
  1013  000B                     	;# 
  1014  000C                     	;# 
  1015  000D                     	;# 
  1016  000E                     	;# 
  1017  0011                     	;# 
  1018  0012                     	;# 
  1019  0013                     	;# 
  1020  0015                     	;# 
  1021  0016                     	;# 
  1022  0016                     	;# 
  1023  0017                     	;# 
  1024  0018                     	;# 
  1025  0019                     	;# 
  1026  001A                     	;# 
  1027  001B                     	;# 
  1028  001C                     	;# 
  1029  008C                     	;# 
  1030  008D                     	;# 
  1031  008E                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0095                     	;# 
  1036  0096                     	;# 
  1037  0097                     	;# 
  1038  0099                     	;# 
  1039  009A                     	;# 
  1040  009B                     	;# 
  1041  009B                     	;# 
  1042  009C                     	;# 
  1043  009D                     	;# 
  1044  009E                     	;# 
  1045  009F                     	;# 
  1046  010C                     	;# 
  1047  010D                     	;# 
  1048  010E                     	;# 
  1049  0111                     	;# 
  1050  0112                     	;# 
  1051  0113                     	;# 
  1052  0114                     	;# 
  1053  0115                     	;# 
  1054  0116                     	;# 
  1055  0117                     	;# 
  1056  0118                     	;# 
  1057  0119                     	;# 
  1058  011D                     	;# 
  1059  018C                     	;# 
  1060  018D                     	;# 
  1061  018E                     	;# 
  1062  0191                     	;# 
  1063  0191                     	;# 
  1064  0192                     	;# 
  1065  0193                     	;# 
  1066  0193                     	;# 
  1067  0194                     	;# 
  1068  0195                     	;# 
  1069  0196                     	;# 
  1070  0197                     	;# 
  1071  0199                     	;# 
  1072  019A                     	;# 
  1073  019B                     	;# 
  1074  019B                     	;# 
  1075  019C                     	;# 
  1076  019D                     	;# 
  1077  019E                     	;# 
  1078  019F                     	;# 
  1079  020C                     	;# 
  1080  020D                     	;# 
  1081  0211                     	;# 
  1082  0211                     	;# 
  1083  0212                     	;# 
  1084  0212                     	;# 
  1085  0213                     	;# 
  1086  0213                     	;# 
  1087  0214                     	;# 
  1088  0214                     	;# 
  1089  0215                     	;# 
  1090  0215                     	;# 
  1091  0215                     	;# 
  1092  0216                     	;# 
  1093  0216                     	;# 
  1094  0217                     	;# 
  1095  0217                     	;# 
  1096  0391                     	;# 
  1097  0392                     	;# 
  1098  0393                     	;# 
  1099  0394                     	;# 
  1100  0395                     	;# 
  1101  0396                     	;# 
  1102  0498                     	;# 
  1103  0498                     	;# 
  1104  0499                     	;# 
  1105  049A                     	;# 
  1106  049B                     	;# 
  1107  049B                     	;# 
  1108  049C                     	;# 
  1109  049D                     	;# 
  1110  049E                     	;# 
  1111  049F                     	;# 
  1112  0611                     	;# 
  1113  0612                     	;# 
  1114  0613                     	;# 
  1115  0613                     	;# 
  1116  0614                     	;# 
  1117  0615                     	;# 
  1118  0616                     	;# 
  1119  0616                     	;# 
  1120  0617                     	;# 
  1121  0618                     	;# 
  1122  0619                     	;# 
  1123  0619                     	;# 
  1124  061A                     	;# 
  1125  061B                     	;# 
  1126  061C                     	;# 
  1127  061C                     	;# 
  1128  0691                     	;# 
  1129  0692                     	;# 
  1130  0693                     	;# 
  1131  0694                     	;# 
  1132  0695                     	;# 
  1133  0F0F                     	;# 
  1134  0F10                     	;# 
  1135  0F11                     	;# 
  1136  0F12                     	;# 
  1137  0F13                     	;# 
  1138  0F14                     	;# 
  1139  0F15                     	;# 
  1140  0F16                     	;# 
  1141  0F17                     	;# 
  1142  0F18                     	;# 
  1143  0F19                     	;# 
  1144  0F1A                     	;# 
  1145  0F1B                     	;# 
  1146  0F1C                     	;# 
  1147  0F1D                     	;# 
  1148  0F1E                     	;# 
  1149  0F1F                     	;# 
  1150  0F20                     	;# 
  1151  0F21                     	;# 
  1152  0F22                     	;# 
  1153  0F23                     	;# 
  1154  0F24                     	;# 
  1155  0F25                     	;# 
  1156  0F26                     	;# 
  1157  0F27                     	;# 
  1158  0F28                     	;# 
  1159  0F29                     	;# 
  1160  0F2A                     	;# 
  1161  0F2B                     	;# 
  1162  0F2C                     	;# 
  1163  0F2D                     	;# 
  1164  0F2E                     	;# 
  1165  0F2F                     	;# 
  1166  0F8C                     	;# 
  1167  0F8D                     	;# 
  1168  0F91                     	;# 
  1169  0F95                     	;# 
  1170  0F96                     	;# 
  1171  0F97                     	;# 
  1172  0F9C                     	;# 
  1173  0F9D                     	;# 
  1174  0F9E                     	;# 
  1175  0FE3                     	;# 
  1176  0FE4                     	;# 
  1177  0FE5                     	;# 
  1178  0FE6                     	;# 
  1179  0FE7                     	;# 
  1180  0FE8                     	;# 
  1181  0FE9                     	;# 
  1182  0FEA                     	;# 
  1183  0FEB                     	;# 
  1184  0FED                     	;# 
  1185  0FEE                     	;# 
  1186  0FEF                     	;# 
  1187                           
  1188                           	psect	idataBANK2
  1189  0555                     __pidataBANK2:	
  1190                           
  1191                           ;initializer for main@F4456
  1192  0555  3453               	retlw	83
  1193  0556  3455               	retlw	85
  1194  0557  3457               	retlw	87
  1195  0558  342C               	retlw	44
  1196  0559  3437               	retlw	55
  1197  055A  3438               	retlw	56
  1198  055B  3431               	retlw	49
  1199  055C  3437               	retlw	55
  1200  055D  3441               	retlw	65
  1201  055E  3438               	retlw	56
  1202  055F  3445               	retlw	69
  1203  0560  3442               	retlw	66
  1204  0561  3446               	retlw	70
  1205  0562  3436               	retlw	54
  1206  0563  3443               	retlw	67
  1207  0564  3442               	retlw	66
  1208  0565  3434               	retlw	52
  1209  0566  3442               	retlw	66
  1210  0567  3445               	retlw	69
  1211  0568  3433               	retlw	51
  1212  0569  3438               	retlw	56
  1213  056A  3431               	retlw	49
  1214  056B  3434               	retlw	52
  1215  056C  3433               	retlw	51
  1216  056D  3435               	retlw	53
  1217  056E  3432               	retlw	50
  1218  056F  3430               	retlw	48
  1219  0570  3438               	retlw	56
  1220  0571  3436               	retlw	54
  1221  0572  3437               	retlw	55
  1222  0573  3431               	retlw	49
  1223  0574  3439               	retlw	57
  1224  0575  3437               	retlw	55
  1225  0576  3435               	retlw	53
  1226  0577  3434               	retlw	52
  1227  0578  3444               	retlw	68
  1228  0579  342C               	retlw	44
  1229  057A  3400               	retlw	0
  1230  057B  3400               	retlw	0
  1231  057C  3400               	retlw	0
  1232  057D  3400               	retlw	0
  1233  057E  3400               	retlw	0
  1234  057F  3400               	retlw	0
  1235  0580  3400               	retlw	0
  1236  0581  3400               	retlw	0
  1237  0582  3400               	retlw	0
  1238  0583  3400               	retlw	0
  1239  0584  3400               	retlw	0
  1240  0585  3400               	retlw	0
  1241  0586  3400               	retlw	0
  1242  0587  3400               	retlw	0
  1243  0588  3400               	retlw	0
  1244  0589  3400               	retlw	0
  1245  058A  3400               	retlw	0
  1246  058B  3400               	retlw	0
  1247  058C  3400               	retlw	0
  1248  058D  3400               	retlw	0
  1249  058E  3400               	retlw	0
  1250  058F  3400               	retlw	0
  1251  0590  3400               	retlw	0
  1252  0591  3400               	retlw	0
  1253  0592  3400               	retlw	0
  1254  0593  3400               	retlw	0
  1255  0594  3400               	retlw	0
  1256                           
  1257                           	psect	stringtext
  1258  0299                     __pstringtext:	
  1259  0299                     _hexpowers:	
  1260  0299  3401               	retlw	1
  1261  029A  3400               	retlw	0
  1262  029B  3410               	retlw	16
  1263  029C  3400               	retlw	0
  1264  029D  3400               	retlw	0
  1265  029E  3401               	retlw	1
  1266  029F  3400               	retlw	0
  1267  02A0  3410               	retlw	16
  1268  02A1                     __end_of_hexpowers:	
  1269  02A1                     STR_23:	
  1270  02A1  3453               	retlw	83	;'S'
  1271  02A2  3455               	retlw	85	;'U'
  1272  02A3  3457               	retlw	87	;'W'
  1273  02A4  342C               	retlw	44	;','
  1274  02A5  3437               	retlw	55	;'7'
  1275  02A6  3438               	retlw	56	;'8'
  1276  02A7  3431               	retlw	49	;'1'
  1277  02A8  3437               	retlw	55	;'7'
  1278  02A9  3441               	retlw	65	;'A'
  1279  02AA  3438               	retlw	56	;'8'
  1280  02AB  3445               	retlw	69	;'E'
  1281  02AC  3442               	retlw	66	;'B'
  1282  02AD  3446               	retlw	70	;'F'
  1283  02AE  3436               	retlw	54	;'6'
  1284  02AF  3443               	retlw	67	;'C'
  1285  02B0  3442               	retlw	66	;'B'
  1286  02B1  3434               	retlw	52	;'4'
  1287  02B2  3442               	retlw	66	;'B'
  1288  02B3  3445               	retlw	69	;'E'
  1289  02B4  3433               	retlw	51	;'3'
  1290  02B5  3438               	retlw	56	;'8'
  1291  02B6  3431               	retlw	49	;'1'
  1292  02B7  3434               	retlw	52	;'4'
  1293  02B8  3433               	retlw	51	;'3'
  1294  02B9  3435               	retlw	53	;'5'
  1295  02BA  3432               	retlw	50	;'2'
  1296  02BB  3430               	retlw	48	;'0'
  1297  02BC  3438               	retlw	56	;'8'
  1298  02BD  3436               	retlw	54	;'6'
  1299  02BE  3437               	retlw	55	;'7'
  1300  02BF  3431               	retlw	49	;'1'
  1301  02C0  3439               	retlw	57	;'9'
  1302  02C1  3437               	retlw	55	;'7'
  1303  02C2  3435               	retlw	53	;'5'
  1304  02C3  3434               	retlw	52	;'4'
  1305  02C4  3444               	retlw	68	;'D'
  1306  02C5  342C               	retlw	44	;','
  1307  02C6  3441               	retlw	65	;'A'
  1308  02C7  3441               	retlw	65	;'A'
  1309  02C8  3442               	retlw	66	;'B'
  1310  02C9  3442               	retlw	66	;'B'
  1311  02CA  3443               	retlw	67	;'C'
  1312  02CB  3443               	retlw	67	;'C'
  1313  02CC  3444               	retlw	68	;'D'
  1314  02CD  3444               	retlw	68	;'D'
  1315  02CE  3445               	retlw	69	;'E'
  1316  02CF  3445               	retlw	69	;'E'
  1317  02D0  3400               	retlw	0
  1318  02D1                     STR_14:	
  1319  02D1  3450               	retlw	80	;'P'
  1320  02D2  3443               	retlw	67	;'C'
  1321  02D3  342C               	retlw	44	;','
  1322  02D4  3437               	retlw	55	;'7'
  1323  02D5  3438               	retlw	56	;'8'
  1324  02D6  3431               	retlw	49	;'1'
  1325  02D7  3437               	retlw	55	;'7'
  1326  02D8  3441               	retlw	65	;'A'
  1327  02D9  3438               	retlw	56	;'8'
  1328  02DA  3445               	retlw	69	;'E'
  1329  02DB  3442               	retlw	66	;'B'
  1330  02DC  3446               	retlw	70	;'F'
  1331  02DD  3436               	retlw	54	;'6'
  1332  02DE  3443               	retlw	67	;'C'
  1333  02DF  3442               	retlw	66	;'B'
  1334  02E0  3434               	retlw	52	;'4'
  1335  02E1  3442               	retlw	66	;'B'
  1336  02E2  3445               	retlw	69	;'E'
  1337  02E3  3433               	retlw	51	;'3'
  1338  02E4  3438               	retlw	56	;'8'
  1339  02E5  3431               	retlw	49	;'1'
  1340  02E6  3434               	retlw	52	;'4'
  1341  02E7  3433               	retlw	51	;'3'
  1342  02E8  3435               	retlw	53	;'5'
  1343  02E9  3432               	retlw	50	;'2'
  1344  02EA  3430               	retlw	48	;'0'
  1345  02EB  3438               	retlw	56	;'8'
  1346  02EC  3436               	retlw	54	;'6'
  1347  02ED  3437               	retlw	55	;'7'
  1348  02EE  3431               	retlw	49	;'1'
  1349  02EF  3439               	retlw	57	;'9'
  1350  02F0  3437               	retlw	55	;'7'
  1351  02F1  3435               	retlw	53	;'5'
  1352  02F2  3434               	retlw	52	;'4'
  1353  02F3  3444               	retlw	68	;'D'
  1354  02F4  342C               	retlw	44	;','
  1355  02F5  3431               	retlw	49	;'1'
  1356  02F6  3432               	retlw	50	;'2'
  1357  02F7  342C               	retlw	44	;','
  1358  02F8  3430               	retlw	48	;'0'
  1359  02F9  3432               	retlw	50	;'2'
  1360  02FA  3400               	retlw	0
  1361  02FB                     STR_16:	
  1362  02FB  3450               	retlw	80	;'P'
  1363  02FC  3443               	retlw	67	;'C'
  1364  02FD  342C               	retlw	44	;','
  1365  02FE  3443               	retlw	67	;'C'
  1366  02FF  3430               	retlw	48	;'0'
  1367  0300  3439               	retlw	57	;'9'
  1368  0301  3433               	retlw	51	;'3'
  1369  0302  3436               	retlw	54	;'6'
  1370  0303  3438               	retlw	56	;'8'
  1371  0304  3435               	retlw	53	;'5'
  1372  0305  3444               	retlw	68	;'D'
  1373  0306  3430               	retlw	48	;'0'
  1374  0307  3430               	retlw	48	;'0'
  1375  0308  3435               	retlw	53	;'5'
  1376  0309  3446               	retlw	70	;'F'
  1377  030A  3434               	retlw	52	;'4'
  1378  030B  3444               	retlw	68	;'D'
  1379  030C  3433               	retlw	51	;'3'
  1380  030D  3443               	retlw	67	;'C'
  1381  030E  3438               	retlw	56	;'8'
  1382  030F  3432               	retlw	50	;'2'
  1383  0310  3434               	retlw	52	;'4'
  1384  0311  3430               	retlw	48	;'0'
  1385  0312  3436               	retlw	54	;'6'
  1386  0313  3444               	retlw	68	;'D'
  1387  0314  3433               	retlw	51	;'3'
  1388  0315  3430               	retlw	48	;'0'
  1389  0316  3432               	retlw	50	;'2'
  1390  0317  3430               	retlw	48	;'0'
  1391  0318  3441               	retlw	65	;'A'
  1392  0319  3432               	retlw	50	;'2'
  1393  031A  3443               	retlw	67	;'C'
  1394  031B  3436               	retlw	54	;'6'
  1395  031C  3430               	retlw	48	;'0'
  1396  031D  3438               	retlw	56	;'8'
  1397  031E  342C               	retlw	44	;','
  1398  031F  3431               	retlw	49	;'1'
  1399  0320  3441               	retlw	65	;'A'
  1400  0321  342C               	retlw	44	;','
  1401  0322  3431               	retlw	49	;'1'
  1402  0323  3434               	retlw	52	;'4'
  1403  0324  3400               	retlw	0
  1404  0325                     STR_12:	
  1405  0325  3450               	retlw	80	;'P'
  1406  0326  3453               	retlw	83	;'S'
  1407  0327  342C               	retlw	44	;','
  1408  0328  3436               	retlw	54	;'6'
  1409  0329  3432               	retlw	50	;'2'
  1410  032A  3432               	retlw	50	;'2'
  1411  032B  3444               	retlw	68	;'D'
  1412  032C  3446               	retlw	70	;'F'
  1413  032D  3434               	retlw	52	;'4'
  1414  032E  3430               	retlw	48	;'0'
  1415  032F  3431               	retlw	49	;'1'
  1416  0330  3438               	retlw	56	;'8'
  1417  0331  3435               	retlw	53	;'5'
  1418  0332  3445               	retlw	69	;'E'
  1419  0333  3444               	retlw	68	;'D'
  1420  0334  3434               	retlw	52	;'4'
  1421  0335  3436               	retlw	54	;'6'
  1422  0336  3436               	retlw	54	;'6'
  1423  0337  3436               	retlw	54	;'6'
  1424  0338  3441               	retlw	65	;'A'
  1425  0339  3434               	retlw	52	;'4'
  1426  033A  3446               	retlw	70	;'F'
  1427  033B  3445               	retlw	69	;'E'
  1428  033C  3439               	retlw	57	;'9'
  1429  033D  3445               	retlw	69	;'E'
  1430  033E  3446               	retlw	70	;'F'
  1431  033F  3441               	retlw	65	;'A'
  1432  0340  3441               	retlw	65	;'A'
  1433  0341  3433               	retlw	51	;'3'
  1434  0342  3441               	retlw	65	;'A'
  1435  0343  3442               	retlw	66	;'B'
  1436  0344  3434               	retlw	52	;'4'
  1437  0345  3437               	retlw	55	;'7'
  1438  0346  3441               	retlw	65	;'A'
  1439  0347  3441               	retlw	65	;'A'
  1440  0348  3400               	retlw	0
  1441  0349                     STR_28:	
  1442  0349  3430               	retlw	48	;'0'
  1443  034A  3431               	retlw	49	;'1'
  1444  034B  3432               	retlw	50	;'2'
  1445  034C  3433               	retlw	51	;'3'
  1446  034D  3434               	retlw	52	;'4'
  1447  034E  3435               	retlw	53	;'5'
  1448  034F  3436               	retlw	54	;'6'
  1449  0350  3437               	retlw	55	;'7'
  1450  0351  3438               	retlw	56	;'8'
  1451  0352  3439               	retlw	57	;'9'
  1452  0353  3441               	retlw	65	;'A'
  1453  0354  3442               	retlw	66	;'B'
  1454  0355  3443               	retlw	67	;'C'
  1455  0356  3444               	retlw	68	;'D'
  1456  0357  3445               	retlw	69	;'E'
  1457  0358  3446               	retlw	70	;'F'
  1458  0359  3400               	retlw	0
  1459  035A                     STR_6:	
  1460  035A  3453               	retlw	83	;'S'
  1461  035B  3452               	retlw	82	;'R'
  1462  035C  342C               	retlw	44	;','
  1463  035D  3430               	retlw	48	;'0'
  1464  035E  3430               	retlw	48	;'0'
  1465  035F  3430               	retlw	48	;'0'
  1466  0360  3430               	retlw	48	;'0'
  1467  0361  3430               	retlw	48	;'0'
  1468  0362  3430               	retlw	48	;'0'
  1469  0363  3430               	retlw	48	;'0'
  1470  0364  3430               	retlw	48	;'0'
  1471  0365  3400               	retlw	0
  1472  0366                     STR_25:	
  1473  0366  3441               	retlw	65	;'A'
  1474  0367  342C               	retlw	44	;','
  1475  0368  3430               	retlw	48	;'0'
  1476  0369  3430               	retlw	48	;'0'
  1477  036A  3435               	retlw	53	;'5'
  1478  036B  3430               	retlw	48	;'0'
  1479  036C  342C               	retlw	44	;','
  1480  036D  3430               	retlw	48	;'0'
  1481  036E  3437               	retlw	55	;'7'
  1482  036F  3444               	retlw	68	;'D'
  1483  0370  3430               	retlw	48	;'0'
  1484  0371  3400               	retlw	0
  1485  0372                     STR_4:	
  1486  0372  3453               	retlw	83	;'S'
  1487  0373  3453               	retlw	83	;'S'
  1488  0374  342C               	retlw	44	;','
  1489  0375  3443               	retlw	67	;'C'
  1490  0376  3430               	retlw	48	;'0'
  1491  0377  3430               	retlw	48	;'0'
  1492  0378  3430               	retlw	48	;'0'
  1493  0379  3430               	retlw	48	;'0'
  1494  037A  3430               	retlw	48	;'0'
  1495  037B  3430               	retlw	48	;'0'
  1496  037C  3431               	retlw	49	;'1'
  1497  037D  3400               	retlw	0
  1498  037E                     STR_21:	
  1499  037E  3453               	retlw	83	;'S'
  1500  037F  3455               	retlw	85	;'U'
  1501  0380  3457               	retlw	87	;'W'
  1502  0381  342C               	retlw	44	;','
  1503  0382  3432               	retlw	50	;'2'
  1504  0383  3441               	retlw	65	;'A'
  1505  0384  3431               	retlw	49	;'1'
  1506  0385  3439               	retlw	57	;'9'
  1507  0386  342C               	retlw	44	;','
  1508  0387  3433               	retlw	51	;'3'
  1509  0388  3432               	retlw	50	;'2'
  1510  0389  3400               	retlw	0
  1511  038A                     STR_8:	
  1512  038A  3453               	retlw	83	;'S'
  1513  038B  344E               	retlw	78	;'N'
  1514  038C  342C               	retlw	44	;','
  1515  038D  3450               	retlw	80	;'P'
  1516  038E  3449               	retlw	73	;'I'
  1517  038F  3443               	retlw	67	;'C'
  1518  0390  3431               	retlw	49	;'1'
  1519  0391  3436               	retlw	54	;'6'
  1520  0392  3442               	retlw	66	;'B'
  1521  0393  344C               	retlw	76	;'L'
  1522  0394  3445               	retlw	69	;'E'
  1523  0395  3400               	retlw	0
  1524  0396                     STR_19:	
  1525  0396  3452               	retlw	82	;'R'
  1526  0397  3465               	retlw	101	;'e'
  1527  0398  3462               	retlw	98	;'b'
  1528  0399  346F               	retlw	111	;'o'
  1529  039A  346F               	retlw	111	;'o'
  1530  039B  3474               	retlw	116	;'t'
  1531  039C  3400               	retlw	0
  1532  039D                     STR_2:	
  1533  039D  3453               	retlw	83	;'S'
  1534  039E  3446               	retlw	70	;'F'
  1535  039F  342C               	retlw	44	;','
  1536  03A0  3431               	retlw	49	;'1'
  1537  03A1  3400               	retlw	0
  1538  03A2                     STR_18:	
  1539  03A2  3452               	retlw	82	;'R'
  1540  03A3  342C               	retlw	44	;','
  1541  03A4  3431               	retlw	49	;'1'
  1542  03A5  3400               	retlw	0
  1543  03A6                     STR_1:	
  1544  03A6  3443               	retlw	67	;'C'
  1545  03A7  344D               	retlw	77	;'M'
  1546  03A8  3444               	retlw	68	;'D'
  1547  03A9  3400               	retlw	0
  1548  03AA                     STR_27:	
  1549  03AA  3445               	retlw	69	;'E'
  1550  03AB  344E               	retlw	78	;'N'
  1551  03AC  3444               	retlw	68	;'D'
  1552  03AD  3400               	retlw	0
  1553  03AE                     STR_3:	
  1554  03AE  3441               	retlw	65	;'A'
  1555  03AF  344F               	retlw	79	;'O'
  1556  03B0  344B               	retlw	75	;'K'
  1557  03B1  3400               	retlw	0
  1558  03B2                     STR_26:	
  1559  03B2  3425               	retlw	37	;'%'
  1560  03B3  3458               	retlw	88	;'X'
  1561  03B4  3400               	retlw	0
  1562  03B5                     STR_10:	
  1563  03B5  3450               	retlw	80	;'P'
  1564  03B6  345A               	retlw	90	;'Z'
  1565  03B7  3400               	retlw	0
  1566  03A6                     
  1567                           ; #config settings
  1568  0000                     
  1569                           	psect	nvBANK0
  1570  006D                     __pnvBANK0:	
  1571  006D                     _eusartTxBufferRemaining:	
  1572  006D                     	ds	1
  1573  000E                     _PORTCbits	set	14
  1574  0011                     _PIR1bits	set	17
  1575  000B                     _INTCONbits	set	11
  1576  009D                     _ADCON0bits	set	157
  1577  009C                     _ADRESH	set	156
  1578  009B                     _ADRESL	set	155
  1579  009F                     _ADCON2	set	159
  1580  009E                     _ADCON1	set	158
  1581  009D                     _ADCON0	set	157
  1582  0091                     _PIE1bits	set	145
  1583  0097                     _WDTCON	set	151
  1584  0099                     _OSCCON	set	153
  1585  0095                     _OPTION_REGbits	set	149
  1586  008E                     _TRISC	set	142
  1587  008D                     _TRISB	set	141
  1588  008C                     _TRISA	set	140
  1589  010E                     _LATCbits	set	270
  1590  010C                     _LATAbits	set	268
  1591  011D                     _APFCON	set	285
  1592  010E                     _LATC	set	270
  1593  010D                     _LATB	set	269
  1594  010C                     _LATA	set	268
  1595  0199                     _RCREG	set	409
  1596  019D                     _RCSTAbits	set	413
  1597  019A                     _TXREG	set	410
  1598  019C                     _SPBRGH	set	412
  1599  019B                     _SPBRGL	set	411
  1600  019E                     _TXSTA	set	414
  1601  019D                     _RCSTA	set	413
  1602  019F                     _BAUDCON	set	415
  1603  018C                     _ANSELA	set	396
  1604  018D                     _ANSELB	set	397
  1605  018E                     _ANSELC	set	398
  1606  020C                     _WPUA	set	524
  1607  020D                     _WPUB	set	525
  1608                           
  1609                           	psect	cinit
  1610  0026                     start_initialization:	
  1611  0026                     __initialization:	
  1612                           
  1613                           ; Initialize objects allocated to BANK2
  1614  0026  3055               	movlw	low __pidataBANK2
  1615  0027  0084               	movwf	4
  1616  0028  3085               	movlw	(high __pidataBANK2)| (0+128)
  1617  0029  0085               	movwf	5
  1618  002A  3020               	movlw	low __pdataBANK2
  1619  002B  0086               	movwf	6
  1620  002C  3001               	movlw	high __pdataBANK2
  1621  002D  0087               	movwf	7
  1622  002E  3040               	movlw	64
  1623  002F  3187  273A  3180   	fcall	init_ram
  1624                           
  1625                           ; Clear objects allocated to COMMON
  1626  0032  01FA               	clrf	__pbssCOMMON& (0+127)
  1627  0033  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1628                           
  1629                           ; Clear objects allocated to BANK0
  1630  0034  01EA               	clrf	__pbssBANK0& (0+127)
  1631  0035  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  1632  0036  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  1633                           
  1634                           ; Clear objects allocated to BANK1
  1635  0037  0021               	movlb	1	; select bank1
  1636  0038  01E8               	clrf	__pbssBANK1& (0+127)
  1637  0039  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  1638                           
  1639                           ; Clear objects allocated to BANK2
  1640  003A  3060               	movlw	low __pbssBANK2
  1641  003B  0084               	movwf	4
  1642  003C  3001               	movlw	high __pbssBANK2
  1643  003D  0085               	movwf	5
  1644  003E  3010               	movlw	16
  1645  003F  3187  2740         	fcall	clear_ram0
  1646  0041                     end_of_initialization:	
  1647                           ;End of C runtime variable initialization code
  1648                           
  1649  0041                     __end_of__initialization:	
  1650  0041  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1651  0042  0020               	movlb	0
  1652  0043  3180  2845         	ljmp	_main	;jump to C main() function
  1653                           
  1654                           	psect	bssCOMMON
  1655  007A                     __pbssCOMMON:	
  1656  007A                     _eusartTxTail:	
  1657  007A                     	ds	1
  1658  007B                     _eusartTxHead:	
  1659  007B                     	ds	1
  1660                           
  1661                           	psect	bssBANK0
  1662  006A                     __pbssBANK0:	
  1663  006A                     _eusartRxCount:	
  1664  006A                     	ds	1
  1665  006B                     _eusartRxTail:	
  1666  006B                     	ds	1
  1667  006C                     _eusartRxHead:	
  1668  006C                     	ds	1
  1669                           
  1670                           	psect	bssBANK1
  1671  00E8                     __pbssBANK1:	
  1672  00E8                     _adcResult:	
  1673  00E8                     	ds	2
  1674                           
  1675                           	psect	bssBANK2
  1676  0160                     __pbssBANK2:	
  1677  0160                     _eusartRxBuffer:	
  1678  0160                     	ds	8
  1679  0168                     _eusartTxBuffer:	
  1680  0168                     	ds	8
  1681                           
  1682                           	psect	dataBANK2
  1683  0120                     __pdataBANK2:	
  1684  0120                     main@F4456:	
  1685  0120                     	ds	64
  1686                           
  1687                           	psect	inittext
  1688  073A                     init_ram:	
  1689  073A  00FE               	movwf	126
  1690  073B                     initloop:	
  1691  073B  0012               	moviw fsr0++
  1692  073C  001E               	movwi fsr1++
  1693  073D  0BFE               	decfsz	126,f
  1694  073E  2F3B               	goto	initloop
  1695  073F  3400               	retlw	0
  1696                           
  1697                           	psect	clrtext
  1698  0740                     clear_ram0:	
  1699                           ;	Called with FSR0 containing the base address, and
  1700                           ;	WREG with the size to clear
  1701                           
  1702  0740  0064               	clrwdt	;clear the watchdog before getting into this loop
  1703  0741                     clrloop0:	
  1704  0741  0180               	clrf	0	;clear RAM location pointed to by FSR
  1705  0742  3101               	addfsr 0,1
  1706  0743  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1707  0744  2F41               	goto	clrloop0	;have we reached the end yet?
  1708  0745  3400               	retlw	0	;all done for this memory range, return
  1709                           
  1710                           	psect	cstackBANK1
  1711  00A0                     __pcstackBANK1:	
  1712  00A0                     main@command:	
  1713                           
  1714                           ; 64 bytes @ 0x0
  1715  00A0                     	ds	64
  1716  00E0                     main@result:	
  1717                           
  1718                           ; 4 bytes @ 0x40
  1719  00E0                     	ds	4
  1720  00E4                     main@c:	
  1721                           
  1722                           ; 2 bytes @ 0x44
  1723  00E4                     	ds	2
  1724  00E6                     main@err:	
  1725                           
  1726                           ; 2 bytes @ 0x46
  1727  00E6                     	ds	2
  1728                           
  1729                           	psect	cstackCOMMON
  1730  0070                     __pcstackCOMMON:	
  1731  0070                     ?_OSCILLATOR_Initialize:	
  1732  0070                     ?_WDT_Initialize:	
  1733                           ; 1 bytes @ 0x0
  1734                           
  1735  0070                     ?_ADC_Initialize:	
  1736                           ; 1 bytes @ 0x0
  1737                           
  1738  0070                     ?_EUSART_Initialize:	
  1739                           ; 1 bytes @ 0x0
  1740                           
  1741  0070                     ?_PIN_MANAGER_Initialize:	
  1742                           ; 1 bytes @ 0x0
  1743                           
  1744  0070                     ?_SYSTEM_Initialize:	
  1745                           ; 1 bytes @ 0x0
  1746                           
  1747  0070                     ?_EUSART_Read:	
  1748                           ; 1 bytes @ 0x0
  1749                           
  1750  0070                     ?_EUSART_Write:	
  1751                           ; 1 bytes @ 0x0
  1752                           
  1753  0070                     ?_EUSART_Transmit_ISR:	
  1754                           ; 1 bytes @ 0x0
  1755                           
  1756  0070                     ??_EUSART_Transmit_ISR:	
  1757                           ; 1 bytes @ 0x0
  1758                           
  1759  0070                     ?_EUSART_Receive_ISR:	
  1760                           ; 1 bytes @ 0x0
  1761                           
  1762  0070                     ??_EUSART_Receive_ISR:	
  1763                           ; 1 bytes @ 0x0
  1764                           
  1765  0070                     ?_INTERRUPT_InterruptManager:	
  1766                           ; 1 bytes @ 0x0
  1767                           
  1768  0070                     ?_read_line:	
  1769                           ; 1 bytes @ 0x0
  1770                           
  1771  0070                     ?_main:	
  1772                           ; 1 bytes @ 0x0
  1773                           
  1774  0070                     ?_set_low_leds:	
  1775                           ; 1 bytes @ 0x0
  1776                           
  1777                           
  1778                           ; 2 bytes @ 0x0
  1779  0070                     	ds	1
  1780  0071                     ??_INTERRUPT_InterruptManager:	
  1781                           
  1782                           ; 1 bytes @ 0x1
  1783  0071                     	ds	1
  1784  0072                     ??_OSCILLATOR_Initialize:	
  1785  0072                     ??_WDT_Initialize:	
  1786                           ; 1 bytes @ 0x2
  1787                           
  1788  0072                     ??_ADC_Initialize:	
  1789                           ; 1 bytes @ 0x2
  1790                           
  1791  0072                     ??_EUSART_Initialize:	
  1792                           ; 1 bytes @ 0x2
  1793                           
  1794  0072                     ?_strcat:	
  1795                           ; 1 bytes @ 0x2
  1796                           
  1797  0072                     ??_PIN_MANAGER_Initialize:	
  1798                           ; 1 bytes @ 0x2
  1799                           
  1800  0072                     ??_EUSART_Read:	
  1801                           ; 1 bytes @ 0x2
  1802                           
  1803  0072                     ??_EUSART_Write:	
  1804                           ; 1 bytes @ 0x2
  1805                           
  1806  0072                     ??_set_low_leds:	
  1807                           ; 1 bytes @ 0x2
  1808                           
  1809  0072                     ?_ADC_GetConversion:	
  1810                           ; 1 bytes @ 0x2
  1811                           
  1812  0072                     ?_blink_leds:	
  1813                           ; 2 bytes @ 0x2
  1814                           
  1815  0072                     ?___awmod:	
  1816                           ; 2 bytes @ 0x2
  1817                           
  1818  0072                     ?___lwdiv:	
  1819                           ; 2 bytes @ 0x2
  1820                           
  1821  0072                     strcat@from:	
  1822                           ; 2 bytes @ 0x2
  1823                           
  1824  0072                     blink_leds@n:	
  1825                           ; 1 bytes @ 0x2
  1826                           
  1827  0072                     ___awmod@divisor:	
  1828                           ; 2 bytes @ 0x2
  1829                           
  1830  0072                     ___lwdiv@divisor:	
  1831                           ; 2 bytes @ 0x2
  1832                           
  1833                           
  1834                           ; 2 bytes @ 0x2
  1835  0072                     	ds	1
  1836  0073                     ??_strcat:	
  1837  0073                     ??_SYSTEM_Initialize:	
  1838                           ; 1 bytes @ 0x3
  1839                           
  1840  0073                     EUSART_Read@readValue:	
  1841                           ; 1 bytes @ 0x3
  1842                           
  1843  0073                     EUSART_Write@txData:	
  1844                           ; 1 bytes @ 0x3
  1845                           
  1846                           
  1847                           ; 1 bytes @ 0x3
  1848  0073                     	ds	1
  1849  0074                     ??_ADC_GetConversion:	
  1850  0074                     ??_read_line:	
  1851                           ; 1 bytes @ 0x4
  1852                           
  1853  0074                     strcat@to:	
  1854                           ; 1 bytes @ 0x4
  1855                           
  1856  0074                     blink_leds@c:	
  1857                           ; 1 bytes @ 0x4
  1858                           
  1859  0074                     ___awmod@dividend:	
  1860                           ; 2 bytes @ 0x4
  1861                           
  1862  0074                     ___lwdiv@dividend:	
  1863                           ; 2 bytes @ 0x4
  1864                           
  1865                           
  1866                           ; 2 bytes @ 0x4
  1867  0074                     	ds	1
  1868  0075                     ?_strcmp:	
  1869  0075                     ADC_GetConversion@channel:	
  1870                           ; 2 bytes @ 0x5
  1871                           
  1872  0075                     strcat@cp:	
  1873                           ; 1 bytes @ 0x5
  1874                           
  1875  0075                     strcmp@s2:	
  1876                           ; 1 bytes @ 0x5
  1877                           
  1878                           
  1879                           ; 2 bytes @ 0x5
  1880  0075                     	ds	1
  1881  0076                     ??_blink_leds:	
  1882  0076                     ??___awmod:	
  1883                           ; 1 bytes @ 0x6
  1884                           
  1885  0076                     ??___lwdiv:	
  1886                           ; 1 bytes @ 0x6
  1887                           
  1888  0076                     ?_write_line:	
  1889                           ; 1 bytes @ 0x6
  1890                           
  1891  0076                     write_line@line:	
  1892                           ; 2 bytes @ 0x6
  1893                           
  1894                           
  1895                           ; 2 bytes @ 0x6
  1896  0076                     	ds	1
  1897  0077                     ??_strcmp:	
  1898  0077                     ___awmod@counter:	
  1899                           ; 1 bytes @ 0x7
  1900                           
  1901  0077                     ___lwdiv@quotient:	
  1902                           ; 1 bytes @ 0x7
  1903                           
  1904                           
  1905                           ; 2 bytes @ 0x7
  1906  0077                     	ds	1
  1907  0078                     ??_write_line:	
  1908  0078                     ___awmod@sign:	
  1909                           ; 1 bytes @ 0x8
  1910                           
  1911  0078                     strcmp@r:	
  1912                           ; 1 bytes @ 0x8
  1913                           
  1914  0078                     blink_leds@i:	
  1915                           ; 1 bytes @ 0x8
  1916                           
  1917                           
  1918                           ; 2 bytes @ 0x8
  1919  0078                     	ds	1
  1920  0079                     ___lwdiv@counter:	
  1921  0079                     strcmp@s1:	
  1922                           ; 1 bytes @ 0x9
  1923                           
  1924                           
  1925                           ; 1 bytes @ 0x9
  1926  0079                     	ds	1
  1927                           
  1928                           	psect	cstackBANK0
  1929  0020                     __pcstackBANK0:	
  1930  0020                     ?_sprintf:	
  1931  0020                     write_line@i:	
  1932                           ; 2 bytes @ 0x0
  1933                           
  1934  0020                     sprintf@f:	
  1935                           ; 2 bytes @ 0x0
  1936                           
  1937  0020                     read_line@c:	
  1938                           ; 2 bytes @ 0x0
  1939                           
  1940                           
  1941                           ; 64 bytes @ 0x0
  1942  0020                     	ds	4
  1943  0024                     ??_sprintf:	
  1944                           
  1945                           ; 1 bytes @ 0x4
  1946  0024                     	ds	4
  1947  0028                     sprintf@flag:	
  1948                           
  1949                           ; 1 bytes @ 0x8
  1950  0028                     	ds	1
  1951  0029                     sprintf@idx:	
  1952                           
  1953                           ; 1 bytes @ 0x9
  1954  0029                     	ds	1
  1955  002A                     sprintf@ap:	
  1956                           
  1957                           ; 1 bytes @ 0xA
  1958  002A                     	ds	1
  1959  002B                     sprintf@val:	
  1960                           
  1961                           ; 2 bytes @ 0xB
  1962  002B                     	ds	2
  1963  002D                     sprintf@prec:	
  1964                           
  1965                           ; 1 bytes @ 0xD
  1966  002D                     	ds	1
  1967  002E                     sprintf@sp:	
  1968                           
  1969                           ; 1 bytes @ 0xE
  1970  002E                     	ds	1
  1971  002F                     sprintf@c:	
  1972                           
  1973                           ; 1 bytes @ 0xF
  1974  002F                     	ds	49
  1975  0060                     read_line@i:	
  1976                           
  1977                           ; 2 bytes @ 0x40
  1978  0060                     	ds	2
  1979  0062                     ?_write_and_wait:	
  1980  0062                     write_and_wait@cmd:	
  1981                           ; 2 bytes @ 0x42
  1982                           
  1983                           
  1984                           ; 2 bytes @ 0x42
  1985  0062                     	ds	2
  1986  0064                     write_and_wait@res:	
  1987                           
  1988                           ; 2 bytes @ 0x44
  1989  0064                     	ds	2
  1990  0066                     ??_write_and_wait:	
  1991                           
  1992                           ; 1 bytes @ 0x46
  1993  0066                     	ds	1
  1994  0067                     write_and_wait@line:	
  1995                           
  1996                           ; 1 bytes @ 0x47
  1997  0067                     	ds	1
  1998  0068                     ??_main:	
  1999                           
  2000                           ; 1 bytes @ 0x48
  2001  0068                     	ds	2
  2002                           
  2003                           	psect	maintext
  2004  0045                     __pmaintext:	
  2005 ;;
  2006 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2007 ;;
  2008 ;; *************** function _main *****************
  2009 ;; Defined at:
  2010 ;;		line 184 in file "main.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;		None
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;  command        64    0[BANK1 ] unsigned char [64]
  2015 ;;  result          4   64[BANK1 ] unsigned char [4]
  2016 ;;  err             2   70[BANK1 ] int 
  2017 ;;  c               2   68[BANK1 ] int 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : B1F/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2027 ;;      Params:         0       0       0       0
  2028 ;;      Locals:         0       0      72       0
  2029 ;;      Temps:          0       2       0       0
  2030 ;;      Totals:         0       2      72       0
  2031 ;;Total ram usage:       74 bytes
  2032 ;; Hardware stack levels required when called:    5
  2033 ;; This function calls:
  2034 ;;		_ADC_GetConversion
  2035 ;;		_SYSTEM_Initialize
  2036 ;;		___awmod
  2037 ;;		_blink_leds
  2038 ;;		_read_line
  2039 ;;		_sprintf
  2040 ;;		_strcat
  2041 ;;		_strcmp
  2042 ;;		_write_and_wait
  2043 ;;		_write_line
  2044 ;; This function is called by:
  2045 ;;		Startup code after reset
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           
  2050                           ;psect for function _main
  2051  0045                     _main:	
  2052                           
  2053                           ;main.c: 187: SYSTEM_Initialize();
  2054                           
  2055                           ;incstack = 0
  2056                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2057  0045  3187  2723  3180   	fcall	_SYSTEM_Initialize
  2058                           
  2059                           ;main.c: 188: (INTCONbits.GIE = 1);
  2060  0048  178B               	bsf	11,7	;volatile
  2061                           
  2062                           ;main.c: 189: (INTCONbits.PEIE = 1);
  2063  0049  170B               	bsf	11,6	;volatile
  2064                           
  2065                           ;main.c: 191: do { LATAbits.LATA4 = 1; } while(0);
  2066  004A  0022               	movlb	2	; select bank2
  2067  004B  160C               	bsf	12,4	;volatile
  2068                           
  2069                           ;main.c: 193: int err = 0;
  2070  004C  0021               	movlb	1	; select bank1
  2071  004D  01E6               	clrf	main@err^(0+128)
  2072  004E  01E7               	clrf	(main@err+1)^(0+128)
  2073                           
  2074                           ;main.c: 196: err = strcmp(read_line(), "CMD");
  2075  004F  30A6               	movlw	low (STR_1| (0+32768))
  2076  0050  00F5               	movwf	strcmp@s2
  2077  0051  3083               	movlw	high (STR_1| (0+32768))
  2078  0052  00F6               	movwf	strcmp@s2+1
  2079  0053  3184  24C3  3180   	fcall	_read_line
  2080  0056  3185  25C9  3180   	fcall	_strcmp
  2081  0059  0876               	movf	?_strcmp+1,w
  2082  005A  0021               	movlb	1	; select bank1
  2083  005B  00E7               	movwf	(main@err+1)^(0+128)
  2084  005C  0875               	movf	?_strcmp,w
  2085  005D  00E6               	movwf	main@err^(0+128)
  2086                           
  2087                           ;main.c: 197: if (err) blink_leds(1, 1);
  2088  005E  0866               	movf	main@err^(0+128),w
  2089  005F  0467               	iorwf	(main@err+1)^(0+128),w
  2090  0060  1903               	btfsc	3,2
  2091  0061  286D               	goto	l1851
  2092  0062  3001               	movlw	1
  2093  0063  00F2               	movwf	blink_leds@n
  2094  0064  3000               	movlw	0
  2095  0065  00F3               	movwf	blink_leds@n+1
  2096  0066  3001               	movlw	1
  2097  0067  00F4               	movwf	blink_leds@c
  2098  0068  3000               	movlw	0
  2099  0069  00F5               	movwf	blink_leds@c+1
  2100  006A  3184  246B  3180   	fcall	_blink_leds
  2101  006D                     l1851:	
  2102                           
  2103                           ;main.c: 200: err = write_and_wait("SF,1", "AOK");
  2104  006D  309D               	movlw	low (STR_2| (0+32768))
  2105  006E  0020               	movlb	0	; select bank0
  2106  006F  00E2               	movwf	write_and_wait@cmd
  2107  0070  3083               	movlw	high (STR_2| (0+32768))
  2108  0071  00E3               	movwf	write_and_wait@cmd+1
  2109  0072  30AE               	movlw	low (STR_3| (0+32768))
  2110  0073  00E4               	movwf	write_and_wait@res
  2111  0074  3083               	movlw	high (STR_3| (0+32768))
  2112  0075  00E5               	movwf	write_and_wait@res+1
  2113  0076  3186  269C  3180   	fcall	_write_and_wait
  2114  0079  0020               	movlb	0	; select bank0
  2115  007A  0863               	movf	?_write_and_wait+1,w
  2116  007B  0021               	movlb	1	; select bank1
  2117  007C  00E7               	movwf	(main@err+1)^(0+128)
  2118  007D  0020               	movlb	0	; select bank0
  2119  007E  0862               	movf	?_write_and_wait,w
  2120  007F  0021               	movlb	1	; select bank1
  2121  0080  00E6               	movwf	main@err^(0+128)
  2122                           
  2123                           ;main.c: 201: if (err) blink_leds(1, 2);
  2124  0081  0866               	movf	main@err^(0+128),w
  2125  0082  0467               	iorwf	(main@err+1)^(0+128),w
  2126  0083  1903               	btfsc	3,2
  2127  0084  2890               	goto	l1857
  2128  0085  3001               	movlw	1
  2129  0086  00F2               	movwf	blink_leds@n
  2130  0087  3000               	movlw	0
  2131  0088  00F3               	movwf	blink_leds@n+1
  2132  0089  3002               	movlw	2
  2133  008A  00F4               	movwf	blink_leds@c
  2134  008B  3000               	movlw	0
  2135  008C  00F5               	movwf	blink_leds@c+1
  2136  008D  3184  246B  3180   	fcall	_blink_leds
  2137  0090                     l1857:	
  2138                           
  2139                           ;main.c: 205: err = write_and_wait("SS,C0000001", "AOK");
  2140  0090  3072               	movlw	low (STR_4| (0+32768))
  2141  0091  0020               	movlb	0	; select bank0
  2142  0092  00E2               	movwf	write_and_wait@cmd
  2143  0093  3083               	movlw	high (STR_4| (0+32768))
  2144  0094  00E3               	movwf	write_and_wait@cmd+1
  2145  0095  30AE               	movlw	low (STR_3| (0+32768))
  2146  0096  00E4               	movwf	write_and_wait@res
  2147  0097  3083               	movlw	high (STR_3| (0+32768))
  2148  0098  00E5               	movwf	write_and_wait@res+1
  2149  0099  3186  269C  3180   	fcall	_write_and_wait
  2150  009C  0020               	movlb	0	; select bank0
  2151  009D  0863               	movf	?_write_and_wait+1,w
  2152  009E  0021               	movlb	1	; select bank1
  2153  009F  00E7               	movwf	(main@err+1)^(0+128)
  2154  00A0  0020               	movlb	0	; select bank0
  2155  00A1  0862               	movf	?_write_and_wait,w
  2156  00A2  0021               	movlb	1	; select bank1
  2157  00A3  00E6               	movwf	main@err^(0+128)
  2158                           
  2159                           ;main.c: 206: if (err) blink_leds(1, 4);
  2160  00A4  0866               	movf	main@err^(0+128),w
  2161  00A5  0467               	iorwf	(main@err+1)^(0+128),w
  2162  00A6  1903               	btfsc	3,2
  2163  00A7  28B3               	goto	l1863
  2164  00A8  3001               	movlw	1
  2165  00A9  00F2               	movwf	blink_leds@n
  2166  00AA  3000               	movlw	0
  2167  00AB  00F3               	movwf	blink_leds@n+1
  2168  00AC  3004               	movlw	4
  2169  00AD  00F4               	movwf	blink_leds@c
  2170  00AE  3000               	movlw	0
  2171  00AF  00F5               	movwf	blink_leds@c+1
  2172  00B0  3184  246B  3180   	fcall	_blink_leds
  2173  00B3                     l1863:	
  2174                           
  2175                           ;main.c: 209: err = write_and_wait("SR,00000000", "AOK");
  2176  00B3  305A               	movlw	low (STR_6| (0+32768))
  2177  00B4  0020               	movlb	0	; select bank0
  2178  00B5  00E2               	movwf	write_and_wait@cmd
  2179  00B6  3083               	movlw	high (STR_6| (0+32768))
  2180  00B7  00E3               	movwf	write_and_wait@cmd+1
  2181  00B8  30AE               	movlw	low (STR_3| (0+32768))
  2182  00B9  00E4               	movwf	write_and_wait@res
  2183  00BA  3083               	movlw	high (STR_3| (0+32768))
  2184  00BB  00E5               	movwf	write_and_wait@res+1
  2185  00BC  3186  269C  3180   	fcall	_write_and_wait
  2186  00BF  0020               	movlb	0	; select bank0
  2187  00C0  0863               	movf	?_write_and_wait+1,w
  2188  00C1  0021               	movlb	1	; select bank1
  2189  00C2  00E7               	movwf	(main@err+1)^(0+128)
  2190  00C3  0020               	movlb	0	; select bank0
  2191  00C4  0862               	movf	?_write_and_wait,w
  2192  00C5  0021               	movlb	1	; select bank1
  2193  00C6  00E6               	movwf	main@err^(0+128)
  2194                           
  2195                           ;main.c: 210: if (err) blink_leds(2, 1);
  2196  00C7  0866               	movf	main@err^(0+128),w
  2197  00C8  0467               	iorwf	(main@err+1)^(0+128),w
  2198  00C9  1903               	btfsc	3,2
  2199  00CA  28D6               	goto	l1869
  2200  00CB  3002               	movlw	2
  2201  00CC  00F2               	movwf	blink_leds@n
  2202  00CD  3000               	movlw	0
  2203  00CE  00F3               	movwf	blink_leds@n+1
  2204  00CF  3001               	movlw	1
  2205  00D0  00F4               	movwf	blink_leds@c
  2206  00D1  3000               	movlw	0
  2207  00D2  00F5               	movwf	blink_leds@c+1
  2208  00D3  3184  246B  3180   	fcall	_blink_leds
  2209  00D6                     l1869:	
  2210                           
  2211                           ;main.c: 213: err = write_and_wait("SN,PIC16BLE", "AOK");
  2212  00D6  308A               	movlw	low (STR_8| (0+32768))
  2213  00D7  0020               	movlb	0	; select bank0
  2214  00D8  00E2               	movwf	write_and_wait@cmd
  2215  00D9  3083               	movlw	high (STR_8| (0+32768))
  2216  00DA  00E3               	movwf	write_and_wait@cmd+1
  2217  00DB  30AE               	movlw	low (STR_3| (0+32768))
  2218  00DC  00E4               	movwf	write_and_wait@res
  2219  00DD  3083               	movlw	high (STR_3| (0+32768))
  2220  00DE  00E5               	movwf	write_and_wait@res+1
  2221  00DF  3186  269C  3180   	fcall	_write_and_wait
  2222  00E2  0020               	movlb	0	; select bank0
  2223  00E3  0863               	movf	?_write_and_wait+1,w
  2224  00E4  0021               	movlb	1	; select bank1
  2225  00E5  00E7               	movwf	(main@err+1)^(0+128)
  2226  00E6  0020               	movlb	0	; select bank0
  2227  00E7  0862               	movf	?_write_and_wait,w
  2228  00E8  0021               	movlb	1	; select bank1
  2229  00E9  00E6               	movwf	main@err^(0+128)
  2230                           
  2231                           ;main.c: 214: if (err) blink_leds(2, 2);
  2232  00EA  0866               	movf	main@err^(0+128),w
  2233  00EB  0467               	iorwf	(main@err+1)^(0+128),w
  2234  00EC  1903               	btfsc	3,2
  2235  00ED  28F9               	goto	l1875
  2236  00EE  3002               	movlw	2
  2237  00EF  00F2               	movwf	blink_leds@n
  2238  00F0  3000               	movlw	0
  2239  00F1  00F3               	movwf	blink_leds@n+1
  2240  00F2  3002               	movlw	2
  2241  00F3  00F4               	movwf	blink_leds@c
  2242  00F4  3000               	movlw	0
  2243  00F5  00F5               	movwf	blink_leds@c+1
  2244  00F6  3184  246B  3180   	fcall	_blink_leds
  2245  00F9                     l1875:	
  2246                           
  2247                           ;main.c: 217: err = write_and_wait("PZ", "AOK");
  2248  00F9  30B5               	movlw	low (STR_10| (0+32768))
  2249  00FA  0020               	movlb	0	; select bank0
  2250  00FB  00E2               	movwf	write_and_wait@cmd
  2251  00FC  3083               	movlw	high (STR_10| (0+32768))
  2252  00FD  00E3               	movwf	write_and_wait@cmd+1
  2253  00FE  30AE               	movlw	low (STR_3| (0+32768))
  2254  00FF  00E4               	movwf	write_and_wait@res
  2255  0100  3083               	movlw	high (STR_3| (0+32768))
  2256  0101  00E5               	movwf	write_and_wait@res+1
  2257  0102  3186  269C  3180   	fcall	_write_and_wait
  2258  0105  0020               	movlb	0	; select bank0
  2259  0106  0863               	movf	?_write_and_wait+1,w
  2260  0107  0021               	movlb	1	; select bank1
  2261  0108  00E7               	movwf	(main@err+1)^(0+128)
  2262  0109  0020               	movlb	0	; select bank0
  2263  010A  0862               	movf	?_write_and_wait,w
  2264  010B  0021               	movlb	1	; select bank1
  2265  010C  00E6               	movwf	main@err^(0+128)
  2266                           
  2267                           ;main.c: 218: if (err) blink_leds(2, 6);
  2268  010D  0866               	movf	main@err^(0+128),w
  2269  010E  0467               	iorwf	(main@err+1)^(0+128),w
  2270  010F  1903               	btfsc	3,2
  2271  0110  291C               	goto	l1881
  2272  0111  3002               	movlw	2
  2273  0112  00F2               	movwf	blink_leds@n
  2274  0113  3000               	movlw	0
  2275  0114  00F3               	movwf	blink_leds@n+1
  2276  0115  3006               	movlw	6
  2277  0116  00F4               	movwf	blink_leds@c
  2278  0117  3000               	movlw	0
  2279  0118  00F5               	movwf	blink_leds@c+1
  2280  0119  3184  246B  3180   	fcall	_blink_leds
  2281  011C                     l1881:	
  2282                           
  2283                           ;main.c: 221: err = write_and_wait("PS,622DF40185ED4666A4FE9EFAA3AB47AA", "AOK");
  2284  011C  3025               	movlw	low (STR_12| (0+32768))
  2285  011D  0020               	movlb	0	; select bank0
  2286  011E  00E2               	movwf	write_and_wait@cmd
  2287  011F  3083               	movlw	high (STR_12| (0+32768))
  2288  0120  00E3               	movwf	write_and_wait@cmd+1
  2289  0121  30AE               	movlw	low (STR_3| (0+32768))
  2290  0122  00E4               	movwf	write_and_wait@res
  2291  0123  3083               	movlw	high (STR_3| (0+32768))
  2292  0124  00E5               	movwf	write_and_wait@res+1
  2293  0125  3186  269C  3180   	fcall	_write_and_wait
  2294  0128  0020               	movlb	0	; select bank0
  2295  0129  0863               	movf	?_write_and_wait+1,w
  2296  012A  0021               	movlb	1	; select bank1
  2297  012B  00E7               	movwf	(main@err+1)^(0+128)
  2298  012C  0020               	movlb	0	; select bank0
  2299  012D  0862               	movf	?_write_and_wait,w
  2300  012E  0021               	movlb	1	; select bank1
  2301  012F  00E6               	movwf	main@err^(0+128)
  2302                           
  2303                           ;main.c: 222: if (err) blink_leds(2, 7);
  2304  0130  0866               	movf	main@err^(0+128),w
  2305  0131  0467               	iorwf	(main@err+1)^(0+128),w
  2306  0132  1903               	btfsc	3,2
  2307  0133  293F               	goto	l1887
  2308  0134  3002               	movlw	2
  2309  0135  00F2               	movwf	blink_leds@n
  2310  0136  3000               	movlw	0
  2311  0137  00F3               	movwf	blink_leds@n+1
  2312  0138  3007               	movlw	7
  2313  0139  00F4               	movwf	blink_leds@c
  2314  013A  3000               	movlw	0
  2315  013B  00F5               	movwf	blink_leds@c+1
  2316  013C  3184  246B  3180   	fcall	_blink_leds
  2317  013F                     l1887:	
  2318                           
  2319                           ;main.c: 225: err = write_and_wait("PC,7817A8EBF6CB4BE3814352086719754D,12,02", "AOK");
  2320  013F  30D1               	movlw	low (STR_14| (0+32768))
  2321  0140  0020               	movlb	0	; select bank0
  2322  0141  00E2               	movwf	write_and_wait@cmd
  2323  0142  3082               	movlw	high (STR_14| (0+32768))
  2324  0143  00E3               	movwf	write_and_wait@cmd+1
  2325  0144  30AE               	movlw	low (STR_3| (0+32768))
  2326  0145  00E4               	movwf	write_and_wait@res
  2327  0146  3083               	movlw	high (STR_3| (0+32768))
  2328  0147  00E5               	movwf	write_and_wait@res+1
  2329  0148  3186  269C  3180   	fcall	_write_and_wait
  2330  014B  0020               	movlb	0	; select bank0
  2331  014C  0863               	movf	?_write_and_wait+1,w
  2332  014D  0021               	movlb	1	; select bank1
  2333  014E  00E7               	movwf	(main@err+1)^(0+128)
  2334  014F  0020               	movlb	0	; select bank0
  2335  0150  0862               	movf	?_write_and_wait,w
  2336  0151  0021               	movlb	1	; select bank1
  2337  0152  00E6               	movwf	main@err^(0+128)
  2338                           
  2339                           ;main.c: 226: if (err) blink_leds(2, 8);
  2340  0153  0866               	movf	main@err^(0+128),w
  2341  0154  0467               	iorwf	(main@err+1)^(0+128),w
  2342  0155  1903               	btfsc	3,2
  2343  0156  2962               	goto	l1893
  2344  0157  3002               	movlw	2
  2345  0158  00F2               	movwf	blink_leds@n
  2346  0159  3000               	movlw	0
  2347  015A  00F3               	movwf	blink_leds@n+1
  2348  015B  3008               	movlw	8
  2349  015C  00F4               	movwf	blink_leds@c
  2350  015D  3000               	movlw	0
  2351  015E  00F5               	movwf	blink_leds@c+1
  2352  015F  3184  246B  3180   	fcall	_blink_leds
  2353  0162                     l1893:	
  2354                           
  2355                           ;main.c: 229: err = write_and_wait("PC,C093685D005F4D3C82406D3020A2C608,1A,14", "AOK");
  2356  0162  30FB               	movlw	low (STR_16| (0+32768))
  2357  0163  0020               	movlb	0	; select bank0
  2358  0164  00E2               	movwf	write_and_wait@cmd
  2359  0165  3082               	movlw	high (STR_16| (0+32768))
  2360  0166  00E3               	movwf	write_and_wait@cmd+1
  2361  0167  30AE               	movlw	low (STR_3| (0+32768))
  2362  0168  00E4               	movwf	write_and_wait@res
  2363  0169  3083               	movlw	high (STR_3| (0+32768))
  2364  016A  00E5               	movwf	write_and_wait@res+1
  2365  016B  3186  269C  3180   	fcall	_write_and_wait
  2366  016E  0020               	movlb	0	; select bank0
  2367  016F  0863               	movf	?_write_and_wait+1,w
  2368  0170  0021               	movlb	1	; select bank1
  2369  0171  00E7               	movwf	(main@err+1)^(0+128)
  2370  0172  0020               	movlb	0	; select bank0
  2371  0173  0862               	movf	?_write_and_wait,w
  2372  0174  0021               	movlb	1	; select bank1
  2373  0175  00E6               	movwf	main@err^(0+128)
  2374                           
  2375                           ;main.c: 230: if (err) blink_leds(2, 9);
  2376  0176  0866               	movf	main@err^(0+128),w
  2377  0177  0467               	iorwf	(main@err+1)^(0+128),w
  2378  0178  1903               	btfsc	3,2
  2379  0179  2985               	goto	l1899
  2380  017A  3002               	movlw	2
  2381  017B  00F2               	movwf	blink_leds@n
  2382  017C  3000               	movlw	0
  2383  017D  00F3               	movwf	blink_leds@n+1
  2384  017E  3009               	movlw	9
  2385  017F  00F4               	movwf	blink_leds@c
  2386  0180  3000               	movlw	0
  2387  0181  00F5               	movwf	blink_leds@c+1
  2388  0182  3184  246B  3180   	fcall	_blink_leds
  2389  0185                     l1899:	
  2390                           
  2391                           ;main.c: 233: err = write_and_wait("R,1", "Reboot");
  2392  0185  30A2               	movlw	low (STR_18| (0+32768))
  2393  0186  0020               	movlb	0	; select bank0
  2394  0187  00E2               	movwf	write_and_wait@cmd
  2395  0188  3083               	movlw	high (STR_18| (0+32768))
  2396  0189  00E3               	movwf	write_and_wait@cmd+1
  2397  018A  3096               	movlw	low (STR_19| (0+32768))
  2398  018B  00E4               	movwf	write_and_wait@res
  2399  018C  3083               	movlw	high (STR_19| (0+32768))
  2400  018D  00E5               	movwf	write_and_wait@res+1
  2401  018E  3186  269C  3180   	fcall	_write_and_wait
  2402  0191  0020               	movlb	0	; select bank0
  2403  0192  0863               	movf	?_write_and_wait+1,w
  2404  0193  0021               	movlb	1	; select bank1
  2405  0194  00E7               	movwf	(main@err+1)^(0+128)
  2406  0195  0020               	movlb	0	; select bank0
  2407  0196  0862               	movf	?_write_and_wait,w
  2408  0197  0021               	movlb	1	; select bank1
  2409  0198  00E6               	movwf	main@err^(0+128)
  2410                           
  2411                           ;main.c: 234: if (err) blink_leds(2, 3);
  2412  0199  0866               	movf	main@err^(0+128),w
  2413  019A  0467               	iorwf	(main@err+1)^(0+128),w
  2414  019B  1903               	btfsc	3,2
  2415  019C  29A8               	goto	l1905
  2416  019D  3002               	movlw	2
  2417  019E  00F2               	movwf	blink_leds@n
  2418  019F  3000               	movlw	0
  2419  01A0  00F3               	movwf	blink_leds@n+1
  2420  01A1  3003               	movlw	3
  2421  01A2  00F4               	movwf	blink_leds@c
  2422  01A3  3000               	movlw	0
  2423  01A4  00F5               	movwf	blink_leds@c+1
  2424  01A5  3184  246B  3180   	fcall	_blink_leds
  2425  01A8                     l1905:	
  2426                           
  2427                           ;main.c: 237: err = strcmp(read_line(), "CMD");
  2428  01A8  30A6               	movlw	low (STR_1| (0+32768))
  2429  01A9  00F5               	movwf	strcmp@s2
  2430  01AA  3083               	movlw	high (STR_1| (0+32768))
  2431  01AB  00F6               	movwf	strcmp@s2+1
  2432  01AC  3184  24C3  3180   	fcall	_read_line
  2433  01AF  3185  25C9  3180   	fcall	_strcmp
  2434  01B2  0876               	movf	?_strcmp+1,w
  2435  01B3  0021               	movlb	1	; select bank1
  2436  01B4  00E7               	movwf	(main@err+1)^(0+128)
  2437  01B5  0875               	movf	?_strcmp,w
  2438  01B6  00E6               	movwf	main@err^(0+128)
  2439                           
  2440                           ;main.c: 238: if (err) blink_leds(2, 4);
  2441  01B7  0866               	movf	main@err^(0+128),w
  2442  01B8  0467               	iorwf	(main@err+1)^(0+128),w
  2443  01B9  1903               	btfsc	3,2
  2444  01BA  29C6               	goto	l1911
  2445  01BB  3002               	movlw	2
  2446  01BC  00F2               	movwf	blink_leds@n
  2447  01BD  3000               	movlw	0
  2448  01BE  00F3               	movwf	blink_leds@n+1
  2449  01BF  3004               	movlw	4
  2450  01C0  00F4               	movwf	blink_leds@c
  2451  01C1  3000               	movlw	0
  2452  01C2  00F5               	movwf	blink_leds@c+1
  2453  01C3  3184  246B  3180   	fcall	_blink_leds
  2454  01C6                     l1911:	
  2455                           
  2456                           ;main.c: 241: err = write_and_wait("SUW,2A19,32", "AOK");
  2457  01C6  307E               	movlw	low (STR_21| (0+32768))
  2458  01C7  0020               	movlb	0	; select bank0
  2459  01C8  00E2               	movwf	write_and_wait@cmd
  2460  01C9  3083               	movlw	high (STR_21| (0+32768))
  2461  01CA  00E3               	movwf	write_and_wait@cmd+1
  2462  01CB  30AE               	movlw	low (STR_3| (0+32768))
  2463  01CC  00E4               	movwf	write_and_wait@res
  2464  01CD  3083               	movlw	high (STR_3| (0+32768))
  2465  01CE  00E5               	movwf	write_and_wait@res+1
  2466  01CF  3186  269C  3180   	fcall	_write_and_wait
  2467  01D2  0020               	movlb	0	; select bank0
  2468  01D3  0863               	movf	?_write_and_wait+1,w
  2469  01D4  0021               	movlb	1	; select bank1
  2470  01D5  00E7               	movwf	(main@err+1)^(0+128)
  2471  01D6  0020               	movlb	0	; select bank0
  2472  01D7  0862               	movf	?_write_and_wait,w
  2473  01D8  0021               	movlb	1	; select bank1
  2474  01D9  00E6               	movwf	main@err^(0+128)
  2475                           
  2476                           ;main.c: 242: if (err) blink_leds(2, 5);
  2477  01DA  0866               	movf	main@err^(0+128),w
  2478  01DB  0467               	iorwf	(main@err+1)^(0+128),w
  2479  01DC  1903               	btfsc	3,2
  2480  01DD  29E9               	goto	l1917
  2481  01DE  3002               	movlw	2
  2482  01DF  00F2               	movwf	blink_leds@n
  2483  01E0  3000               	movlw	0
  2484  01E1  00F3               	movwf	blink_leds@n+1
  2485  01E2  3005               	movlw	5
  2486  01E3  00F4               	movwf	blink_leds@c
  2487  01E4  3000               	movlw	0
  2488  01E5  00F5               	movwf	blink_leds@c+1
  2489  01E6  3184  246B  3180   	fcall	_blink_leds
  2490  01E9                     l1917:	
  2491                           
  2492                           ;main.c: 245: err = write_and_wait("SUW,7817A8EBF6CB4BE3814352086719754D,AABBCCDDEE", "A
      +                          OK");
  2493  01E9  30A1               	movlw	low (STR_23| (0+32768))
  2494  01EA  0020               	movlb	0	; select bank0
  2495  01EB  00E2               	movwf	write_and_wait@cmd
  2496  01EC  3082               	movlw	high (STR_23| (0+32768))
  2497  01ED  00E3               	movwf	write_and_wait@cmd+1
  2498  01EE  30AE               	movlw	low (STR_3| (0+32768))
  2499  01EF  00E4               	movwf	write_and_wait@res
  2500  01F0  3083               	movlw	high (STR_3| (0+32768))
  2501  01F1  00E5               	movwf	write_and_wait@res+1
  2502  01F2  3186  269C  3180   	fcall	_write_and_wait
  2503  01F5  0020               	movlb	0	; select bank0
  2504  01F6  0863               	movf	?_write_and_wait+1,w
  2505  01F7  0021               	movlb	1	; select bank1
  2506  01F8  00E7               	movwf	(main@err+1)^(0+128)
  2507  01F9  0020               	movlb	0	; select bank0
  2508  01FA  0862               	movf	?_write_and_wait,w
  2509  01FB  0021               	movlb	1	; select bank1
  2510  01FC  00E6               	movwf	main@err^(0+128)
  2511                           
  2512                           ;main.c: 246: if (err) blink_leds(2, 10);
  2513  01FD  0866               	movf	main@err^(0+128),w
  2514  01FE  0467               	iorwf	(main@err+1)^(0+128),w
  2515  01FF  1903               	btfsc	3,2
  2516  0200  2A0C               	goto	l1923
  2517  0201  3002               	movlw	2
  2518  0202  00F2               	movwf	blink_leds@n
  2519  0203  3000               	movlw	0
  2520  0204  00F3               	movwf	blink_leds@n+1
  2521  0205  300A               	movlw	10
  2522  0206  00F4               	movwf	blink_leds@c
  2523  0207  3000               	movlw	0
  2524  0208  00F5               	movwf	blink_leds@c+1
  2525  0209  3184  246B  3180   	fcall	_blink_leds
  2526  020C                     l1923:	
  2527                           
  2528                           ;main.c: 249: int c = 0;
  2529  020C  0021               	movlb	1	; select bank1
  2530  020D  01E4               	clrf	main@c^(0+128)
  2531  020E  01E5               	clrf	(main@c+1)^(0+128)
  2532  020F                     l1925:	
  2533                           ;main.c: 250: while(1) {
  2534                           
  2535                           
  2536                           ;main.c: 252: if (c%5==0) {
  2537  020F  3005               	movlw	5
  2538  0210  00F2               	movwf	___awmod@divisor
  2539  0211  3000               	movlw	0
  2540  0212  00F3               	movwf	___awmod@divisor+1
  2541  0213  0865               	movf	(main@c+1)^(0+128),w
  2542  0214  00F5               	movwf	___awmod@dividend+1
  2543  0215  0864               	movf	main@c^(0+128),w
  2544  0216  00F4               	movwf	___awmod@dividend
  2545  0217  3185  2510  3180   	fcall	___awmod
  2546  021A  0872               	movf	?___awmod,w
  2547  021B  0473               	iorwf	?___awmod+1,w
  2548  021C  1D03               	btfss	3,2
  2549  021D  2A39               	goto	l1933
  2550                           
  2551                           ;main.c: 254: err = write_line("A,0050,07D0");
  2552  021E  3066               	movlw	low (STR_25| (0+32768))
  2553  021F  00F6               	movwf	write_line@line
  2554  0220  3083               	movlw	high (STR_25| (0+32768))
  2555  0221  00F7               	movwf	write_line@line+1
  2556  0222  3185  25F0  3180   	fcall	_write_line
  2557  0225  0877               	movf	?_write_line+1,w
  2558  0226  0021               	movlb	1	; select bank1
  2559  0227  00E7               	movwf	(main@err+1)^(0+128)
  2560  0228  0876               	movf	?_write_line,w
  2561  0229  00E6               	movwf	main@err^(0+128)
  2562                           
  2563                           ;main.c: 255: if (err) blink_leds(2, 14);
  2564  022A  0866               	movf	main@err^(0+128),w
  2565  022B  0467               	iorwf	(main@err+1)^(0+128),w
  2566  022C  1903               	btfsc	3,2
  2567  022D  2A39               	goto	l1933
  2568  022E  3002               	movlw	2
  2569  022F  00F2               	movwf	blink_leds@n
  2570  0230  3000               	movlw	0
  2571  0231  00F3               	movwf	blink_leds@n+1
  2572  0232  300E               	movlw	14
  2573  0233  00F4               	movwf	blink_leds@c
  2574  0234  3000               	movlw	0
  2575  0235  00F5               	movwf	blink_leds@c+1
  2576  0236  3184  246B  3180   	fcall	_blink_leds
  2577  0239                     l1933:	
  2578                           
  2579                           ;main.c: 256: }
  2580                           ;main.c: 257: c++;
  2581  0239  3001               	movlw	1
  2582  023A  0021               	movlb	1	; select bank1
  2583  023B  07E4               	addwf	main@c^(0+128),f
  2584  023C  3000               	movlw	0
  2585  023D  3DE5               	addwfc	(main@c+1)^(0+128),f
  2586                           
  2587                           ;main.c: 258: if(c>100) {
  2588  023E  0865               	movf	(main@c+1)^(0+128),w
  2589  023F  3A80               	xorlw	128
  2590  0240  0020               	movlb	0	; select bank0
  2591  0241  00E8               	movwf	??_main
  2592  0242  3080               	movlw	128
  2593  0243  0268               	subwf	??_main,w
  2594  0244  1D03               	skipz
  2595  0245  2A49               	goto	u1925
  2596  0246  3065               	movlw	101
  2597  0247  0021               	movlb	1	; select bank1
  2598  0248  0264               	subwf	main@c^(0+128),w
  2599  0249                     u1925:	
  2600  0249  1C03               	skipc
  2601  024A  2A4E               	goto	l1939
  2602                           
  2603                           ;main.c: 259: c=0;
  2604  024B  0021               	movlb	1	; select bank1
  2605  024C  01E4               	clrf	main@c^(0+128)
  2606  024D  01E5               	clrf	(main@c+1)^(0+128)
  2607  024E                     l1939:	
  2608                           
  2609                           ;main.c: 260: }
  2610                           ;main.c: 262: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2611  024E  300B               	movlw	11
  2612  024F  0020               	movlb	0	; select bank0
  2613  0250  00E9               	movwf	??_main+1
  2614  0251  3026               	movlw	38
  2615  0252  00E8               	movwf	??_main
  2616  0253  305D               	movlw	93
  2617  0254                     u1957:	
  2618  0254  0B89               	decfsz	9,f
  2619  0255  2A54               	goto	u1957
  2620  0256  0BE8               	decfsz	??_main,f
  2621  0257  2A54               	goto	u1957
  2622  0258  0BE9               	decfsz	??_main+1,f
  2623  0259  2A54               	goto	u1957
  2624  025A  3200               	nop2
  2625                           
  2626                           ;main.c: 264: adcResult = ADC_GetConversion(0x4);
  2627  025B  3004               	movlw	4
  2628  025C  3187  270A  3180   	fcall	_ADC_GetConversion
  2629  025F  0873               	movf	?_ADC_GetConversion+1,w
  2630  0260  0021               	movlb	1	; select bank1
  2631  0261  00E9               	movwf	(_adcResult+1)^(0+128)
  2632  0262  0872               	movf	?_ADC_GetConversion,w
  2633  0263  00E8               	movwf	_adcResult^(0+128)
  2634                           
  2635                           ;main.c: 265: char result[4];
  2636                           ;main.c: 266: sprintf(result, "%X", adcResult);
  2637  0264  30B2               	movlw	low (STR_26| (0+32768))
  2638  0265  0020               	movlb	0	; select bank0
  2639  0266  00A0               	movwf	sprintf@f
  2640  0267  3083               	movlw	high (STR_26| (0+32768))
  2641  0268  00A1               	movwf	sprintf@f+1
  2642  0269  0021               	movlb	1	; select bank1
  2643  026A  0869               	movf	(_adcResult+1)^(0+128),w
  2644  026B  0020               	movlb	0	; select bank0
  2645  026C  00A3               	movwf	?_sprintf+3
  2646  026D  0021               	movlb	1	; select bank1
  2647  026E  0868               	movf	_adcResult^(0+128),w
  2648  026F  0020               	movlb	0	; select bank0
  2649  0270  00A2               	movwf	?_sprintf+2
  2650  0271  30E0               	movlw	(low (main@result| 0))& (0+255)
  2651  0272  3183  23B8  3180   	fcall	_sprintf
  2652                           
  2653                           ;main.c: 267: char command[64]="SUW,7817A8EBF6CB4BE3814352086719754D,";
  2654  0275  3020               	movlw	low main@F4456
  2655  0276  0086               	movwf	6
  2656  0277  3001               	movlw	high main@F4456
  2657  0278  0087               	movwf	7
  2658  0279  30A0               	movlw	low main@command
  2659  027A  0084               	movwf	4
  2660  027B  3000               	movlw	high main@command
  2661  027C  0085               	movwf	5
  2662  027D  3040               	movlw	64
  2663  027E  0020               	movlb	0	; select bank0
  2664  027F  00E8               	movwf	??_main
  2665  0280                     u1930:	
  2666  0280  0016               	moviw fsr1++
  2667  0281  001A               	movwi fsr0++
  2668  0282  0BE8               	decfsz	??_main,f
  2669  0283  2A80               	goto	u1930
  2670                           
  2671                           ;main.c: 268: err=write_line(strcat(command,result));
  2672  0284  30E0               	movlw	(low (main@result| 0))& (0+255)
  2673  0285  00E8               	movwf	??_main
  2674  0286  0868               	movf	??_main,w
  2675  0287  00F2               	movwf	strcat@from
  2676  0288  30A0               	movlw	(low (main@command| 0))& (0+255)
  2677  0289  3186  2616  3180   	fcall	_strcat
  2678  028C  00F6               	movwf	write_line@line
  2679  028D  3000               	movlw	0
  2680  028E  00F7               	movwf	write_line@line+1
  2681  028F  3185  25F0  3180   	fcall	_write_line
  2682  0292  0877               	movf	?_write_line+1,w
  2683  0293  0021               	movlb	1	; select bank1
  2684  0294  00E7               	movwf	(main@err+1)^(0+128)
  2685  0295  0876               	movf	?_write_line,w
  2686  0296  00E6               	movwf	main@err^(0+128)
  2687  0297  2A0F               	goto	l1925
  2688  0298                     l340:	
  2689                           ;main.c: 282: while(1);
  2690                           
  2691                           ;main.c: 279: if (err) blink_leds(3,9);
  2692                           
  2693                           ;main.c: 278: err = strcmp(read_line(), "END");
  2694                           
  2695                           ;main.c: 272: }
  2696                           ;main.c: 275: do { LATAbits.LATA4 = 0; } while(0);
  2697                           
  2698  0298  2A98               	goto	l340
  2699  0299                     __end_of_main:	
  2700                           
  2701                           	psect	text1
  2702  069C                     __ptext1:	
  2703 ;; *************** function _write_and_wait *****************
  2704 ;; Defined at:
  2705 ;;		line 176 in file "main.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  cmd             2   66[BANK0 ] PTR unsigned char 
  2708 ;;		 -> STR_23(48), STR_21(12), STR_18(4), STR_16(42), 
  2709 ;;		 -> STR_14(42), STR_12(36), STR_10(3), STR_8(12), 
  2710 ;;		 -> STR_6(12), STR_4(12), STR_2(5), 
  2711 ;;  res             2   68[BANK0 ] PTR unsigned char 
  2712 ;;		 -> STR_24(4), STR_22(4), STR_19(7), STR_17(4), 
  2713 ;;		 -> STR_15(4), STR_13(4), STR_11(4), STR_9(4), 
  2714 ;;		 -> STR_7(4), STR_5(4), STR_3(4), 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  line            1   71[BANK0 ] PTR unsigned char 
  2717 ;;		 -> read_line@c(64), 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  2   66[BANK0 ] int 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2727 ;;      Params:         0       4       0       0
  2728 ;;      Locals:         0       1       0       0
  2729 ;;      Temps:          0       1       0       0
  2730 ;;      Totals:         0       6       0       0
  2731 ;;Total ram usage:        6 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    4
  2734 ;; This function calls:
  2735 ;;		_read_line
  2736 ;;		_strcmp
  2737 ;;		_write_line
  2738 ;; This function is called by:
  2739 ;;		_main
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           
  2744                           ;psect for function _write_and_wait
  2745  069C                     _write_and_wait:	
  2746                           
  2747                           ;main.c: 177: write_line(cmd);
  2748                           
  2749                           ;incstack = 0
  2750                           ; Regs used in _write_and_wait: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2751  069C  0020               	movlb	0	; select bank0
  2752  069D  0863               	movf	write_and_wait@cmd+1,w
  2753  069E  00F7               	movwf	write_line@line+1
  2754  069F  0862               	movf	write_and_wait@cmd,w
  2755  06A0  00F6               	movwf	write_line@line
  2756  06A1  3185  25F0  3186   	fcall	_write_line
  2757                           
  2758                           ;main.c: 178: char * line = read_line();
  2759  06A4  3184  24C3  3186   	fcall	_read_line
  2760  06A7  0020               	movlb	0	; select bank0
  2761  06A8  00E6               	movwf	??_write_and_wait
  2762  06A9  0866               	movf	??_write_and_wait,w
  2763  06AA  00E7               	movwf	write_and_wait@line
  2764                           
  2765                           ;main.c: 179: return strcmp(line, res);
  2766  06AB  0865               	movf	write_and_wait@res+1,w
  2767  06AC  00F6               	movwf	strcmp@s2+1
  2768  06AD  0864               	movf	write_and_wait@res,w
  2769  06AE  00F5               	movwf	strcmp@s2
  2770  06AF  0867               	movf	write_and_wait@line,w
  2771  06B0  3185  25C9         	fcall	_strcmp
  2772  06B2  0876               	movf	?_strcmp+1,w
  2773  06B3  0020               	movlb	0	; select bank0
  2774  06B4  00E3               	movwf	?_write_and_wait+1
  2775  06B5  0875               	movf	?_strcmp,w
  2776  06B6  00E2               	movwf	?_write_and_wait
  2777  06B7  0008               	return
  2778  06B8                     __end_of_write_and_wait:	
  2779                           
  2780                           	psect	text2
  2781  05F0                     __ptext2:	
  2782 ;; *************** function _write_line *****************
  2783 ;; Defined at:
  2784 ;;		line 162 in file "main.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;  line            2    6[COMMON] PTR unsigned char 
  2787 ;;		 -> main@command(64), STR_25(12), STR_23(48), STR_21(12), 
  2788 ;;		 -> STR_18(4), STR_16(42), STR_14(42), STR_12(36), 
  2789 ;;		 -> STR_10(3), STR_8(12), STR_6(12), STR_4(12), 
  2790 ;;		 -> STR_2(5), 
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  i               2    0[BANK0 ] int 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  2    6[COMMON] int 
  2795 ;; Registers used:
  2796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2802 ;;      Params:         2       0       0       0
  2803 ;;      Locals:         0       2       0       0
  2804 ;;      Temps:          1       0       0       0
  2805 ;;      Totals:         3       2       0       0
  2806 ;;Total ram usage:        5 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    3
  2809 ;; This function calls:
  2810 ;;		_EUSART_Write
  2811 ;; This function is called by:
  2812 ;;		_write_and_wait
  2813 ;;		_main
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function _write_line
  2819  05F0                     _write_line:	
  2820                           
  2821                           ;main.c: 163: int i = 0;
  2822                           
  2823                           ;incstack = 0
  2824                           ; Regs used in _write_line: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2825  05F0  0020               	movlb	0	; select bank0
  2826  05F1  01A0               	clrf	write_line@i
  2827  05F2  01A1               	clrf	write_line@i+1
  2828  05F3                     l1819:	
  2829                           ;main.c: 164: while(line[i] != '\0') {
  2830                           
  2831  05F3  0876               	movf	write_line@line,w
  2832  05F4  0720               	addwf	write_line@i,w
  2833  05F5  0084               	movwf	4
  2834  05F6  0877               	movf	write_line@line+1,w
  2835  05F7  3D21               	addwfc	write_line@i+1,w
  2836  05F8  0085               	movwf	5
  2837  05F9  0012               	moviw fsr0++
  2838  05FA  1903               	btfsc	3,2
  2839  05FB  2E0C               	goto	l1821
  2840                           
  2841                           ;main.c: 165: EUSART_Write(line[i++]);
  2842  05FC  0876               	movf	write_line@line,w
  2843  05FD  0720               	addwf	write_line@i,w
  2844  05FE  0084               	movwf	4
  2845  05FF  0877               	movf	write_line@line+1,w
  2846  0600  3D21               	addwfc	write_line@i+1,w
  2847  0601  0085               	movwf	5
  2848  0602  0800               	movf	0,w	;code access
  2849  0603  3186  263B  3185   	fcall	_EUSART_Write
  2850  0606  3001               	movlw	1
  2851  0607  0020               	movlb	0	; select bank0
  2852  0608  07A0               	addwf	write_line@i,f
  2853  0609  3000               	movlw	0
  2854  060A  3DA1               	addwfc	write_line@i+1,f
  2855  060B  2DF3               	goto	l1819
  2856  060C                     l1821:	
  2857                           
  2858                           ;main.c: 166: }
  2859                           ;main.c: 167: EUSART_Write('\r');
  2860  060C  300D               	movlw	13
  2861  060D  3186  263B  3185   	fcall	_EUSART_Write
  2862                           
  2863                           ;main.c: 168: EUSART_Write('\n');
  2864  0610  300A               	movlw	10
  2865  0611  3186  263B         	fcall	_EUSART_Write
  2866                           
  2867                           ;main.c: 169: return (0);
  2868  0613  01F6               	clrf	?_write_line
  2869  0614  01F7               	clrf	?_write_line+1
  2870  0615  0008               	return
  2871  0616                     __end_of_write_line:	
  2872                           
  2873                           	psect	text3
  2874  063B                     __ptext3:	
  2875 ;; *************** function _EUSART_Write *****************
  2876 ;; Defined at:
  2877 ;;		line 132 in file "mcc_generated_files/eusart.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  txData          1    wreg     unsigned char 
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;  txData          1    3[COMMON] unsigned char 
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2891 ;;      Params:         0       0       0       0
  2892 ;;      Locals:         1       0       0       0
  2893 ;;      Temps:          1       0       0       0
  2894 ;;      Totals:         2       0       0       0
  2895 ;;Total ram usage:        2 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    2
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_write_line
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           
  2906                           ;psect for function _EUSART_Write
  2907  063B                     _EUSART_Write:	
  2908                           
  2909                           ;incstack = 0
  2910                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  2911                           ;EUSART_Write@txData stored from wreg
  2912  063B  00F3               	movwf	EUSART_Write@txData
  2913  063C                     l1797:	
  2914                           ;eusart.c: 135: {
  2915                           
  2916                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  2917                           
  2918  063C  0020               	movlb	0	; select bank0
  2919  063D  086D               	movf	_eusartTxBufferRemaining,w	;volatile
  2920  063E  1903               	btfsc	3,2
  2921  063F  2E3C               	goto	l1797
  2922                           
  2923                           ;eusart.c: 136: }
  2924                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  2925  0640  0021               	movlb	1	; select bank1
  2926  0641  1A11               	btfsc	17,4	;volatile
  2927  0642  2E47               	goto	l105
  2928                           
  2929                           ;eusart.c: 139: {
  2930                           ;eusart.c: 140: TXREG = txData;
  2931  0643  0873               	movf	EUSART_Write@txData,w
  2932  0644  0023               	movlb	3	; select bank3
  2933  0645  009A               	movwf	26	;volatile
  2934                           
  2935                           ;eusart.c: 141: }
  2936  0646  2E5C               	goto	l1811
  2937  0647                     l105:	
  2938                           
  2939                           ;eusart.c: 142: else
  2940                           ;eusart.c: 143: {
  2941                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  2942  0647  1211               	bcf	17,4	;volatile
  2943                           
  2944                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  2945  0648  0873               	movf	EUSART_Write@txData,w
  2946  0649  00F2               	movwf	??_EUSART_Write
  2947  064A  087B               	movf	_eusartTxHead,w
  2948  064B  3E68               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  2949  064C  0086               	movwf	6
  2950  064D  3001               	movlw	1	; select bank2/3
  2951  064E  0087               	movwf	7
  2952  064F  0872               	movf	??_EUSART_Write,w
  2953  0650  0081               	movwf	1
  2954  0651  3001               	movlw	1
  2955  0652  00F2               	movwf	??_EUSART_Write
  2956  0653  0872               	movf	??_EUSART_Write,w
  2957  0654  07FB               	addwf	_eusartTxHead,f	;volatile
  2958                           
  2959                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2960  0655  3008               	movlw	8
  2961  0656  027B               	subwf	_eusartTxHead,w	;volatile
  2962  0657  1803               	btfsc	3,0
  2963                           
  2964                           ;eusart.c: 147: {
  2965                           ;eusart.c: 148: eusartTxHead = 0;
  2966  0658  01FB               	clrf	_eusartTxHead	;volatile
  2967                           
  2968                           ;eusart.c: 149: }
  2969                           ;eusart.c: 150: eusartTxBufferRemaining--;
  2970  0659  3001               	movlw	1
  2971  065A  0020               	movlb	0	; select bank0
  2972  065B  02ED               	subwf	_eusartTxBufferRemaining,f	;volatile
  2973  065C                     l1811:	
  2974                           
  2975                           ;eusart.c: 151: }
  2976                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  2977  065C  0021               	movlb	1	; select bank1
  2978  065D  1611               	bsf	17,4	;volatile
  2979  065E  0008               	return
  2980  065F                     __end_of_EUSART_Write:	
  2981                           
  2982                           	psect	text4
  2983  05C9                     __ptext4:	
  2984 ;; *************** function _strcmp *****************
  2985 ;; Defined at:
  2986 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcmp.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  s1              1    wreg     PTR const unsigned char 
  2989 ;;		 -> read_line@c(64), 
  2990 ;;  s2              2    5[COMMON] PTR const unsigned char 
  2991 ;;		 -> STR_27(4), STR_24(4), STR_22(4), STR_20(4), 
  2992 ;;		 -> STR_19(7), STR_17(4), STR_15(4), STR_13(4), 
  2993 ;;		 -> STR_11(4), STR_9(4), STR_7(4), STR_5(4), 
  2994 ;;		 -> STR_3(4), STR_1(4), 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  s1              1    9[COMMON] PTR const unsigned char 
  2997 ;;		 -> read_line@c(64), 
  2998 ;;  r               1    8[COMMON] char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  2    5[COMMON] int 
  3001 ;; Registers used:
  3002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3008 ;;      Params:         2       0       0       0
  3009 ;;      Locals:         2       0       0       0
  3010 ;;      Temps:          1       0       0       0
  3011 ;;      Totals:         5       0       0       0
  3012 ;;Total ram usage:        5 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    2
  3015 ;; This function calls:
  3016 ;;		Nothing
  3017 ;; This function is called by:
  3018 ;;		_write_and_wait
  3019 ;;		_main
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           
  3024                           ;psect for function _strcmp
  3025  05C9                     _strcmp:	
  3026                           
  3027                           ;incstack = 0
  3028                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  3029                           ;strcmp@s1 stored from wreg
  3030  05C9  00F9               	movwf	strcmp@s1
  3031  05CA  2DD3               	goto	l1419
  3032  05CB                     l1417:	
  3033  05CB  3001               	movlw	1
  3034  05CC  00F7               	movwf	??_strcmp
  3035  05CD  0877               	movf	??_strcmp,w
  3036  05CE  07F9               	addwf	strcmp@s1,f
  3037  05CF  3001               	movlw	1
  3038  05D0  07F5               	addwf	strcmp@s2,f
  3039  05D1  3000               	movlw	0
  3040  05D2  3DF6               	addwfc	strcmp@s2+1,f
  3041  05D3                     l1419:	
  3042  05D3  0879               	movf	strcmp@s1,w
  3043  05D4  0086               	movwf	6
  3044  05D5  0187               	clrf	7
  3045  05D6  0875               	movf	strcmp@s2,w
  3046  05D7  0084               	movwf	4
  3047  05D8  0876               	movf	strcmp@s2+1,w
  3048  05D9  0085               	movwf	5
  3049  05DA  0800               	movf	0,w	;code access
  3050  05DB  3AFF               	xorlw	255
  3051  05DC  3E01               	addlw	1
  3052  05DD  0701               	addwf	1,w
  3053  05DE  00F7               	movwf	??_strcmp
  3054  05DF  0877               	movf	??_strcmp,w
  3055  05E0  00F8               	movwf	strcmp@r
  3056  05E1  0878               	movf	strcmp@r,w
  3057  05E2  1D03               	btfss	3,2
  3058  05E3  2DEA               	goto	l1423
  3059  05E4  0879               	movf	strcmp@s1,w
  3060  05E5  0086               	movwf	6
  3061  05E6  0187               	clrf	7
  3062  05E7  0801               	movf	1,w
  3063  05E8  1D03               	btfss	3,2
  3064  05E9  2DCB               	goto	l1417
  3065  05EA                     l1423:	
  3066  05EA  0878               	movf	strcmp@r,w
  3067  05EB  00F5               	movwf	?_strcmp
  3068  05EC  01F6               	clrf	?_strcmp+1
  3069  05ED  1BF5               	btfsc	?_strcmp,7
  3070  05EE  03F6               	decf	?_strcmp+1,f
  3071  05EF  0008               	return
  3072  05F0                     __end_of_strcmp:	
  3073                           
  3074                           	psect	text5
  3075  04C3                     __ptext5:	
  3076 ;; *************** function _read_line *****************
  3077 ;; Defined at:
  3078 ;;		line 141 in file "main.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;		None
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  c              64    0[BANK0 ] unsigned char [64]
  3083 ;;  i               2   64[BANK0 ] int 
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  1    wreg      PTR unsigned char 
  3086 ;; Registers used:
  3087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3093 ;;      Params:         0       0       0       0
  3094 ;;      Locals:         0      66       0       0
  3095 ;;      Temps:          1       0       0       0
  3096 ;;      Totals:         1      66       0       0
  3097 ;;Total ram usage:       67 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    3
  3100 ;; This function calls:
  3101 ;;		_EUSART_Read
  3102 ;; This function is called by:
  3103 ;;		_write_and_wait
  3104 ;;		_main
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           
  3109                           ;psect for function _read_line
  3110  04C3                     _read_line:	
  3111  04C3                     l293:	
  3112                           ;incstack = 0
  3113                           ; Regs used in _read_line: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3114                           ;main.c: 142: char c[64];
  3115                           ;main.c: 144: do {
  3116                           
  3117                           
  3118                           ;main.c: 145: c[0] = EUSART_Read();
  3119  04C3  3186  265F  3184   	fcall	_EUSART_Read
  3120  04C6  00F4               	movwf	??_read_line
  3121  04C7  0874               	movf	??_read_line,w
  3122  04C8  0020               	movlb	0	; select bank0
  3123  04C9  00A0               	movwf	read_line@c
  3124                           
  3125                           ;main.c: 146: } while (c[0] == '\0');
  3126  04CA  0820               	movf	read_line@c,w
  3127  04CB  1903               	btfsc	3,2
  3128  04CC  2CC3               	goto	l293
  3129                           
  3130                           ;main.c: 148: int i = 0;
  3131  04CD  01E0               	clrf	read_line@i
  3132  04CE  01E1               	clrf	read_line@i+1
  3133  04CF                     l1385:	
  3134                           ;main.c: 149: do {
  3135                           
  3136                           
  3137                           ;main.c: 150: c[++i] = EUSART_Read();
  3138  04CF  3186  265F  3184   	fcall	_EUSART_Read
  3139  04D2  00F4               	movwf	??_read_line
  3140  04D3  3001               	movlw	1
  3141  04D4  0020               	movlb	0	; select bank0
  3142  04D5  07E0               	addwf	read_line@i,f
  3143  04D6  3000               	movlw	0
  3144  04D7  3DE1               	addwfc	read_line@i+1,f
  3145  04D8  0860               	movf	read_line@i,w
  3146  04D9  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3147  04DA  0086               	movwf	6
  3148  04DB  0187               	clrf	7
  3149  04DC  0874               	movf	??_read_line,w
  3150  04DD  0081               	movwf	1
  3151                           
  3152                           ;main.c: 151: } while (c[i] != '\n' && i < 64);
  3153  04DE  0860               	movf	read_line@i,w
  3154  04DF  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3155  04E0  0086               	movwf	6
  3156  04E1  0187               	clrf	7
  3157  04E2  300A               	movlw	10
  3158  04E3  0601               	xorwf	1,w
  3159  04E4  1903               	btfsc	3,2
  3160  04E5  2CF1               	goto	l1391
  3161  04E6  0861               	movf	read_line@i+1,w
  3162  04E7  3A80               	xorlw	128
  3163  04E8  00F4               	movwf	??_read_line
  3164  04E9  3080               	movlw	128
  3165  04EA  0274               	subwf	??_read_line,w
  3166  04EB  1D03               	skipz
  3167  04EC  2CEF               	goto	u985
  3168  04ED  3040               	movlw	64
  3169  04EE  0260               	subwf	read_line@i,w
  3170  04EF                     u985:	
  3171  04EF  1C03               	skipc
  3172  04F0  2CCF               	goto	l1385
  3173  04F1                     l1391:	
  3174                           
  3175                           ;main.c: 153: if (c[i] == '\n') c[i] = '\0';
  3176  04F1  0020               	movlb	0	; select bank0
  3177  04F2  0860               	movf	read_line@i,w
  3178  04F3  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3179  04F4  0086               	movwf	6
  3180  04F5  0187               	clrf	7
  3181  04F6  300A               	movlw	10
  3182  04F7  0601               	xorwf	1,w
  3183  04F8  1D03               	btfss	3,2
  3184  04F9  2CFF               	goto	l299
  3185  04FA  0860               	movf	read_line@i,w
  3186  04FB  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3187  04FC  0086               	movwf	6
  3188  04FD  0187               	clrf	7
  3189  04FE  0181               	clrf	1
  3190  04FF                     l299:	
  3191                           
  3192                           ;main.c: 154: if (c[i-1] == '\r') c[i-1] = '\0';
  3193  04FF  0860               	movf	read_line@i,w
  3194  0500  3EFF               	addlw	255
  3195  0501  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3196  0502  0086               	movwf	6
  3197  0503  0187               	clrf	7
  3198  0504  300D               	movlw	13
  3199  0505  0601               	xorwf	1,w
  3200  0506  1D03               	btfss	3,2
  3201  0507  2D0E               	goto	l1397
  3202  0508  0860               	movf	read_line@i,w
  3203  0509  3EFF               	addlw	255
  3204  050A  3E20               	addlw	(low (read_line@c| 0))& (0+255)
  3205  050B  0086               	movwf	6
  3206  050C  0187               	clrf	7
  3207  050D  0181               	clrf	1
  3208  050E                     l1397:	
  3209                           
  3210                           ;main.c: 155: return c;
  3211  050E  3020               	movlw	(low (read_line@c| 0))& (0+255)
  3212  050F  0008               	return
  3213  0510                     __end_of_read_line:	
  3214                           
  3215                           	psect	text6
  3216  065F                     __ptext6:	
  3217 ;; *************** function _EUSART_Read *****************
  3218 ;; Defined at:
  3219 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  readValue       1    3[COMMON] unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      unsigned char 
  3226 ;; Registers used:
  3227 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3233 ;;      Params:         0       0       0       0
  3234 ;;      Locals:         1       0       0       0
  3235 ;;      Temps:          1       0       0       0
  3236 ;;      Totals:         2       0       0       0
  3237 ;;Total ram usage:        2 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    2
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_read_line
  3244 ;;		_show_input_leds
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function _EUSART_Read
  3250  065F                     _EUSART_Read:	
  3251                           
  3252                           ;eusart.c: 114: uint8_t readValue = 0;
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3256  065F  01F3               	clrf	EUSART_Read@readValue
  3257  0660                     l1293:	
  3258                           ;eusart.c: 117: {
  3259                           
  3260                           ;eusart.c: 116: while(0 == eusartRxCount)
  3261                           
  3262  0660  0020               	movlb	0	; select bank0
  3263  0661  086A               	movf	_eusartRxCount,w	;volatile
  3264  0662  1903               	btfsc	3,2
  3265  0663  2E60               	goto	l1293
  3266                           
  3267                           ;eusart.c: 118: }
  3268                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  3269  0664  086B               	movf	_eusartRxTail,w
  3270  0665  3E60               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3271  0666  0086               	movwf	6
  3272  0667  3001               	movlw	1	; select bank2/3
  3273  0668  0087               	movwf	7
  3274  0669  0801               	movf	1,w
  3275  066A  00F2               	movwf	??_EUSART_Read
  3276  066B  0872               	movf	??_EUSART_Read,w
  3277  066C  00F3               	movwf	EUSART_Read@readValue
  3278  066D  3001               	movlw	1
  3279  066E  00F2               	movwf	??_EUSART_Read
  3280  066F  0872               	movf	??_EUSART_Read,w
  3281  0670  07EB               	addwf	_eusartRxTail,f	;volatile
  3282                           
  3283                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3284  0671  3008               	movlw	8
  3285  0672  026B               	subwf	_eusartRxTail,w	;volatile
  3286  0673  1803               	btfsc	3,0
  3287                           
  3288                           ;eusart.c: 122: {
  3289                           ;eusart.c: 123: eusartRxTail = 0;
  3290  0674  01EB               	clrf	_eusartRxTail	;volatile
  3291                           
  3292                           ;eusart.c: 124: }
  3293                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  3294  0675  0021               	movlb	1	; select bank1
  3295  0676  1291               	bcf	17,5	;volatile
  3296                           
  3297                           ;eusart.c: 126: eusartRxCount--;
  3298  0677  3001               	movlw	1
  3299  0678  0020               	movlb	0	; select bank0
  3300  0679  02EA               	subwf	_eusartRxCount,f	;volatile
  3301                           
  3302                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  3303  067A  0021               	movlb	1	; select bank1
  3304  067B  1691               	bsf	17,5	;volatile
  3305                           
  3306                           ;eusart.c: 129: return readValue;
  3307  067C  0873               	movf	EUSART_Read@readValue,w
  3308  067D  0008               	return
  3309  067E                     __end_of_EUSART_Read:	
  3310                           
  3311                           	psect	text7
  3312  0616                     __ptext7:	
  3313 ;; *************** function _strcat *****************
  3314 ;; Defined at:
  3315 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcat.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  to              1    wreg     PTR unsigned char 
  3318 ;;		 -> main@command(64), 
  3319 ;;  from            1    2[COMMON] PTR const unsigned char 
  3320 ;;		 -> main@result(4), 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  to              1    4[COMMON] PTR unsigned char 
  3323 ;;		 -> main@command(64), 
  3324 ;;  cp              1    5[COMMON] PTR unsigned char 
  3325 ;;		 -> main@command(64), 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      PTR unsigned char 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3335 ;;      Params:         1       0       0       0
  3336 ;;      Locals:         2       0       0       0
  3337 ;;      Temps:          1       0       0       0
  3338 ;;      Totals:         4       0       0       0
  3339 ;;Total ram usage:        4 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    2
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_main
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           
  3350                           ;psect for function _strcat
  3351  0616                     _strcat:	
  3352                           
  3353                           ;incstack = 0
  3354                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0]
  3355                           ;strcat@to stored from wreg
  3356  0616  00F4               	movwf	strcat@to
  3357  0617  0874               	movf	strcat@to,w
  3358  0618  00F3               	movwf	??_strcat
  3359  0619  0873               	movf	??_strcat,w
  3360  061A  00F5               	movwf	strcat@cp
  3361  061B                     l1605:	
  3362  061B  0875               	movf	strcat@cp,w
  3363  061C  0086               	movwf	6
  3364  061D  0187               	clrf	7
  3365  061E  0801               	movf	1,w
  3366  061F  1903               	btfsc	3,2
  3367  0620  2E2E               	goto	l1609
  3368  0621  3001               	movlw	1
  3369  0622  00F3               	movwf	??_strcat
  3370  0623  0873               	movf	??_strcat,w
  3371  0624  07F5               	addwf	strcat@cp,f
  3372  0625  2E1B               	goto	l1605
  3373  0626                     l1607:	
  3374  0626  3001               	movlw	1
  3375  0627  00F3               	movwf	??_strcat
  3376  0628  0873               	movf	??_strcat,w
  3377  0629  07F5               	addwf	strcat@cp,f
  3378  062A  3001               	movlw	1
  3379  062B  00F3               	movwf	??_strcat
  3380  062C  0873               	movf	??_strcat,w
  3381  062D  07F2               	addwf	strcat@from,f
  3382  062E                     l1609:	
  3383  062E  0875               	movf	strcat@cp,w
  3384  062F  0086               	movwf	6
  3385  0630  0187               	clrf	7
  3386  0631  0872               	movf	strcat@from,w
  3387  0632  0084               	movwf	4
  3388  0633  0185               	clrf	5
  3389  0634  0800               	movf	0,w
  3390  0635  3FC0               	movwi [0]fsr1
  3391  0636  0889               	movf	9,f
  3392  0637  1D03               	btfss	3,2
  3393  0638  2E26               	goto	l1607
  3394  0639  0874               	movf	strcat@to,w
  3395  063A  0008               	return
  3396  063B                     __end_of_strcat:	
  3397                           
  3398                           	psect	text8
  3399  03B8                     __ptext8:	
  3400 ;; *************** function _sprintf *****************
  3401 ;; Defined at:
  3402 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  sp              1    wreg     PTR unsigned char 
  3405 ;;		 -> main@result(4), 
  3406 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  3407 ;;		 -> STR_26(3), 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  3410 ;;		 -> main@result(4), 
  3411 ;;  idx             1    9[BANK0 ] unsigned char 
  3412 ;;  tmpval          4    0        struct .
  3413 ;;  val             2   11[BANK0 ] unsigned int 
  3414 ;;  cp              2    0        PTR const unsigned char 
  3415 ;;  len             2    0        unsigned int 
  3416 ;;  c               1   15[BANK0 ] char 
  3417 ;;  prec            1   13[BANK0 ] char 
  3418 ;;  ap              1   10[BANK0 ] PTR void [1]
  3419 ;;		 -> ?_sprintf(2), 
  3420 ;;  flag            1    8[BANK0 ] unsigned char 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  2    0[BANK0 ] int 
  3423 ;; Registers used:
  3424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3430 ;;      Params:         0       4       0       0
  3431 ;;      Locals:         0       8       0       0
  3432 ;;      Temps:          0       4       0       0
  3433 ;;      Totals:         0      16       0       0
  3434 ;;Total ram usage:       16 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    3
  3437 ;; This function calls:
  3438 ;;		___lwdiv
  3439 ;; This function is called by:
  3440 ;;		_main
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           
  3445                           ;psect for function _sprintf
  3446  03B8                     _sprintf:	
  3447                           
  3448                           ;incstack = 0
  3449                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3450                           ;sprintf@sp stored from wreg
  3451  03B8  0020               	movlb	0	; select bank0
  3452  03B9  00AE               	movwf	sprintf@sp
  3453                           
  3454                           ;doprnt.c: 494: va_list ap;
  3455                           ;doprnt.c: 499: signed char c;
  3456                           ;doprnt.c: 506: signed char prec;
  3457                           ;doprnt.c: 508: unsigned char flag;
  3458                           ;doprnt.c: 523: union {
  3459                           ;doprnt.c: 524: unsigned long vd;
  3460                           ;doprnt.c: 525: double integ;
  3461                           ;doprnt.c: 526: } tmpval;
  3462                           ;doprnt.c: 528: unsigned int val;
  3463                           ;doprnt.c: 529: unsigned len;
  3464                           ;doprnt.c: 530: const char * cp;
  3465                           ;doprnt.c: 533: *ap = __va_start();
  3466  03BA  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3467  03BB  00A4               	movwf	??_sprintf
  3468  03BC  0824               	movf	??_sprintf,w
  3469  03BD  00AA               	movwf	sprintf@ap
  3470  03BE                     l1595:	
  3471                           ;doprnt.c: 536: while(c = *f++) {
  3472                           
  3473  03BE  0821               	movf	sprintf@f+1,w
  3474  03BF  00A5               	movwf	??_sprintf+1
  3475  03C0  0820               	movf	sprintf@f,w
  3476  03C1  00A4               	movwf	??_sprintf
  3477  03C2  0AA0               	incf	sprintf@f,f
  3478  03C3  1903               	skipnz
  3479  03C4  0AA1               	incf	sprintf@f+1,f
  3480  03C5  0824               	movf	??_sprintf,w
  3481  03C6  0084               	movwf	4
  3482  03C7  0825               	movf	??_sprintf+1,w
  3483  03C8  0085               	movwf	5
  3484  03C9  0800               	movf	0,w	;code access
  3485  03CA  00A6               	movwf	??_sprintf+2
  3486  03CB  0826               	movf	??_sprintf+2,w
  3487  03CC  00AF               	movwf	sprintf@c
  3488  03CD  082F               	movf	sprintf@c,w
  3489  03CE  1903               	btfsc	3,2
  3490  03CF  2C66               	goto	l1597
  3491                           
  3492                           ;doprnt.c: 538: if(c != '%')
  3493  03D0  3025               	movlw	37
  3494  03D1  062F               	xorwf	sprintf@c,w
  3495  03D2  1903               	btfsc	3,2
  3496  03D3  2BE0               	goto	l1561
  3497                           
  3498                           ;doprnt.c: 540: {
  3499                           ;doprnt.c: 541: ((*sp++ = (c)));
  3500  03D4  082F               	movf	sprintf@c,w
  3501  03D5  00A4               	movwf	??_sprintf
  3502  03D6  082E               	movf	sprintf@sp,w
  3503  03D7  0086               	movwf	6
  3504  03D8  0187               	clrf	7
  3505  03D9  0824               	movf	??_sprintf,w
  3506  03DA  0081               	movwf	1
  3507  03DB  3001               	movlw	1
  3508  03DC  00A4               	movwf	??_sprintf
  3509  03DD  0824               	movf	??_sprintf,w
  3510  03DE  07AE               	addwf	sprintf@sp,f
  3511                           
  3512                           ;doprnt.c: 542: continue;
  3513  03DF  2BBE               	goto	l1595
  3514  03E0                     l1561:	
  3515                           
  3516                           ;doprnt.c: 543: }
  3517                           ;doprnt.c: 548: flag = 0;
  3518  03E0  01A8               	clrf	sprintf@flag
  3519                           
  3520                           ;doprnt.c: 822: }
  3521                           
  3522                           ;doprnt.c: 813: continue;
  3523                           
  3524                           ;doprnt.c: 802: default:
  3525                           
  3526                           ;doprnt.c: 718: case 'x':
  3527                           ;doprnt.c: 723: break;
  3528                           
  3529                           ;doprnt.c: 712: case 'X':
  3530                           
  3531                           ;doprnt.c: 638: goto alldone;
  3532                           
  3533                           ;doprnt.c: 637: case 0:
  3534                           
  3535                           ;doprnt.c: 635: switch(c = *f++) {
  3536  03E1  0821               	movf	sprintf@f+1,w
  3537  03E2  00A5               	movwf	??_sprintf+1
  3538  03E3  0820               	movf	sprintf@f,w
  3539  03E4  00A4               	movwf	??_sprintf
  3540  03E5  0AA0               	incf	sprintf@f,f
  3541  03E6  1903               	skipnz
  3542  03E7  0AA1               	incf	sprintf@f+1,f
  3543  03E8  0824               	movf	??_sprintf,w
  3544  03E9  0084               	movwf	4
  3545  03EA  0825               	movf	??_sprintf+1,w
  3546  03EB  0085               	movwf	5
  3547  03EC  0800               	movf	0,w	;code access
  3548  03ED  00AF               	movwf	sprintf@c
  3549                           
  3550                           ; Switch size 1, requested type "space"
  3551                           ; Number of cases is 3, Range of values is 0 to 120
  3552                           ; switch strategies available:
  3553                           ; Name         Instructions Cycles
  3554                           ; simple_byte           10     6 (average)
  3555                           ; direct_byte          248     6 (fixed)
  3556                           ; jumptable            260     6 (fixed)
  3557                           ;	Chosen strategy is simple_byte
  3558  03EE  3A00               	xorlw	0	; case 0
  3559  03EF  1903               	skipnz
  3560  03F0  2C66               	goto	l1597
  3561  03F1  3A58               	xorlw	88	; case 88
  3562  03F2  1903               	skipnz
  3563  03F3  2BF8               	goto	l1567
  3564  03F4  3A20               	xorlw	32	; case 120
  3565  03F5  1903               	skipnz
  3566  03F6  2BF8               	goto	l1567
  3567  03F7  2BBE               	goto	l1595
  3568  03F8                     l1567:	
  3569                           
  3570                           ;doprnt.c: 1273: {
  3571                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3572  03F8  082A               	movf	sprintf@ap,w
  3573  03F9  0086               	movwf	6
  3574  03FA  0187               	clrf	7
  3575  03FB  3F40               	moviw [0]fsr1
  3576  03FC  00AB               	movwf	sprintf@val
  3577  03FD  3F41               	moviw [1]fsr1
  3578  03FE  00AC               	movwf	sprintf@val+1
  3579  03FF  3002               	movlw	2
  3580  0400  00A4               	movwf	??_sprintf
  3581  0401  0824               	movf	??_sprintf,w
  3582  0402  07AA               	addwf	sprintf@ap,f
  3583                           
  3584                           ;doprnt.c: 1287: }
  3585                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3586  0403  01AF               	clrf	sprintf@c
  3587  0404  0AAF               	incf	sprintf@c,f
  3588  0405  3004               	movlw	4
  3589  0406  062F               	xorwf	sprintf@c,w
  3590  0407  1903               	btfsc	3,2
  3591  0408  2C28               	goto	l1583
  3592  0409                     l1577:	
  3593                           
  3594                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3595  0409  082F               	movf	sprintf@c,w
  3596  040A  00A4               	movwf	??_sprintf
  3597  040B  01A5               	clrf	??_sprintf+1
  3598  040C  35A4               	lslf	??_sprintf,f
  3599  040D  0DA5               	rlf	??_sprintf+1,f
  3600  040E  3099               	movlw	low (_hexpowers| (0+32768))
  3601  040F  0724               	addwf	??_sprintf,w
  3602  0410  0084               	movwf	4
  3603  0411  3082               	movlw	high (_hexpowers| (0+32768))
  3604  0412  3D25               	addwfc	??_sprintf+1,w
  3605  0413  0085               	movwf	5
  3606  0414  3F00               	moviw [0]fsr0
  3607  0415  00A6               	movwf	??_sprintf+2
  3608  0416  3F01               	moviw [1]fsr0
  3609  0417  00A7               	movwf	??_sprintf+3
  3610  0418  0827               	movf	??_sprintf+3,w
  3611  0419  022C               	subwf	sprintf@val+1,w
  3612  041A  1D03               	skipz
  3613  041B  2C1E               	goto	u1335
  3614  041C  0826               	movf	??_sprintf+2,w
  3615  041D  022B               	subwf	sprintf@val,w
  3616  041E                     u1335:	
  3617  041E  1C03               	btfss	3,0
  3618  041F  2C28               	goto	l1583
  3619                           
  3620                           ;doprnt.c: 1318: break;
  3621  0420  3001               	movlw	1
  3622  0421  00A4               	movwf	??_sprintf
  3623  0422  0824               	movf	??_sprintf,w
  3624  0423  07AF               	addwf	sprintf@c,f
  3625  0424  3004               	movlw	4
  3626  0425  062F               	xorwf	sprintf@c,w
  3627  0426  1D03               	btfss	3,2
  3628  0427  2C09               	goto	l1577
  3629  0428                     l1583:	
  3630                           
  3631                           ;doprnt.c: 1422: {
  3632                           ;doprnt.c: 1469: }
  3633                           ;doprnt.c: 1472: prec = c;
  3634  0428  082F               	movf	sprintf@c,w
  3635  0429  00A4               	movwf	??_sprintf
  3636  042A  0824               	movf	??_sprintf,w
  3637  042B  00AD               	movwf	sprintf@prec
  3638  042C                     l1593:	
  3639                           ;doprnt.c: 1474: while(prec--) {
  3640                           
  3641  042C  30FF               	movlw	255
  3642  042D  00A4               	movwf	??_sprintf
  3643  042E  0824               	movf	??_sprintf,w
  3644  042F  07AD               	addwf	sprintf@prec,f
  3645  0430  0A2D               	incf	sprintf@prec,w
  3646  0431  1903               	btfsc	3,2
  3647  0432  2BBE               	goto	l1595
  3648                           
  3649                           ;doprnt.c: 1478: {
  3650                           ;doprnt.c: 1499: {
  3651                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3652  0433  082D               	movf	sprintf@prec,w
  3653  0434  00A4               	movwf	??_sprintf
  3654  0435  01A5               	clrf	??_sprintf+1
  3655  0436  35A4               	lslf	??_sprintf,f
  3656  0437  0DA5               	rlf	??_sprintf+1,f
  3657  0438  3099               	movlw	low (_hexpowers| (0+32768))
  3658  0439  0724               	addwf	??_sprintf,w
  3659  043A  0084               	movwf	4
  3660  043B  3082               	movlw	high (_hexpowers| (0+32768))
  3661  043C  3D25               	addwfc	??_sprintf+1,w
  3662  043D  0085               	movwf	5
  3663  043E  3F00               	moviw [0]fsr0
  3664  043F  00F2               	movwf	___lwdiv@divisor
  3665  0440  3F01               	moviw [1]fsr0
  3666  0441  00F3               	movwf	___lwdiv@divisor+1
  3667  0442  082C               	movf	sprintf@val+1,w
  3668  0443  00F5               	movwf	___lwdiv@dividend+1
  3669  0444  082B               	movf	sprintf@val,w
  3670  0445  00F4               	movwf	___lwdiv@dividend
  3671  0446  3185  2595  3183   	fcall	___lwdiv
  3672  0449  0872               	movf	?___lwdiv,w
  3673  044A  390F               	andlw	15
  3674  044B  0020               	movlb	0	; select bank0
  3675  044C  00A6               	movwf	??_sprintf+2
  3676  044D  0826               	movf	??_sprintf+2,w
  3677  044E  00A9               	movwf	sprintf@idx
  3678                           
  3679                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  3680  044F  0829               	movf	sprintf@idx,w
  3681  0450  3E49               	addlw	low (STR_28| (0+32768))
  3682  0451  0084               	movwf	4
  3683  0452  3083               	movlw	high (STR_28| (0+32768))
  3684  0453  1803               	skipnc
  3685  0454  3E01               	addlw	1
  3686  0455  0085               	movwf	5
  3687  0456  0800               	movf	0,w	;code access
  3688  0457  00A4               	movwf	??_sprintf
  3689  0458  0824               	movf	??_sprintf,w
  3690  0459  00AF               	movwf	sprintf@c
  3691                           
  3692                           ;doprnt.c: 1508: }
  3693                           ;doprnt.c: 1523: }
  3694                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3695  045A  082F               	movf	sprintf@c,w
  3696  045B  00A4               	movwf	??_sprintf
  3697  045C  082E               	movf	sprintf@sp,w
  3698  045D  0086               	movwf	6
  3699  045E  0187               	clrf	7
  3700  045F  0824               	movf	??_sprintf,w
  3701  0460  0081               	movwf	1
  3702  0461  3001               	movlw	1
  3703  0462  00A4               	movwf	??_sprintf
  3704  0463  0824               	movf	??_sprintf,w
  3705  0464  07AE               	addwf	sprintf@sp,f
  3706  0465  2C2C               	goto	l1593
  3707  0466                     l1597:	
  3708                           ;doprnt.c: 1525: }
  3709                           ;doprnt.c: 1533: }
  3710                           ;doprnt.c: 1535: alldone:
  3711                           
  3712                           
  3713                           ;doprnt.c: 1538: *sp = 0;
  3714  0466  082E               	movf	sprintf@sp,w
  3715  0467  0086               	movwf	6
  3716  0468  0187               	clrf	7
  3717  0469  0181               	clrf	1
  3718  046A  0008               	return
  3719  046B                     __end_of_sprintf:	
  3720                           ;doprnt.c: 1540: return 0;
  3721                           ;	Return value of _sprintf is never used
  3722                           
  3723                           
  3724                           	psect	text9
  3725  0595                     __ptext9:	
  3726 ;; *************** function ___lwdiv *****************
  3727 ;; Defined at:
  3728 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  divisor         2    2[COMMON] unsigned int 
  3731 ;;  dividend        2    4[COMMON] unsigned int 
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  quotient        2    7[COMMON] unsigned int 
  3734 ;;  counter         1    9[COMMON] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  2    2[COMMON] unsigned int 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2, status,0
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3744 ;;      Params:         4       0       0       0
  3745 ;;      Locals:         3       0       0       0
  3746 ;;      Temps:          1       0       0       0
  3747 ;;      Totals:         8       0       0       0
  3748 ;;Total ram usage:        8 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    2
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_sprintf
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           
  3759                           ;psect for function ___lwdiv
  3760  0595                     ___lwdiv:	
  3761                           
  3762                           ;incstack = 0
  3763                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3764  0595  01F7               	clrf	___lwdiv@quotient
  3765  0596  01F8               	clrf	___lwdiv@quotient+1
  3766  0597  0872               	movf	___lwdiv@divisor,w
  3767  0598  0473               	iorwf	___lwdiv@divisor+1,w
  3768  0599  1903               	btfsc	3,2
  3769  059A  2DC4               	goto	l1449
  3770  059B  01F9               	clrf	___lwdiv@counter
  3771  059C  0AF9               	incf	___lwdiv@counter,f
  3772  059D                     l1437:	
  3773  059D  1BF3               	btfsc	___lwdiv@divisor+1,7
  3774  059E  2DA9               	goto	l1439
  3775  059F  3001               	movlw	1
  3776  05A0                     u1055:	
  3777  05A0  35F2               	lslf	___lwdiv@divisor,f
  3778  05A1  0DF3               	rlf	___lwdiv@divisor+1,f
  3779  05A2  0B89               	decfsz	9,f
  3780  05A3  2DA0               	goto	u1055
  3781  05A4  3001               	movlw	1
  3782  05A5  00F6               	movwf	??___lwdiv
  3783  05A6  0876               	movf	??___lwdiv,w
  3784  05A7  07F9               	addwf	___lwdiv@counter,f
  3785  05A8  2D9D               	goto	l1437
  3786  05A9                     l1439:	
  3787  05A9  3001               	movlw	1
  3788  05AA                     u1075:	
  3789  05AA  35F7               	lslf	___lwdiv@quotient,f
  3790  05AB  0DF8               	rlf	___lwdiv@quotient+1,f
  3791  05AC  0B89               	decfsz	9,f
  3792  05AD  2DAA               	goto	u1075
  3793  05AE  0873               	movf	___lwdiv@divisor+1,w
  3794  05AF  0275               	subwf	___lwdiv@dividend+1,w
  3795  05B0  1D03               	skipz
  3796  05B1  2DB4               	goto	u1085
  3797  05B2  0872               	movf	___lwdiv@divisor,w
  3798  05B3  0274               	subwf	___lwdiv@dividend,w
  3799  05B4                     u1085:	
  3800  05B4  1C03               	skipc
  3801  05B5  2DBB               	goto	l1445
  3802  05B6  0872               	movf	___lwdiv@divisor,w
  3803  05B7  02F4               	subwf	___lwdiv@dividend,f
  3804  05B8  0873               	movf	___lwdiv@divisor+1,w
  3805  05B9  3BF5               	subwfb	___lwdiv@dividend+1,f
  3806  05BA  1477               	bsf	___lwdiv@quotient,0
  3807  05BB                     l1445:	
  3808  05BB  3001               	movlw	1
  3809  05BC                     u1095:	
  3810  05BC  36F3               	lsrf	___lwdiv@divisor+1,f
  3811  05BD  0CF2               	rrf	___lwdiv@divisor,f
  3812  05BE  0B89               	decfsz	9,f
  3813  05BF  2DBC               	goto	u1095
  3814  05C0  3001               	movlw	1
  3815  05C1  02F9               	subwf	___lwdiv@counter,f
  3816  05C2  1D03               	btfss	3,2
  3817  05C3  2DA9               	goto	l1439
  3818  05C4                     l1449:	
  3819  05C4  0878               	movf	___lwdiv@quotient+1,w
  3820  05C5  00F3               	movwf	?___lwdiv+1
  3821  05C6  0877               	movf	___lwdiv@quotient,w
  3822  05C7  00F2               	movwf	?___lwdiv
  3823  05C8  0008               	return
  3824  05C9                     __end_of___lwdiv:	
  3825                           
  3826                           	psect	text10
  3827  046B                     __ptext10:	
  3828 ;; *************** function _blink_leds *****************
  3829 ;; Defined at:
  3830 ;;		line 53 in file "main.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;  n               2    2[COMMON] int 
  3833 ;;  c               2    4[COMMON] int 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;  i               2    8[COMMON] int 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  2    2[COMMON] int 
  3838 ;; Registers used:
  3839 ;;		wreg, status,2, status,0, pclath, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3845 ;;      Params:         4       0       0       0
  3846 ;;      Locals:         2       0       0       0
  3847 ;;      Temps:          2       0       0       0
  3848 ;;      Totals:         8       0       0       0
  3849 ;;Total ram usage:        8 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    3
  3852 ;; This function calls:
  3853 ;;		_set_low_leds
  3854 ;; This function is called by:
  3855 ;;		_main
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           
  3860                           ;psect for function _blink_leds
  3861  046B                     _blink_leds:	
  3862                           
  3863                           ;main.c: 54: _delay((unsigned long)((640)*(8000000/4000.0)));
  3864                           
  3865                           ;incstack = 0
  3866                           ; Regs used in _blink_leds: [wreg+status,2+status,0+pclath+cstack]
  3867  046B  3007               	movlw	7
  3868  046C  00F7               	movwf	??_blink_leds+1
  3869  046D  307F               	movlw	127
  3870  046E  00F6               	movwf	??_blink_leds
  3871  046F  3050               	movlw	80
  3872  0470                     u1967:	
  3873  0470  0B89               	decfsz	9,f
  3874  0471  2C70               	goto	u1967
  3875  0472  0BF6               	decfsz	??_blink_leds,f
  3876  0473  2C70               	goto	u1967
  3877  0474  0BF7               	decfsz	??_blink_leds+1,f
  3878  0475  2C70               	goto	u1967
  3879                           
  3880                           ;main.c: 55: for (int i = 0; i < n; ++i) {
  3881  0476  01F8               	clrf	blink_leds@i
  3882  0477  01F9               	clrf	blink_leds@i+1
  3883  0478                     l233:	
  3884  0478  0879               	movf	blink_leds@i+1,w
  3885  0479  3A80               	xorlw	128
  3886  047A  00F6               	movwf	??_blink_leds
  3887  047B  0873               	movf	blink_leds@n+1,w
  3888  047C  3A80               	xorlw	128
  3889  047D  0276               	subwf	??_blink_leds,w
  3890  047E  1D03               	skipz
  3891  047F  2C82               	goto	u1205
  3892  0480  0872               	movf	blink_leds@n,w
  3893  0481  0278               	subwf	blink_leds@i,w
  3894  0482                     u1205:	
  3895  0482  1803               	btfsc	3,0
  3896  0483  2CB4               	goto	l1505
  3897                           
  3898                           ;main.c: 56: set_low_leds();
  3899  0484  3187  2746  3184   	fcall	_set_low_leds
  3900                           
  3901                           ;main.c: 57: _delay((unsigned long)((128)*(8000000/4000.0)));
  3902  0487  3002               	movlw	2
  3903  0488  00F7               	movwf	??_blink_leds+1
  3904  0489  304D               	movlw	77
  3905  048A  00F6               	movwf	??_blink_leds
  3906  048B  3074               	movlw	116
  3907  048C                     u1977:	
  3908  048C  0B89               	decfsz	9,f
  3909  048D  2C8C               	goto	u1977
  3910  048E  0BF6               	decfsz	??_blink_leds,f
  3911  048F  2C8C               	goto	u1977
  3912  0490  0BF7               	decfsz	??_blink_leds+1,f
  3913  0491  2C8C               	goto	u1977
  3914  0492  3200               	nop2
  3915                           
  3916                           ;main.c: 58: if (c & 0b00000001) do { LATAbits.LATA5 = 1; } while(0);
  3917  0493  1C74               	btfss	blink_leds@c,0
  3918  0494  2C97               	goto	l235
  3919  0495  0022               	movlb	2	; select bank2
  3920  0496  168C               	bsf	12,5	;volatile
  3921  0497                     l235:	
  3922                           
  3923                           ;main.c: 59: if (c & 0b00000010) do { LATAbits.LATA1 = 1; } while(0);
  3924  0497  1CF4               	btfss	blink_leds@c,1
  3925  0498  2C9B               	goto	l238
  3926  0499  0022               	movlb	2	; select bank2
  3927  049A  148C               	bsf	12,1	;volatile
  3928  049B                     l238:	
  3929                           
  3930                           ;main.c: 60: if (c & 0b00000100) do { LATAbits.LATA2 = 1; } while(0);
  3931  049B  1D74               	btfss	blink_leds@c,2
  3932  049C  2C9F               	goto	l241
  3933  049D  0022               	movlb	2	; select bank2
  3934  049E  150C               	bsf	12,2	;volatile
  3935  049F                     l241:	
  3936                           
  3937                           ;main.c: 61: if (c & 0b00001000) do { LATCbits.LATC5 = 1; } while(0);
  3938  049F  1DF4               	btfss	blink_leds@c,3
  3939  04A0  2CA3               	goto	l1503
  3940  04A1  0022               	movlb	2	; select bank2
  3941  04A2  168E               	bsf	14,5	;volatile
  3942  04A3                     l1503:	
  3943                           
  3944                           ;main.c: 62: _delay((unsigned long)((128)*(8000000/4000.0)));
  3945  04A3  3002               	movlw	2
  3946  04A4  00F7               	movwf	??_blink_leds+1
  3947  04A5  304D               	movlw	77
  3948  04A6  00F6               	movwf	??_blink_leds
  3949  04A7  3074               	movlw	116
  3950  04A8                     u1987:	
  3951  04A8  0B89               	decfsz	9,f
  3952  04A9  2CA8               	goto	u1987
  3953  04AA  0BF6               	decfsz	??_blink_leds,f
  3954  04AB  2CA8               	goto	u1987
  3955  04AC  0BF7               	decfsz	??_blink_leds+1,f
  3956  04AD  2CA8               	goto	u1987
  3957  04AE  3200               	nop2
  3958  04AF  3001               	movlw	1
  3959  04B0  07F8               	addwf	blink_leds@i,f
  3960  04B1  3000               	movlw	0
  3961  04B2  3DF9               	addwfc	blink_leds@i+1,f
  3962  04B3  2C78               	goto	l233
  3963  04B4                     l1505:	
  3964                           
  3965                           ;main.c: 63: }
  3966                           ;main.c: 64: set_low_leds();
  3967  04B4  3187  2746  3184   	fcall	_set_low_leds
  3968                           
  3969                           ;main.c: 65: _delay((unsigned long)((640)*(8000000/4000.0)));
  3970  04B7  3007               	movlw	7
  3971  04B8  00F7               	movwf	??_blink_leds+1
  3972  04B9  307F               	movlw	127
  3973  04BA  00F6               	movwf	??_blink_leds
  3974  04BB  3050               	movlw	80
  3975  04BC                     u1997:	
  3976  04BC  0B89               	decfsz	9,f
  3977  04BD  2CBC               	goto	u1997
  3978  04BE  0BF6               	decfsz	??_blink_leds,f
  3979  04BF  2CBC               	goto	u1997
  3980  04C0  0BF7               	decfsz	??_blink_leds+1,f
  3981  04C1  2CBC               	goto	u1997
  3982  04C2  0008               	return
  3983  04C3                     __end_of_blink_leds:	
  3984                           ;main.c: 66: return (0);
  3985                           ;	Return value of _blink_leds is never used
  3986                           
  3987                           
  3988                           	psect	text11
  3989  0746                     __ptext11:	
  3990 ;; *************** function _set_low_leds *****************
  3991 ;; Defined at:
  3992 ;;		line 41 in file "main.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;		None
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  2  221[None  ] int 
  3999 ;; Registers used:
  4000 ;;		None
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4006 ;;      Params:         0       0       0       0
  4007 ;;      Locals:         0       0       0       0
  4008 ;;      Temps:          0       0       0       0
  4009 ;;      Totals:         0       0       0       0
  4010 ;;Total ram usage:        0 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    2
  4013 ;; This function calls:
  4014 ;;		Nothing
  4015 ;; This function is called by:
  4016 ;;		_blink_leds
  4017 ;;		_show_char_leds
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _set_low_leds
  4023  0746                     _set_low_leds:	
  4024                           
  4025                           ;incstack = 0
  4026                           ; Regs used in _set_low_leds: []
  4027                           ;main.c: 42: do { LATAbits.LATA5 = 0; } while(0);
  4028  0746  0022               	movlb	2	; select bank2
  4029  0747  128C               	bcf	12,5	;volatile
  4030                           
  4031                           ;main.c: 43: do { LATAbits.LATA1 = 0; } while(0);
  4032  0748  108C               	bcf	12,1	;volatile
  4033                           
  4034                           ;main.c: 44: do { LATAbits.LATA2 = 0; } while(0);
  4035  0749  110C               	bcf	12,2	;volatile
  4036                           
  4037                           ;main.c: 45: do { LATCbits.LATC5 = 0; } while(0);
  4038  074A  128E               	bcf	14,5	;volatile
  4039  074B  0008               	return
  4040  074C                     __end_of_set_low_leds:	
  4041                           ;main.c: 46: return (0);
  4042                           ;	Return value of _set_low_leds is never used
  4043                           
  4044                           
  4045                           	psect	text12
  4046  0510                     __ptext12:	
  4047 ;; *************** function ___awmod *****************
  4048 ;; Defined at:
  4049 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;  divisor         2    2[COMMON] int 
  4052 ;;  dividend        2    4[COMMON] int 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  sign            1    8[COMMON] unsigned char 
  4055 ;;  counter         1    7[COMMON] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  2    2[COMMON] int 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4065 ;;      Params:         4       0       0       0
  4066 ;;      Locals:         2       0       0       0
  4067 ;;      Temps:          1       0       0       0
  4068 ;;      Totals:         7       0       0       0
  4069 ;;Total ram usage:        7 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    2
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_main
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           
  4080                           ;psect for function ___awmod
  4081  0510                     ___awmod:	
  4082                           
  4083                           ;incstack = 0
  4084                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4085  0510  01F8               	clrf	___awmod@sign
  4086  0511  1FF5               	btfss	___awmod@dividend+1,7
  4087  0512  2D1A               	goto	l1623
  4088  0513  09F4               	comf	___awmod@dividend,f
  4089  0514  09F5               	comf	___awmod@dividend+1,f
  4090  0515  0AF4               	incf	___awmod@dividend,f
  4091  0516  1903               	skipnz
  4092  0517  0AF5               	incf	___awmod@dividend+1,f
  4093  0518  01F8               	clrf	___awmod@sign
  4094  0519  0AF8               	incf	___awmod@sign,f
  4095  051A                     l1623:	
  4096  051A  1FF3               	btfss	___awmod@divisor+1,7
  4097  051B  2D21               	goto	l1627
  4098  051C  09F2               	comf	___awmod@divisor,f
  4099  051D  09F3               	comf	___awmod@divisor+1,f
  4100  051E  0AF2               	incf	___awmod@divisor,f
  4101  051F  1903               	skipnz
  4102  0520  0AF3               	incf	___awmod@divisor+1,f
  4103  0521                     l1627:	
  4104  0521  0872               	movf	___awmod@divisor,w
  4105  0522  0473               	iorwf	___awmod@divisor+1,w
  4106  0523  1903               	btfsc	3,2
  4107  0524  2D48               	goto	l1645
  4108  0525  01F7               	clrf	___awmod@counter
  4109  0526  0AF7               	incf	___awmod@counter,f
  4110  0527                     l1635:	
  4111  0527  1BF3               	btfsc	___awmod@divisor+1,7
  4112  0528  2D33               	goto	l1637
  4113  0529  3001               	movlw	1
  4114  052A                     u1425:	
  4115  052A  35F2               	lslf	___awmod@divisor,f
  4116  052B  0DF3               	rlf	___awmod@divisor+1,f
  4117  052C  0B89               	decfsz	9,f
  4118  052D  2D2A               	goto	u1425
  4119  052E  3001               	movlw	1
  4120  052F  00F6               	movwf	??___awmod
  4121  0530  0876               	movf	??___awmod,w
  4122  0531  07F7               	addwf	___awmod@counter,f
  4123  0532  2D27               	goto	l1635
  4124  0533                     l1637:	
  4125  0533  0873               	movf	___awmod@divisor+1,w
  4126  0534  0275               	subwf	___awmod@dividend+1,w
  4127  0535  1D03               	skipz
  4128  0536  2D39               	goto	u1445
  4129  0537  0872               	movf	___awmod@divisor,w
  4130  0538  0274               	subwf	___awmod@dividend,w
  4131  0539                     u1445:	
  4132  0539  1C03               	skipc
  4133  053A  2D3F               	goto	l1641
  4134  053B  0872               	movf	___awmod@divisor,w
  4135  053C  02F4               	subwf	___awmod@dividend,f
  4136  053D  0873               	movf	___awmod@divisor+1,w
  4137  053E  3BF5               	subwfb	___awmod@dividend+1,f
  4138  053F                     l1641:	
  4139  053F  3001               	movlw	1
  4140  0540                     u1455:	
  4141  0540  36F3               	lsrf	___awmod@divisor+1,f
  4142  0541  0CF2               	rrf	___awmod@divisor,f
  4143  0542  0B89               	decfsz	9,f
  4144  0543  2D40               	goto	u1455
  4145  0544  3001               	movlw	1
  4146  0545  02F7               	subwf	___awmod@counter,f
  4147  0546  1D03               	btfss	3,2
  4148  0547  2D33               	goto	l1637
  4149  0548                     l1645:	
  4150  0548  0878               	movf	___awmod@sign,w
  4151  0549  1903               	btfsc	3,2
  4152  054A  2D50               	goto	l1649
  4153  054B  09F4               	comf	___awmod@dividend,f
  4154  054C  09F5               	comf	___awmod@dividend+1,f
  4155  054D  0AF4               	incf	___awmod@dividend,f
  4156  054E  1903               	skipnz
  4157  054F  0AF5               	incf	___awmod@dividend+1,f
  4158  0550                     l1649:	
  4159  0550  0875               	movf	___awmod@dividend+1,w
  4160  0551  00F3               	movwf	?___awmod+1
  4161  0552  0874               	movf	___awmod@dividend,w
  4162  0553  00F2               	movwf	?___awmod
  4163  0554  0008               	return
  4164  0555                     __end_of___awmod:	
  4165                           
  4166                           	psect	text13
  4167  0723                     __ptext13:	
  4168 ;; *************** function _SYSTEM_Initialize *****************
  4169 ;; Defined at:
  4170 ;;		line 68 in file "mcc_generated_files/mcc.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0, pclath, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4184 ;;      Params:         0       0       0       0
  4185 ;;      Locals:         0       0       0       0
  4186 ;;      Temps:          0       0       0       0
  4187 ;;      Totals:         0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    3
  4191 ;; This function calls:
  4192 ;;		_ADC_Initialize
  4193 ;;		_EUSART_Initialize
  4194 ;;		_OSCILLATOR_Initialize
  4195 ;;		_PIN_MANAGER_Initialize
  4196 ;;		_WDT_Initialize
  4197 ;; This function is called by:
  4198 ;;		_main
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           
  4203                           ;psect for function _SYSTEM_Initialize
  4204  0723                     _SYSTEM_Initialize:	
  4205                           
  4206                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  4207                           
  4208                           ;incstack = 0
  4209                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4210  0723  3186  26B8  3187   	fcall	_PIN_MANAGER_Initialize
  4211                           
  4212                           ;mcc.c: 72: OSCILLATOR_Initialize();
  4213  0726  3187  2750  3187   	fcall	_OSCILLATOR_Initialize
  4214                           
  4215                           ;mcc.c: 73: WDT_Initialize();
  4216  0729  3187  274C  3187   	fcall	_WDT_Initialize
  4217                           
  4218                           ;mcc.c: 74: ADC_Initialize();
  4219  072C  3187  2732  3187   	fcall	_ADC_Initialize
  4220                           
  4221                           ;mcc.c: 75: EUSART_Initialize();
  4222  072F  3186  26F0         	fcall	_EUSART_Initialize
  4223  0731  0008               	return
  4224  0732                     __end_of_SYSTEM_Initialize:	
  4225                           
  4226                           	psect	text14
  4227  074C                     __ptext14:	
  4228 ;; *************** function _WDT_Initialize *****************
  4229 ;; Defined at:
  4230 ;;		line 84 in file "mcc_generated_files/mcc.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      void 
  4237 ;; Registers used:
  4238 ;;		wreg
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4244 ;;      Params:         0       0       0       0
  4245 ;;      Locals:         0       0       0       0
  4246 ;;      Temps:          0       0       0       0
  4247 ;;      Totals:         0       0       0       0
  4248 ;;Total ram usage:        0 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    2
  4251 ;; This function calls:
  4252 ;;		Nothing
  4253 ;; This function is called by:
  4254 ;;		_SYSTEM_Initialize
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           
  4259                           ;psect for function _WDT_Initialize
  4260  074C                     _WDT_Initialize:	
  4261                           
  4262                           ;mcc.c: 87: WDTCON = 0x16;
  4263                           
  4264                           ;incstack = 0
  4265                           ; Regs used in _WDT_Initialize: [wreg]
  4266  074C  3016               	movlw	22
  4267  074D  0021               	movlb	1	; select bank1
  4268  074E  0097               	movwf	23	;volatile
  4269  074F  0008               	return
  4270  0750                     __end_of_WDT_Initialize:	
  4271                           
  4272                           	psect	text15
  4273  06B8                     __ptext15:	
  4274 ;; *************** function _PIN_MANAGER_Initialize *****************
  4275 ;; Defined at:
  4276 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4290 ;;      Params:         0       0       0       0
  4291 ;;      Locals:         0       0       0       0
  4292 ;;      Temps:          0       0       0       0
  4293 ;;      Totals:         0       0       0       0
  4294 ;;Total ram usage:        0 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    2
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		_SYSTEM_Initialize
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           
  4305                           ;psect for function _PIN_MANAGER_Initialize
  4306  06B8                     _PIN_MANAGER_Initialize:	
  4307                           
  4308                           ;pin_manager.c: 56: LATA = 0x00;
  4309                           
  4310                           ;incstack = 0
  4311                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4312  06B8  0022               	movlb	2	; select bank2
  4313  06B9  018C               	clrf	12	;volatile
  4314                           
  4315                           ;pin_manager.c: 57: LATB = 0x00;
  4316  06BA  018D               	clrf	13	;volatile
  4317                           
  4318                           ;pin_manager.c: 58: LATC = 0x00;
  4319  06BB  018E               	clrf	14	;volatile
  4320                           
  4321                           ;pin_manager.c: 63: TRISA = 0x09;
  4322  06BC  3009               	movlw	9
  4323  06BD  0021               	movlb	1	; select bank1
  4324  06BE  008C               	movwf	12	;volatile
  4325                           
  4326                           ;pin_manager.c: 64: TRISB = 0x70;
  4327  06BF  3070               	movlw	112
  4328  06C0  008D               	movwf	13	;volatile
  4329                           
  4330                           ;pin_manager.c: 65: TRISC = 0xCF;
  4331  06C1  30CF               	movlw	207
  4332  06C2  008E               	movwf	14	;volatile
  4333                           
  4334                           ;pin_manager.c: 70: ANSELC = 0xCE;
  4335  06C3  30CE               	movlw	206
  4336  06C4  0023               	movlb	3	; select bank3
  4337  06C5  008E               	movwf	14	;volatile
  4338                           
  4339                           ;pin_manager.c: 71: ANSELB = 0x10;
  4340  06C6  3010               	movlw	16
  4341  06C7  008D               	movwf	13	;volatile
  4342                           
  4343                           ;pin_manager.c: 72: ANSELA = 0x17;
  4344  06C8  3017               	movlw	23
  4345  06C9  008C               	movwf	12	;volatile
  4346                           
  4347                           ;pin_manager.c: 77: WPUB = 0xF0;
  4348  06CA  30F0               	movlw	240
  4349  06CB  0024               	movlb	4	; select bank4
  4350  06CC  008D               	movwf	13	;volatile
  4351                           
  4352                           ;pin_manager.c: 78: WPUA = 0x3F;
  4353  06CD  303F               	movlw	63
  4354  06CE  008C               	movwf	12	;volatile
  4355                           
  4356                           ;pin_manager.c: 79: OPTION_REGbits.nWPUEN = 0;
  4357  06CF  0021               	movlb	1	; select bank1
  4358  06D0  1395               	bcf	21,7	;volatile
  4359                           
  4360                           ;pin_manager.c: 85: APFCON = 0x00;
  4361  06D1  0022               	movlb	2	; select bank2
  4362  06D2  019D               	clrf	29	;volatile
  4363  06D3  0008               	return
  4364  06D4                     __end_of_PIN_MANAGER_Initialize:	
  4365                           
  4366                           	psect	text16
  4367  0750                     __ptext16:	
  4368 ;; *************** function _OSCILLATOR_Initialize *****************
  4369 ;; Defined at:
  4370 ;;		line 78 in file "mcc_generated_files/mcc.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;		None
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4384 ;;      Params:         0       0       0       0
  4385 ;;      Locals:         0       0       0       0
  4386 ;;      Temps:          0       0       0       0
  4387 ;;      Totals:         0       0       0       0
  4388 ;;Total ram usage:        0 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    2
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_SYSTEM_Initialize
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function _OSCILLATOR_Initialize
  4400  0750                     _OSCILLATOR_Initialize:	
  4401                           
  4402                           ;mcc.c: 81: OSCCON = 0x70;
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in _OSCILLATOR_Initialize: [wreg]
  4406  0750  3070               	movlw	112
  4407  0751  0021               	movlb	1	; select bank1
  4408  0752  0099               	movwf	25	;volatile
  4409  0753  0008               	return
  4410  0754                     __end_of_OSCILLATOR_Initialize:	
  4411                           
  4412                           	psect	text17
  4413  06F0                     __ptext17:	
  4414 ;; *************** function _EUSART_Initialize *****************
  4415 ;; Defined at:
  4416 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;		None
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;		None
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  1    wreg      void 
  4423 ;; Registers used:
  4424 ;;		wreg, status,2
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4430 ;;      Params:         0       0       0       0
  4431 ;;      Locals:         0       0       0       0
  4432 ;;      Temps:          1       0       0       0
  4433 ;;      Totals:         1       0       0       0
  4434 ;;Total ram usage:        1 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    2
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_SYSTEM_Initialize
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _EUSART_Initialize
  4446  06F0                     _EUSART_Initialize:	
  4447                           
  4448                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4452  06F0  0021               	movlb	1	; select bank1
  4453  06F1  1291               	bcf	17,5	;volatile
  4454                           
  4455                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4456  06F2  1211               	bcf	17,4	;volatile
  4457                           
  4458                           ;eusart.c: 84: BAUDCON = 0x09;
  4459  06F3  3009               	movlw	9
  4460  06F4  0023               	movlb	3	; select bank3
  4461  06F5  009F               	movwf	31	;volatile
  4462                           
  4463                           ;eusart.c: 87: RCSTA = 0x90;
  4464  06F6  3090               	movlw	144
  4465  06F7  009D               	movwf	29	;volatile
  4466                           
  4467                           ;eusart.c: 90: TXSTA = 0x24;
  4468  06F8  3024               	movlw	36
  4469  06F9  009E               	movwf	30	;volatile
  4470                           
  4471                           ;eusart.c: 93: SPBRGL = 0x10;
  4472  06FA  3010               	movlw	16
  4473  06FB  009B               	movwf	27	;volatile
  4474                           
  4475                           ;eusart.c: 96: SPBRGH = 0x00;
  4476  06FC  019C               	clrf	28	;volatile
  4477                           
  4478                           ;eusart.c: 100: eusartTxHead = 0;
  4479  06FD  01FB               	clrf	_eusartTxHead	;volatile
  4480                           
  4481                           ;eusart.c: 101: eusartTxTail = 0;
  4482  06FE  01FA               	clrf	_eusartTxTail	;volatile
  4483                           
  4484                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4485  06FF  3008               	movlw	8
  4486  0700  00F2               	movwf	??_EUSART_Initialize
  4487  0701  0872               	movf	??_EUSART_Initialize,w
  4488  0702  0020               	movlb	0	; select bank0
  4489  0703  00ED               	movwf	_eusartTxBufferRemaining	;volatile
  4490                           
  4491                           ;eusart.c: 104: eusartRxHead = 0;
  4492  0704  01EC               	clrf	_eusartRxHead	;volatile
  4493                           
  4494                           ;eusart.c: 105: eusartRxTail = 0;
  4495  0705  01EB               	clrf	_eusartRxTail	;volatile
  4496                           
  4497                           ;eusart.c: 106: eusartRxCount = 0;
  4498  0706  01EA               	clrf	_eusartRxCount	;volatile
  4499                           
  4500                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4501  0707  0021               	movlb	1	; select bank1
  4502  0708  1691               	bsf	17,5	;volatile
  4503  0709  0008               	return
  4504  070A                     __end_of_EUSART_Initialize:	
  4505                           
  4506                           	psect	text18
  4507  0732                     __ptext18:	
  4508 ;; *************** function _ADC_Initialize *****************
  4509 ;; Defined at:
  4510 ;;		line 64 in file "mcc_generated_files/adc.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      void 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4524 ;;      Params:         0       0       0       0
  4525 ;;      Locals:         0       0       0       0
  4526 ;;      Temps:          0       0       0       0
  4527 ;;      Totals:         0       0       0       0
  4528 ;;Total ram usage:        0 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    2
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_SYSTEM_Initialize
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function _ADC_Initialize
  4540  0732                     _ADC_Initialize:	
  4541                           
  4542                           ;adc.c: 69: ADCON0 = 0x01;
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4546  0732  3001               	movlw	1
  4547  0733  0021               	movlb	1	; select bank1
  4548  0734  009D               	movwf	29	;volatile
  4549                           
  4550                           ;adc.c: 72: ADCON1 = 0x00;
  4551  0735  019E               	clrf	30	;volatile
  4552                           
  4553                           ;adc.c: 75: ADCON2 = 0x00;
  4554  0736  019F               	clrf	31	;volatile
  4555                           
  4556                           ;adc.c: 78: ADRESL = 0x00;
  4557  0737  019B               	clrf	27	;volatile
  4558                           
  4559                           ;adc.c: 81: ADRESH = 0x00;
  4560  0738  019C               	clrf	28	;volatile
  4561  0739  0008               	return
  4562  073A                     __end_of_ADC_Initialize:	
  4563                           
  4564                           	psect	text19
  4565  070A                     __ptext19:	
  4566 ;; *************** function _ADC_GetConversion *****************
  4567 ;; Defined at:
  4568 ;;		line 112 in file "mcc_generated_files/adc.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  channel         1    wreg     enum E4101
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  channel         1    5[COMMON] enum E4101
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  2    2[COMMON] unsigned int 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4582 ;;      Params:         2       0       0       0
  4583 ;;      Locals:         1       0       0       0
  4584 ;;      Temps:          1       0       0       0
  4585 ;;      Totals:         4       0       0       0
  4586 ;;Total ram usage:        4 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    2
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_main
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           
  4597                           ;psect for function _ADC_GetConversion
  4598  070A                     _ADC_GetConversion:	
  4599                           
  4600                           ;incstack = 0
  4601                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4602                           ;ADC_GetConversion@channel stored from wreg
  4603  070A  00F5               	movwf	ADC_GetConversion@channel
  4604                           
  4605                           ;adc.c: 115: ADCON0bits.CHS = channel;
  4606  070B  0875               	movf	ADC_GetConversion@channel,w
  4607  070C  00F4               	movwf	??_ADC_GetConversion
  4608  070D  0DF4               	rlf	??_ADC_GetConversion,f
  4609  070E  0DF4               	rlf	??_ADC_GetConversion,f
  4610  070F  0021               	movlb	1	; select bank1
  4611  0710  081D               	movf	29,w	;volatile
  4612  0711  0674               	xorwf	??_ADC_GetConversion,w
  4613  0712  3983               	andlw	-125
  4614  0713  0674               	xorwf	??_ADC_GetConversion,w
  4615  0714  009D               	movwf	29	;volatile
  4616                           
  4617                           ;adc.c: 118: ADCON0bits.ADON = 1;
  4618  0715  141D               	bsf	29,0	;volatile
  4619                           
  4620                           ;adc.c: 120: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4621  0716  3003               	movlw	3
  4622  0717                     u2007:	
  4623  0717  0B89               	decfsz	9,f
  4624  0718  2F17               	goto	u2007
  4625  0719  0000               	nop
  4626                           
  4627                           ;adc.c: 123: ADCON0bits.GO_nDONE = 1;
  4628  071A  0021               	movlb	1	; select bank1
  4629  071B  149D               	bsf	29,1	;volatile
  4630  071C                     l151:	
  4631                           ;adc.c: 127: {
  4632                           
  4633                           ;adc.c: 126: while (ADCON0bits.GO_nDONE)
  4634                           
  4635  071C  189D               	btfsc	29,1	;volatile
  4636  071D  2F1C               	goto	l151
  4637                           
  4638                           ;adc.c: 128: }
  4639                           ;adc.c: 130: return ((ADRESH << 8) + ADRESL);
  4640  071E  081C               	movf	28,w	;volatile
  4641  071F  00F3               	movwf	?_ADC_GetConversion+1
  4642  0720  081B               	movf	27,w	;volatile
  4643  0721  00F2               	movwf	?_ADC_GetConversion
  4644  0722  0008               	return
  4645  0723                     __end_of_ADC_GetConversion:	
  4646                           
  4647                           	psect	intentry
  4648  0004                     __pintentry:	
  4649 ;; *************** function _INTERRUPT_InterruptManager *****************
  4650 ;; Defined at:
  4651 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      void 
  4658 ;; Registers used:
  4659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4665 ;;      Params:         0       0       0       0
  4666 ;;      Locals:         0       0       0       0
  4667 ;;      Temps:          1       0       0       0
  4668 ;;      Totals:         1       0       0       0
  4669 ;;Total ram usage:        1 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    1
  4672 ;; This function calls:
  4673 ;;		_EUSART_Receive_ISR
  4674 ;;		_EUSART_Transmit_ISR
  4675 ;; This function is called by:
  4676 ;;		Interrupt level 1
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680  0004                     _INTERRUPT_InterruptManager:	
  4681                           
  4682                           ;incstack = 0
  4683  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4684                           
  4685                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4686  0005  3180               	pagesel	$
  4687  0006  0020               	movlb	0	; select bank0
  4688  0007  087F               	movf	127,w
  4689  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  4690                           
  4691                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4692  0009  1F0B               	btfss	11,6	;volatile
  4693  000A  2815               	goto	i1l167
  4694  000B  0021               	movlb	1	; select bank1
  4695  000C  1E11               	btfss	17,4	;volatile
  4696  000D  2815               	goto	i1l167
  4697  000E  0020               	movlb	0	; select bank0
  4698  000F  1E11               	btfss	17,4	;volatile
  4699  0010  2815               	goto	i1l167
  4700                           
  4701                           ;interrupt_manager.c: 55: {
  4702                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  4703  0011  3186  267E  3180   	fcall	_EUSART_Transmit_ISR
  4704                           
  4705                           ;interrupt_manager.c: 57: }
  4706  0014  281F               	goto	i1l171
  4707  0015                     i1l167:	
  4708                           
  4709                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  4710  0015  1F0B               	btfss	11,6	;volatile
  4711  0016  281F               	goto	i1l171
  4712  0017  0021               	movlb	1	; select bank1
  4713  0018  1E91               	btfss	17,5	;volatile
  4714  0019  281F               	goto	i1l171
  4715  001A  0020               	movlb	0	; select bank0
  4716  001B  1E91               	btfss	17,5	;volatile
  4717  001C  281F               	goto	i1l171
  4718                           
  4719                           ;interrupt_manager.c: 59: {
  4720                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  4721  001D  3186  26D4         	fcall	_EUSART_Receive_ISR
  4722  001F                     i1l171:	
  4723                           ;interrupt_manager.c: 62: else
  4724                           ;interrupt_manager.c: 63: {
  4725                           
  4726                           ;interrupt_manager.c: 61: }
  4727                           
  4728  001F  0871               	movf	??_INTERRUPT_InterruptManager,w
  4729  0020  0020               	movlb	0	; select bank0
  4730  0021  00FF               	movwf	127
  4731  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4732  0023  0009               	retfie
  4733  0024                     __end_of_INTERRUPT_InterruptManager:	
  4734                           
  4735                           	psect	text21
  4736  067E                     __ptext21:	
  4737 ;; *************** function _EUSART_Transmit_ISR *****************
  4738 ;; Defined at:
  4739 ;;		line 155 in file "mcc_generated_files/eusart.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;		None
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;		None
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      void 
  4746 ;; Registers used:
  4747 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4753 ;;      Params:         0       0       0       0
  4754 ;;      Locals:         0       0       0       0
  4755 ;;      Temps:          1       0       0       0
  4756 ;;      Totals:         1       0       0       0
  4757 ;;Total ram usage:        1 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_INTERRUPT_InterruptManager
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           
  4767                           ;psect for function _EUSART_Transmit_ISR
  4768  067E                     _EUSART_Transmit_ISR:	
  4769                           
  4770                           ;eusart.c: 159: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4774  067E  3008               	movlw	8
  4775  067F  0020               	movlb	0	; select bank0
  4776  0680  026D               	subwf	_eusartTxBufferRemaining,w	;volatile
  4777  0681  1803               	skipnc
  4778  0682  2E99               	goto	i1l111
  4779                           
  4780                           ;eusart.c: 160: {
  4781                           ;eusart.c: 161: TXREG = eusartTxBuffer[eusartTxTail++];
  4782  0683  087A               	movf	_eusartTxTail,w
  4783  0684  3E68               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  4784  0685  0086               	movwf	6
  4785  0686  3001               	movlw	1	; select bank2/3
  4786  0687  0087               	movwf	7
  4787  0688  0801               	movf	1,w
  4788  0689  0023               	movlb	3	; select bank3
  4789  068A  009A               	movwf	26	;volatile
  4790  068B  3001               	movlw	1
  4791  068C  00F0               	movwf	??_EUSART_Transmit_ISR
  4792  068D  0870               	movf	??_EUSART_Transmit_ISR,w
  4793  068E  07FA               	addwf	_eusartTxTail,f	;volatile
  4794                           
  4795                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4796  068F  3008               	movlw	8
  4797  0690  027A               	subwf	_eusartTxTail,w	;volatile
  4798  0691  1803               	btfsc	3,0
  4799                           
  4800                           ;eusart.c: 163: {
  4801                           ;eusart.c: 164: eusartTxTail = 0;
  4802  0692  01FA               	clrf	_eusartTxTail	;volatile
  4803                           
  4804                           ;eusart.c: 165: }
  4805                           ;eusart.c: 166: eusartTxBufferRemaining++;
  4806  0693  3001               	movlw	1
  4807  0694  00F0               	movwf	??_EUSART_Transmit_ISR
  4808  0695  0870               	movf	??_EUSART_Transmit_ISR,w
  4809  0696  0020               	movlb	0	; select bank0
  4810  0697  07ED               	addwf	_eusartTxBufferRemaining,f	;volatile
  4811                           
  4812                           ;eusart.c: 167: }
  4813  0698  0008               	return
  4814  0699                     i1l111:	
  4815                           
  4816                           ;eusart.c: 168: else
  4817                           ;eusart.c: 169: {
  4818                           ;eusart.c: 170: PIE1bits.TXIE = 0;
  4819  0699  0021               	movlb	1	; select bank1
  4820  069A  1211               	bcf	17,4	;volatile
  4821  069B  0008               	return
  4822  069C                     __end_of_EUSART_Transmit_ISR:	
  4823                           
  4824                           	psect	text22
  4825  06D4                     __ptext22:	
  4826 ;; *************** function _EUSART_Receive_ISR *****************
  4827 ;; Defined at:
  4828 ;;		line 174 in file "mcc_generated_files/eusart.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;		None
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;		None
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  1    wreg      void 
  4835 ;; Registers used:
  4836 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4842 ;;      Params:         0       0       0       0
  4843 ;;      Locals:         0       0       0       0
  4844 ;;      Temps:          1       0       0       0
  4845 ;;      Totals:         1       0       0       0
  4846 ;;Total ram usage:        1 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_INTERRUPT_InterruptManager
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           
  4856                           ;psect for function _EUSART_Receive_ISR
  4857  06D4                     _EUSART_Receive_ISR:	
  4858                           
  4859                           ;eusart.c: 177: if(1 == RCSTAbits.OERR)
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4863  06D4  0023               	movlb	3	; select bank3
  4864  06D5  1C9D               	btfss	29,1	;volatile
  4865  06D6  2ED9               	goto	i1l1471
  4866                           
  4867                           ;eusart.c: 178: {
  4868                           ;eusart.c: 181: RCSTAbits.CREN = 0;
  4869  06D7  121D               	bcf	29,4	;volatile
  4870                           
  4871                           ;eusart.c: 182: RCSTAbits.CREN = 1;
  4872  06D8  161D               	bsf	29,4	;volatile
  4873  06D9                     i1l1471:	
  4874                           
  4875                           ;eusart.c: 183: }
  4876                           ;eusart.c: 186: eusartRxBuffer[eusartRxHead++] = RCREG;
  4877  06D9  0819               	movf	25,w	;volatile
  4878  06DA  00F0               	movwf	??_EUSART_Receive_ISR
  4879  06DB  0020               	movlb	0	; select bank0
  4880  06DC  086C               	movf	_eusartRxHead,w
  4881  06DD  3E60               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  4882  06DE  0086               	movwf	6
  4883  06DF  3001               	movlw	1	; select bank2/3
  4884  06E0  0087               	movwf	7
  4885  06E1  0870               	movf	??_EUSART_Receive_ISR,w
  4886  06E2  0081               	movwf	1
  4887  06E3  3001               	movlw	1
  4888  06E4  00F0               	movwf	??_EUSART_Receive_ISR
  4889  06E5  0870               	movf	??_EUSART_Receive_ISR,w
  4890  06E6  07EC               	addwf	_eusartRxHead,f	;volatile
  4891                           
  4892                           ;eusart.c: 187: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4893  06E7  3008               	movlw	8
  4894  06E8  026C               	subwf	_eusartRxHead,w	;volatile
  4895  06E9  1803               	btfsc	3,0
  4896                           
  4897                           ;eusart.c: 188: {
  4898                           ;eusart.c: 189: eusartRxHead = 0;
  4899  06EA  01EC               	clrf	_eusartRxHead	;volatile
  4900                           
  4901                           ;eusart.c: 190: }
  4902                           ;eusart.c: 191: eusartRxCount++;
  4903  06EB  3001               	movlw	1
  4904  06EC  00F0               	movwf	??_EUSART_Receive_ISR
  4905  06ED  0870               	movf	??_EUSART_Receive_ISR,w
  4906  06EE  07EA               	addwf	_eusartRxCount,f	;volatile
  4907  06EF  0008               	return
  4908  06F0                     __end_of_EUSART_Receive_ISR:	
  4909  007E                     btemp	set	126	;btemp
  4910  007E                     int$flags	set	126
  4911  007E                     wtemp0	set	126


Data Sizes:
    Strings     279
    Constant    8
    Data        64
    BSS         23
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     74      78
    BANK1            80     72      74
    BANK2            80      0      80

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_27(CODE[4]), STR_24(CODE[4]), STR_22(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[7]), STR_17(CODE[4]), STR_15(CODE[4]), STR_13(CODE[4]), 
		 -> STR_11(CODE[4]), STR_9(CODE[4]), STR_7(CODE[4]), STR_5(CODE[4]), 
		 -> STR_3(CODE[4]), STR_1(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 4
		 -> main@result(BANK1[4]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_26(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> main@result(BANK1[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 64
		 -> main@command(BANK1[64]), 

    write_and_wait@res	PTR unsigned char  size(2) Largest target is 7
		 -> STR_24(CODE[4]), STR_22(CODE[4]), STR_19(CODE[7]), STR_17(CODE[4]), 
		 -> STR_15(CODE[4]), STR_13(CODE[4]), STR_11(CODE[4]), STR_9(CODE[4]), 
		 -> STR_7(CODE[4]), STR_5(CODE[4]), STR_3(CODE[4]), 

    write_and_wait@line	PTR unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 

    write_and_wait@cmd	PTR unsigned char  size(2) Largest target is 48
		 -> STR_23(CODE[48]), STR_21(CODE[12]), STR_18(CODE[4]), STR_16(CODE[42]), 
		 -> STR_14(CODE[42]), STR_12(CODE[36]), STR_10(CODE[3]), STR_8(CODE[12]), 
		 -> STR_6(CODE[12]), STR_4(CODE[12]), STR_2(CODE[5]), 

    write_line@line	PTR unsigned char  size(2) Largest target is 64
		 -> main@command(BANK1[64]), STR_25(CODE[12]), STR_23(CODE[48]), STR_21(CODE[12]), 
		 -> STR_18(CODE[4]), STR_16(CODE[42]), STR_14(CODE[42]), STR_12(CODE[36]), 
		 -> STR_10(CODE[3]), STR_8(CODE[12]), STR_6(CODE[12]), STR_4(CODE[12]), 
		 -> STR_2(CODE[5]), 

    sp__read_line	PTR unsigned char  size(1) Largest target is 64
		 -> read_line@c(BANK0[64]), 


Critical Paths under _main in COMMON

    _main->_blink_leds
    _main->_strcmp
    _write_and_wait->_strcmp
    _write_line->_strcat
    _strcmp->_read_line
    _read_line->_EUSART_Read
    _sprintf->___lwdiv
    _SYSTEM_Initialize->_EUSART_Initialize

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _main->_write_and_wait
    _write_and_wait->_read_line
    _strcmp->_read_line

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                74    74      0    8524
                                             72 BANK0      2     2      0
                                              0 BANK1     72    72      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                            ___awmod
                         _blink_leds
                          _read_line
                            _sprintf
                             _strcat
                             _strcmp
                     _write_and_wait
                         _write_line
 ---------------------------------------------------------------------------------
 (1) _write_and_wait                                       6     2      4    3047
                                             66 BANK0      6     2      4
                          _read_line
                             _strcmp
                         _write_line
 ---------------------------------------------------------------------------------
 (1) _write_line                                           5     3      2     423
                                              6 COMMON     3     1      2
                                              0 BANK0      2     2      0
                       _EUSART_Write
                             _strcat (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               5     3      2     467
                                              5 COMMON     5     3      2
                          _read_line (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_line                                           67    67      0     367
                                              4 COMMON     1     1      0
                                              0 BANK0     66    66      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _strcat                                               4     3      1     208
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             24    20      4     793
                                              0 BANK0     16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _blink_leds                                           8     4      4    2054
                                              2 COMMON     8     4      4
                       _set_low_leds
 ---------------------------------------------------------------------------------
 (2) _set_low_leds                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     424
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   ___awmod
   _blink_leds
     _set_low_leds
   _read_line
     _EUSART_Read
   _sprintf
     ___lwdiv
   _strcat
   _strcmp
     _read_line (ARG)
       _EUSART_Read
   _write_and_wait
     _read_line
       _EUSART_Read
     _strcmp
       _read_line (ARG)
         _EUSART_Read
     _write_line
       _EUSART_Write
       _strcat (ARG)
   _write_line
     _EUSART_Write
     _strcat (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      F4       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4A      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     48      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      F4      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jun 13 10:46:32 2017

                        __CFG_CP$OFF 0000                          __CFG_LVP$ON 0000  
                                l105 0647                                  l151 071C  
                                l241 049F                                  l233 0478  
                                l235 0497                                  l340 0298  
                                l238 049B                                  l293 04C3  
                                l299 04FF                                  u985 04EF  
                       ___awmod@sign 0078                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       ?_EUSART_Read 0070                          main@command 00A0  
                               l1503 04A3                                 l1423 05EA  
                               l1505 04B4                                 l1417 05CB  
                               l1419 05D3                                 l1445 05BB  
                               l1437 059D                                 l1605 061B  
                               l1293 0660                                 l1623 051A  
                               l1439 05A9                                 l1607 0626  
                               l1391 04F1                                 l1641 053F  
                               l1449 05C4                                 l1561 03E0  
                               l1609 062E                                 l1385 04CF  
                               l1635 0527                                 l1627 0521  
                               l1811 065C                                 l1637 0533  
                               l1645 0548                                 l1397 050E  
                               l1821 060C                                 l1583 0428  
                               l1567 03F8                                 l1911 01C6  
                               l1649 0550                                 l1593 042C  
                               l1577 0409                                 l1905 01A8  
                               l1595 03BE                                 l1819 05F3  
                               l1923 020C                                 l1851 006D  
                               l1597 0466                                 l1933 0239  
                               l1925 020F                                 l1917 01E9  
                               l1863 00B3                                 l1881 011C  
                               l1857 0090                                 l1939 024E  
                               l1875 00F9                                 l1797 063C  
                               l1893 0162                                 l1869 00D6  
                               l1887 013F                                 l1899 0185  
                               STR_1 03A6                                 STR_2 039D  
                               STR_3 03AE                                 STR_4 0372  
                               STR_5 03AE                                 STR_6 035A  
                               STR_7 03AE                                 STR_8 038A  
                               STR_9 03AE                                 u1205 0482  
                               u2007 0717                                 u1055 05A0  
                               u1075 05AA                                 u1085 05B4  
                               _LATA 010C                                 _LATB 010D  
                               u1095 05BC                                 u1335 041E  
                               _LATC 010E                                 u1425 052A  
                               u1445 0539                                 u1455 0540  
                               u1930 0280                                 u1925 0249  
                               u1957 0254                                 u1967 0470  
                               u1977 048C                                 u1987 04A8  
                               u1997 04BC                                 _WPUA 020C  
                               _WPUB 020D                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _main 0045  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               start 0024                        __CFG_MCLRE$ON 0000  
                      ?_EUSART_Write 0070       __size_of_OSCILLATOR_Initialize 0004  
      __end_of_OSCILLATOR_Initialize 0754                                ?_main 0070  
                              STR_10 03B5                                STR_11 03AE  
                              STR_20 03A6                                STR_12 0325  
                              STR_13 03AE                                STR_21 037E  
                              STR_22 03AE                                STR_14 02D1  
                              STR_15 03AE                                STR_23 02A1  
                              STR_24 03AE                                STR_16 02FB  
                              STR_17 03AE                                STR_25 0366  
                      __CFG_WDTE$OFF 0000                                STR_26 03B2  
                              STR_18 03A2                                STR_27 03AA  
                              STR_19 0396                                STR_28 0349  
                    __end_of___awmod 0555                      __end_of___lwdiv 05C9  
                              i1l111 0699                                i1l171 001F  
                              i1l167 0015                                _RCREG 0199  
                              _RCSTA 019D                                _TRISA 008C  
                              _TRISB 008D                                _TRISC 008E  
                              _TXREG 019A                                _TXSTA 019E  
                     _WDT_Initialize 074C                                main@c 00E4  
                     write_line@line 0076                                status 0003  
                              wtemp0 007E                      __end_of_sprintf 046B  
                    __initialization 0026                         __end_of_main 0299  
                     ??_EUSART_Write 0072                     ??_write_and_wait 0066  
                     __CFG_LPBOR$OFF 0000          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 0068               __end_of_WDT_Initialize 0750  
                             _ADCON0 009D                               _ADCON1 009E  
                             _ADCON2 009F                               _ADRESH 009C  
                             _ADRESL 009B                               _APFCON 011D  
                             _ANSELA 018C                               _ANSELB 018D  
                             _ANSELC 018E                               i1l1471 06D9  
                             _OSCCON 0099                               _SPBRGH 019C  
                             _SPBRGL 019B                               _WDTCON 0097  
                     __CFG_PWRTE$OFF 0000                       __CFG_STVREN$ON 0000  
                          ??___awmod 0076                            ??___lwdiv 0076  
                _EUSART_Transmit_ISR 067E                   write_and_wait@line 0067  
                    ___awmod@divisor 0072                      ___awmod@counter 0077  
                             _strcat 0616                               _strcmp 05C9  
                    ?_WDT_Initialize 0070             ADC_GetConversion@channel 0075  
                          ??_sprintf 0024                 ?_EUSART_Transmit_ISR 0070  
               __size_of_EUSART_Read 001F                    _SYSTEM_Initialize 0723  
            __end_of__initialization 0041                   ?_SYSTEM_Initialize 0070  
                     __pcstackCOMMON 0070                         __pidataBANK2 0555  
                ??_SYSTEM_Initialize 0073                       _OPTION_REGbits 0095  
          __end_of_SYSTEM_Initialize 0732                ??_EUSART_Transmit_ISR 0070  
                         __pbssBANK0 006A                           __pbssBANK1 00E8  
                         __pbssBANK2 0160                 __end_of_EUSART_Write 065F  
        __size_of_EUSART_Receive_ISR 001C                   __size_of_read_line 004D  
                         __pmaintext 0045                           __pintentry 0004  
                         _blink_leds 046B                              _BAUDCON 019F  
            __size_of_ADC_Initialize 0008                              ?_strcat 0072  
                            ?_strcmp 0075                        _eusartRxCount 006A  
                            ___awmod 0510                              ___lwdiv 0595  
                      ?_set_low_leds 0070                              __ptext1 069C  
                            __ptext2 05F0                              __ptext3 063B  
                            __ptext4 05C9                              __ptext5 04C3  
                            __ptext6 065F                              __ptext7 0616  
                            __ptext8 03B8                              __ptext9 0595  
                    __size_of_strcat 0025                      __size_of_strcmp 0027  
                  __end_of_hexpowers 02A1                _OSCILLATOR_Initialize 0750  
                   ___awmod@dividend 0074                    __end_of_read_line 0510  
           ??_PIN_MANAGER_Initialize 0072           __size_of_SYSTEM_Initialize 000F  
                            main@err 00E6                              _sprintf 03B8  
                            clrloop0 0741                 end_of_initialization 0041  
                            init_ram 073A                              initloop 073B  
                  _EUSART_Initialize 06F0                   ?_EUSART_Initialize 0070  
                          _RCSTAbits 019D                          ?_blink_leds 0072  
                     ??_set_low_leds 0072                         __pstringtext 0299  
                            strcmp@r 0078                  ??_EUSART_Initialize 0072  
                   ??_WDT_Initialize 0072                            _PORTCbits 000E  
                   __CFG_FOSC$INTOSC 0000                __size_of_EUSART_Write 0024  
          __end_of_EUSART_Initialize 070A                           main@result 00E0  
                         _write_line 05F0                         _EUSART_Write 063B  
                     _ADC_Initialize 0732               ?_OSCILLATOR_Initialize 0070  
                     __end_of_strcat 063B                       __end_of_strcmp 05F0  
                start_initialization 0026      __size_of_PIN_MANAGER_Initialize 001C  
                      ??_EUSART_Read 0072              __size_of_write_and_wait 001C  
                __size_of_blink_leds 0058                    write_and_wait@cmd 0062  
                  write_and_wait@res 0064               __end_of_ADC_Initialize 073A  
                        __pdataBANK2 0120                           read_line@c 0020  
                         read_line@i 0060                             ??_strcat 0073  
                           ??_strcmp 0077          __end_of_EUSART_Transmit_ISR 069C  
                        __pbssCOMMON 007A                            ___latbits 0001  
                          _adcResult 00E8                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                 __end_of_set_low_leds 074C  
         __end_of_EUSART_Receive_ISR 06F0           __size_of_EUSART_Initialize 001A  
                        sprintf@flag 0028                          sprintf@prec 002D  
                __end_of_EUSART_Read 067E                            __pnvBANK0 006D  
                   ___lwdiv@dividend 0074               _PIN_MANAGER_Initialize 06B8  
               EUSART_Read@readValue 0073                             ?___awmod 0072  
                           ?___lwdiv 0072                      ?_ADC_Initialize 0070  
                       _eusartRxHead 006C                         _eusartTxHead 007B  
                       _eusartRxTail 006B                         _eusartTxTail 007A  
                        ?_write_line 0076         ??_INTERRUPT_InterruptManager 0071  
            _eusartTxBufferRemaining 006D                            _hexpowers 0299  
                   ___lwdiv@quotient 0077                             ?_sprintf 0020  
                          _read_line 04C3                       _eusartRxBuffer 0160  
                     _eusartTxBuffer 0168                             _LATAbits 010C  
                           _LATCbits 010E                            clear_ram0 0740  
                           _PIE1bits 0091  __size_of_INTERRUPT_InterruptManager 0020  
                           _PIR1bits 0011                            main@F4456 0120  
                       ??_blink_leds 0076                           _ADCON0bits 009D  
                        write_line@i 0020                       _write_and_wait 069C  
                        _EUSART_Read 065F                           ?_read_line 0070  
                 __end_of_blink_leds 04C3                  __size_of_write_line 0026  
                  _ADC_GetConversion 070A              ??_OSCILLATOR_Initialize 0072  
                 ?_ADC_GetConversion 0072                     __size_of___awmod 0045  
                   __size_of___lwdiv 0034                  ??_ADC_GetConversion 0074  
                         sprintf@idx 0029               __end_of_write_and_wait 06B8  
                         sprintf@val 002B                           strcat@from 0072  
              __size_of_set_low_leds 0006                      ___lwdiv@divisor 0072  
                    ___lwdiv@counter 0079                             __ptext10 046B  
                           __ptext11 0746                             __ptext12 0510  
                           __ptext21 067E                             __ptext13 0723  
                           __ptext22 06D4                             __ptext14 074C  
                           __ptext15 06B8                             __ptext16 0750  
                           __ptext17 06F0                             __ptext18 0732  
                           __ptext19 070A                     __size_of_sprintf 00B3  
                      __size_of_main 0254            __end_of_ADC_GetConversion 0723  
                           int$flags 007E   __end_of_INTERRUPT_InterruptManager 0024  
         _INTERRUPT_InterruptManager 0004                         _set_low_leds 0746  
                    ?_write_and_wait 0062                           _INTCONbits 000B  
                        ??_read_line 0074              __size_of_WDT_Initialize 0004  
                           intlevel1 0000                            sprintf@ap 002A  
                          sprintf@sp 002E              ?_PIN_MANAGER_Initialize 0070  
                  __CFG_CLKOUTEN$OFF 0000                     ??_ADC_Initialize 0072  
                        blink_leds@c 0074                          blink_leds@i 0078  
                        blink_leds@n 0072                   _EUSART_Receive_ISR 06D4  
                       ??_write_line 0078                             sprintf@c 002F  
                           sprintf@f 0020                  ?_EUSART_Receive_ISR 0070  
                           strcat@cp 0075                             strcat@to 0074  
                           strcmp@s1 0079                             strcmp@s2 0075  
                 EUSART_Write@txData 0073         __size_of_EUSART_Transmit_ISR 001E  
     __end_of_PIN_MANAGER_Initialize 06D4                 ??_EUSART_Receive_ISR 0070  
                 __end_of_write_line 0616           __size_of_ADC_GetConversion 0019  
